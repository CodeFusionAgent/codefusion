[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "codefusion"
version = "0.0.1"
description = "A code understanding tool for senior developers to quickly ramp up on large codebases"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "CodeFusion Team"}
]
keywords = ["code", "analysis", "ai", "agents", "exploration"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.10"
dependencies = [
    "pyyaml>=6.0",
    "pathlib",
]

[project.optional-dependencies]
llm = [
    "litellm>=1.0.0",
]
neo4j = [
    "neo4j>=5.0.0",
]
vector = [
    "faiss-cpu>=1.7.0",
    "sentence-transformers>=2.0.0",
    "numpy>=1.21.0",
]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "isort>=5.0.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
    "pre-commit>=2.0.0",
]
docs = [
    "mkdocs>=1.4.0",
    "mkdocs-material>=8.0.0",
    "mkdocs-mermaid2-plugin>=0.6.0",
]
all = [
    "codefusion[llm,neo4j,vector,dev,docs]",
]

[project.urls]
Homepage = "https://github.com/CodeFusionAgent/codefusion"
Repository = "https://github.com/CodeFusionAgent/codefusion"
Documentation = "https://codefusionagent.github.io/codefusion"
"Bug Tracker" = "https://github.com/CodeFusionAgent/codefusion/issues"

[project.scripts]
codefusion = "cf.run.run:main"
cf = "cf.run.run:main"

[tool.setuptools.packages.find]
include = ["cf*"]
exclude = ["tests*", "docs*"]

[tool.setuptools.package-data]
cf = ["config/**/*.yaml", "config/**/*.yml"]

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["cf"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "litellm.*",
    "neo4j.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=cf",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "-v"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["cf"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]