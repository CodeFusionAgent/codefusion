{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CodeFusion Documentation","text":"<p>CodeFusion is an AI-powered multi-agent system for intelligent codebase exploration and analysis. The system uses LLM function calling and verbose logging to provide comprehensive technical narratives about how systems work.</p>"},{"location":"#current-system-overview","title":"\ud83c\udfaf Current System Overview","text":"<p>CodeFusion provides detailed analysis through:</p> <ul> <li>\ud83e\udd16 MULTI-AGENT COORDINATION: SupervisorAgent orchestrates specialized agents</li> <li>\ud83d\udd27 LLM FUNCTION CALLING: AI dynamically selects tools with parameters  </li> <li>\ud83d\udcdd VERBOSE LOGGING: Real-time visibility into agent decision making</li> <li>\ud83d\udcd6 TECHNICAL NARRATIVES: Comprehensive architectural overviews</li> <li>\u23f1\ufe0f PERFORMANCE TRACKING: Accurate execution time measurement</li> </ul> <p>This creates intelligent, observable exploration that generates educational technical stories.</p>"},{"location":"#current-features","title":"\ud83d\ude80 Current Features","text":"<ul> <li>Multi-Agent System: SupervisorAgent, CodeAgent, DocsAgent, WebAgent coordination</li> <li>LLM Function Calling: Dynamic tool selection with intelligent parameter generation  </li> <li>Verbose Logging: Action planning phases and tool selection visibility</li> <li>Technical Narratives: Architectural overview generation with \"Life of X\" format</li> <li>Response Time Tracking: Accurate execution timing (fixed from 0.0s issue)</li> <li>Tool Ecosystem: <code>scan_directory</code>, <code>read_file</code>, <code>search_files</code>, <code>analyze_code</code>, <code>web_search</code></li> <li>LiteLLM Integration: Multi-provider support (OpenAI, Anthropic, LLaMA)</li> <li>Configuration Management: YAML config with environment variable support</li> </ul>"},{"location":"#current-system-flow","title":"\ud83d\udd04 Current System Flow","text":"<p>CodeFusion follows this multi-agent process:</p> <ol> <li>\ud83d\udcdd SUPERVISOR COORDINATION: Orchestrates 3 specialized agents</li> <li>\ud83c\udfaf AGENT PLANNING: Each agent shows ACTION PLANNING PHASE reasoning  </li> <li>\ud83d\udd27 LLM FUNCTION CALLING: AI selects tools with dynamic parameters</li> <li>\ud83d\udcca RESULT SYNTHESIS: SupervisorAgent consolidates insights into narrative</li> <li>\u23f1\ufe0f PERFORMANCE TRACKING: Accurate timing and metrics reporting</li> </ol>"},{"location":"#current-system-example","title":"Current System Example","text":"<pre><code>$ python -m cf.run.main --verbose ask /tmp/fastapi \"How does routing work?\"\n\n\ud83d\udd0d [SupervisorAgent] Running code analysis agent...\n\ud83c\udfaf [CodeAgent] ACTION PLANNING PHASE  \n\ud83c\udfaf [CodeAgent] LLM selected tool: search_files\n\ud83d\udccb [CodeAgent] Tool arguments: {'pattern': 'routing', 'file_types': ['*.py']}\n\n\ud83d\udcda [SupervisorAgent] Running documentation agent...\n\ud83c\udfaf [DocsAgent] ACTION PLANNING PHASE\n\ud83c\udfaf [DocsAgent] LLM selected tool: search_files\n\ud83d\udccb [DocsAgent] Tool arguments: {'pattern': 'routing', 'file_types': ['*.md']}\n\n\ud83c\udf10 [SupervisorAgent] Running web search agent...\n\ud83c\udfaf [WebAgent] ACTION PLANNING PHASE\n\ud83c\udfaf [WebAgent] LLM selected tool: web_search\n\ud83d\udccb [WebAgent] Tool arguments: {'query': 'FastAPI routing implementation'}\n\n\ud83e\udd16 Consolidating results with LLM...\n\ud83c\udfaf Life of FastAPI: Routing Architecture\n======================================================================\n\ud83c\udfd7\ufe0f **Architectural Overview:** [Detailed technical narrative...]\n\u23f1\ufe0f Response time: 30.4s\n</code></pre>"},{"location":"#quick-start","title":"\ud83c\udfaf Quick Start","text":"<p>Get started with CodeFusion analysis:</p> <pre><code># 1. Setup environment\npython -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\npip install -e .\n\n# 2. Configure API key\nexport OPENAI_API_KEY=\"your-openai-api-key\"\n# OR edit cf/configs/config.yaml\n\n# 3. Run analysis with verbose logging  \npython -m cf.run.main --verbose ask /path/to/repo \"How does routing work?\"\npython -m cf.run.main --verbose ask /tmp/fastapi \"Explain FastAPI and Starlette relationship\"\npython -m cf.run.main --verbose ask /path/to/repo \"What specific responsibilities does X handle?\"\n\n# 4. Check execution details\n# System shows:\n# - Agent coordination and planning phases\n# - LLM tool selection with parameters  \n# - Real-time progress and results\n# - Accurate response time measurement\n</code></pre>"},{"location":"#documentation-structure","title":"\ud83d\udcda Documentation Structure","text":"<p>This documentation is organized into several sections:</p> <ul> <li>Installation: Get CodeFusion up and running</li> <li>Usage: Learn how to use the ReAct framework</li> <li>Configuration: Configure LLM integration and performance</li> <li>ReAct Framework: Comprehensive framework documentation</li> <li>API Reference: Complete API documentation</li> <li>Development: Architecture and contribution guide</li> </ul>"},{"location":"#life-of-x-architecture","title":"\ud83c\udfd7\ufe0f Life of X Architecture","text":"<p>CodeFusion implements a sophisticated Life of X narrative generation system:</p> <pre><code>cf/\n\u251c\u2500\u2500 core/                       # ReAct Foundation\n\u2502   \u251c\u2500\u2500 react_agent.py         # Base ReAct agent with R\u2192A\u2192O loops\n\u2502   \u251c\u2500\u2500 react_config.py        # Performance and LLM configuration\n\u2502   \u2514\u2500\u2500 react_tracing.py       # Execution monitoring and metrics\n\u251c\u2500\u2500 agents/                     # Specialized ReAct Agents\n\u2502   \u251c\u2500\u2500 react_supervisor_agent.py      # Multi-agent orchestration + Life of X generation\n\u2502   \u251c\u2500\u2500 react_documentation_agent.py   # Documentation analysis\n\u2502   \u2514\u2500\u2500 react_code_architecture_agent.py # Combined code &amp; architecture analysis\n\u251c\u2500\u2500 llm/                        # LLM Integration + Life of X System\n\u2502   \u251c\u2500\u2500 real_llm.py            # LiteLLM provider integration\n\u2502   \u251c\u2500\u2500 prompt_templates.py    # Template-based prompt system\n\u2502   \u251c\u2500\u2500 response_parser.py     # Unified response parsing\n\u2502   \u2514\u2500\u2500 simple_llm.py          # Fallback reasoning\n\u251c\u2500\u2500 tools/                      # Tool Ecosystem + Narrative Utilities\n\u2502   \u251c\u2500\u2500 advanced_tools.py      # 8 specialized exploration tools\n\u2502   \u2514\u2500\u2500 narrative_utils.py     # Life of X narrative generation utilities\n\u2514\u2500\u2500 run/\n    \u2514\u2500\u2500 simple_run.py           # Life of X CLI interface\n</code></pre>"},{"location":"#life-of-x-vs-traditional-approaches","title":"\ud83c\udd9a Life of X vs Traditional Approaches","text":""},{"location":"#traditional-static-analysis","title":"\u274c Traditional Static Analysis","text":"<ul> <li>One-time parsing of entire codebase</li> <li>Static analysis without context</li> <li>Limited reasoning about findings</li> <li>No adaptive exploration</li> <li>Fast but shallow, misses context</li> <li>No architectural storytelling</li> </ul>"},{"location":"#life-of-x-approach","title":"\u2705 Life of X Approach","text":"<ul> <li>Architectural storytelling that follows features through entire systems</li> <li>Narrative-driven exploration that generates educational stories</li> <li>AI-powered reasoning and decision making</li> <li>Multi-agent collaborative analysis</li> <li>Adaptive exploration that learns from observations</li> <li>Goal-oriented loops with progress tracking</li> <li>Persistent caching across sessions</li> <li>Comprehensive error recovery</li> <li>Template-based prompts for consistent high-quality narratives</li> </ul>"},{"location":"#contributing","title":"\ud83e\udd1d Contributing","text":"<p>We welcome contributions to the CodeFusion Life of X framework! Contributions should enhance the narrative generation capabilities:</p> <ol> <li>Enhance Life of X Narratives: Improve architectural storytelling quality</li> <li>Maintain ReAct Principles: Preserve the Reason \u2192 Act \u2192 Observe pattern</li> <li>Add Narrative Templates: Create templates for different story types</li> <li>Add Specialized Agents: Create domain-specific analysis agents</li> <li>Extend Tool Ecosystem: Add new tools for enhanced capabilities</li> <li>Improve LLM Integration: Support additional providers and models</li> <li>Enhance Error Recovery: Strengthen resilience and fault tolerance</li> </ol> <p>See Contributing Guide for detailed information.</p>"},{"location":"#license","title":"\ud83d\udcc4 License","text":"<p>CodeFusion is released under the Apache License 2.0. See LICENSE for details.</p>"},{"location":"#support-resources","title":"\ud83c\udd98 Support &amp; Resources","text":"<ul> <li>\ud83d\udcd6 Complete Documentation</li> <li>\ud83e\udde0 ReAct Framework Guide</li> <li>\ud83d\udd27 API Reference</li> <li>\ud83d\udcac GitHub Issues</li> <li>\ud83d\udc1b Bug Reports</li> <li>\ud83d\udca1 Feature Requests</li> </ul> <p>Built on the ReAct pattern for systematic, intelligent code exploration through reasoning, acting, and observing.</p>"},{"location":"react-framework/","title":"CodeFusion ReAct Framework Documentation","text":""},{"location":"react-framework/#overview","title":"Overview","text":"<p>The CodeFusion ReAct Framework is a sophisticated agent-based system that uses the ReAct (Reasoning + Acting) pattern to systematically explore and analyze codebases. This framework provides intelligent, LLM-powered agents that work together to understand code structure, documentation, and architecture.</p>"},{"location":"react-framework/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Quick Start</li> <li>Core Concepts</li> <li>Agent Types</li> <li>Configuration</li> <li>Tool Ecosystem</li> <li>LLM Integration</li> <li>Caching &amp; Performance</li> <li>Tracing &amp; Monitoring</li> <li>Error Handling</li> <li>Advanced Usage</li> <li>API Reference</li> <li>Troubleshooting</li> </ol>"},{"location":"react-framework/#quick-start","title":"Quick Start","text":""},{"location":"react-framework/#installation","title":"Installation","text":"<pre><code># Install CodeFusion with ReAct framework\npip install -e .\n\n# Optional: Install LiteLLM for advanced LLM support\npip install litellm\n</code></pre>"},{"location":"react-framework/#basic-usage","title":"Basic Usage","text":"<pre><code># Multi-agent repository analysis\ncf analyze /path/to/repo --focus=all\n\n# Documentation-focused analysis\ncf analyze /path/to/repo --focus=docs\n\n# Architecture-focused analysis  \ncf analyze /path/to/repo --focus=arch\n\n# Code-focused analysis\ncf analyze /path/to/repo --focus=code\n</code></pre>"},{"location":"react-framework/#configuration","title":"Configuration","text":"<pre><code># Set up OpenAI integration\nexport CF_LLM_MODEL=gpt-4\nexport CF_LLM_API_KEY=your-openai-api-key\n\n# Set up Anthropic integration\nexport CF_LLM_MODEL=claude-3-sonnet-20240229\nexport CF_LLM_API_KEY=your-anthropic-api-key\n\n# Set up LLaMA integration\nexport CF_LLM_MODEL=together_ai/meta-llama/Llama-2-7b-chat-hf\nexport CF_LLM_API_KEY=your-together-ai-api-key\n</code></pre>"},{"location":"react-framework/#core-concepts","title":"Core Concepts","text":""},{"location":"react-framework/#react-pattern","title":"ReAct Pattern","text":"<p>The ReAct pattern follows a systematic three-phase cycle:</p> <ol> <li>Reason: Analyze current state and determine the next best action</li> <li>Act: Execute the determined action using available tools</li> <li>Observe: Process the results and update understanding</li> </ol> <pre><code># Example ReAct cycle\ndef execute_react_loop(self, goal: str) -&gt; Dict[str, Any]:\n    while not goal_achieved and iteration &lt; max_iterations:\n        # REASON: What should I do next?\n        reasoning = self.reason()\n\n        # ACT: Take the reasoned action\n        action = self.plan_action(reasoning)\n        observation = self.act(action)\n\n        # OBSERVE: Reflect on what happened\n        self.observe(observation)\n</code></pre>"},{"location":"react-framework/#multi-agent-architecture","title":"Multi-Agent Architecture","text":"<p>The framework uses specialized agents that work together:</p> <ul> <li>Supervisor Agent: Orchestrates other agents and synthesizes insights</li> <li>Documentation Agent: Analyzes README files, docs, and guides</li> <li>Codebase Agent: Examines source code, functions, and patterns</li> <li>Architecture Agent: Studies system design and architectural patterns</li> </ul>"},{"location":"react-framework/#tool-rich-environment","title":"Tool-Rich Environment","text":"<p>Each agent has access to 8 core tools:</p> <ul> <li>Directory Scanning: Explore repository structure</li> <li>File Listing: Find files matching patterns</li> <li>File Reading: Examine file contents</li> <li>Pattern Searching: Search across multiple files</li> <li>Code Analysis: Extract code entities and patterns</li> <li>LLM Reasoning: AI-powered decision making</li> <li>LLM Summarization: AI-powered content summarization</li> <li>Caching: Store and retrieve previous results</li> </ul>"},{"location":"react-framework/#agent-types","title":"Agent Types","text":""},{"location":"react-framework/#1-react-supervisor-agent","title":"1. ReAct Supervisor Agent","text":"<p>Purpose: Coordinates multiple specialized agents and synthesizes cross-agent insights.</p> <pre><code>from cf.agents.react_supervisor_agent import ReActSupervisorAgent\nfrom cf.aci.repo import LocalCodeRepo\nfrom cf.config import CfConfig\n\n# Create supervisor agent\nrepo = LocalCodeRepo(\"/path/to/repo\")\nconfig = CfConfig()\nsupervisor = ReActSupervisorAgent(repo, config)\n\n# Run comprehensive analysis\nresults = supervisor.explore_repository(focus=\"all\")\n</code></pre> <p>Key Features: - Multi-agent coordination - Cross-agent insight synthesis - Focus-based analysis (docs, code, arch, all) - Intelligent agent activation based on findings</p>"},{"location":"react-framework/#2-react-documentation-agent","title":"2. ReAct Documentation Agent","text":"<p>Purpose: Specializes in analyzing documentation, README files, and guides.</p> <pre><code>from cf.agents.react_documentation_agent import ReActDocumentationAgent\n\n# Create documentation agent\ndoc_agent = ReActDocumentationAgent(repo, config)\n\n# Analyze documentation\nresults = doc_agent.execute_react_loop(\"Analyze project documentation structure\")\n</code></pre> <p>Specializations: - Markdown file analysis - Documentation structure mapping - Guide and tutorial identification - API documentation discovery</p>"},{"location":"react-framework/#3-react-codebase-agent","title":"3. ReAct Codebase Agent","text":"<p>Purpose: Focuses on source code analysis, function extraction, and pattern detection.</p> <pre><code>from cf.agents.react_codebase_agent import ReActCodebaseAgent\n\n# Create codebase agent\ncode_agent = ReActCodebaseAgent(repo, config)\n\n# Analyze codebase\nresults = code_agent.execute_react_loop(\"Identify main classes and functions\")\n</code></pre> <p>Specializations: - Code entity extraction (classes, functions, variables) - Language-specific analysis - Complexity assessment - Dependency mapping - Pattern recognition</p>"},{"location":"react-framework/#4-react-architecture-agent","title":"4. ReAct Architecture Agent","text":"<p>Purpose: Understands system design, components, and architectural patterns.</p> <pre><code>from cf.agents.react_architecture_agent import ReActArchitectureAgent\n\n# Create architecture agent\narch_agent = ReActArchitectureAgent(repo, config)\n\n# Analyze architecture\nresults = arch_agent.execute_react_loop(\"Understand system architecture\")\n</code></pre> <p>Specializations: - Component identification - Design pattern detection - System boundary analysis - Architectural insight generation</p>"},{"location":"react-framework/#configuration_1","title":"Configuration","text":""},{"location":"react-framework/#environment-variables","title":"Environment Variables","text":"<pre><code># ReAct Loop Configuration\nCF_REACT_MAX_ITERATIONS=20          # Maximum iterations per agent\nCF_REACT_ITERATION_TIMEOUT=30.0     # Timeout per iteration (seconds)\nCF_REACT_TOTAL_TIMEOUT=600.0        # Total timeout (seconds)\n\n# Error Handling\nCF_REACT_MAX_ERRORS=10               # Maximum errors before stopping\nCF_REACT_MAX_CONSECUTIVE_ERRORS=3    # Maximum consecutive errors\nCF_REACT_ERROR_RECOVERY=true         # Enable error recovery\n\n# Caching Configuration\nCF_REACT_CACHE_ENABLED=true          # Enable caching\nCF_REACT_CACHE_MAX_SIZE=1000         # Maximum cache entries\nCF_REACT_CACHE_TTL=3600              # Cache TTL (seconds)\n\n# Tracing Configuration\nCF_REACT_TRACING_ENABLED=true        # Enable tracing\nCF_REACT_TRACE_DIR=./traces          # Trace output directory\nCF_REACT_LOG_LEVEL=INFO              # Logging level\n\n# LLM Configuration\nCF_LLM_MODEL=gpt-4                   # LLM model to use\nCF_LLM_API_KEY=your-api-key          # API key\nCF_LLM_MAX_TOKENS=1000               # Max tokens per request\nCF_LLM_TEMPERATURE=0.7               # LLM temperature\n</code></pre>"},{"location":"react-framework/#performance-profiles","title":"Performance Profiles","text":"<pre><code>from cf.core.react_config import ReActConfig\n\n# Fast profile - quick analysis\nconfig = ReActConfig()\nconfig.apply_performance_profile(\"fast\")\n# max_iterations=10, timeouts=15s, cache=500\n\n# Balanced profile - default\nconfig.apply_performance_profile(\"balanced\")\n# max_iterations=20, timeouts=30s, cache=1000\n\n# Thorough profile - comprehensive analysis\nconfig.apply_performance_profile(\"thorough\")\n# max_iterations=50, timeouts=60s, cache=2000\n</code></pre>"},{"location":"react-framework/#custom-configuration","title":"Custom Configuration","text":"<pre><code>from cf.core.react_config import ReActConfig\n\n# Create custom configuration\nconfig = ReActConfig(\n    max_iterations=30,\n    iteration_timeout=45.0,\n    cache_enabled=True,\n    cache_max_size=2000,\n    tracing_enabled=True,\n    trace_directory=\"./custom_traces\"\n)\n\n# Validate configuration\nconfig.validate()\n\n# Use with agent\nagent = ReActCodebaseAgent(repo, cf_config, react_config=config)\n</code></pre>"},{"location":"react-framework/#tool-ecosystem","title":"Tool Ecosystem","text":""},{"location":"react-framework/#available-tools","title":"Available Tools","text":"<p>Each ReAct agent has access to these tools through the <code>ActionType</code> enum:</p>"},{"location":"react-framework/#1-scan_directory","title":"1. SCAN_DIRECTORY","text":"<pre><code># Recursively scan directory structure\naction = ReActAction(\n    action_type=ActionType.SCAN_DIRECTORY,\n    description=\"Scan project root directory\",\n    parameters={\n        'directory': '.',\n        'max_depth': 3\n    }\n)\n</code></pre>"},{"location":"react-framework/#2-list_files","title":"2. LIST_FILES","text":"<pre><code># List files matching patterns\naction = ReActAction(\n    action_type=ActionType.LIST_FILES,\n    description=\"Find Python files\",\n    parameters={\n        'pattern': '*.py',\n        'directory': './src'\n    }\n)\n</code></pre>"},{"location":"react-framework/#3-read_file","title":"3. READ_FILE","text":"<pre><code># Read file contents\naction = ReActAction(\n    action_type=ActionType.READ_FILE,\n    description=\"Read main module\",\n    parameters={\n        'file_path': 'src/main.py',\n        'max_lines': 100\n    }\n)\n</code></pre>"},{"location":"react-framework/#4-search_files","title":"4. SEARCH_FILES","text":"<pre><code># Search for patterns across files\naction = ReActAction(\n    action_type=ActionType.SEARCH_FILES,\n    description=\"Find API endpoints\",\n    parameters={\n        'pattern': 'def api_',\n        'file_types': ['.py'],\n        'max_results': 20\n    }\n)\n</code></pre>"},{"location":"react-framework/#5-analyze_code","title":"5. ANALYZE_CODE","text":"<pre><code># Analyze code structure\naction = ReActAction(\n    action_type=ActionType.ANALYZE_CODE,\n    description=\"Analyze module complexity\",\n    parameters={\n        'file_path': 'src/complex_module.py',\n        'analysis_type': 'basic'\n    }\n)\n</code></pre>"},{"location":"react-framework/#6-llm_reasoning","title":"6. LLM_REASONING","text":"<pre><code># Use LLM for reasoning\naction = ReActAction(\n    action_type=ActionType.LLM_REASONING,\n    description=\"Reason about next action\",\n    parameters={\n        'context': 'Current findings...',\n        'question': 'What should I investigate next?',\n        'agent_type': 'codebase'\n    }\n)\n</code></pre>"},{"location":"react-framework/#7-llm_summary","title":"7. LLM_SUMMARY","text":"<pre><code># Generate AI summaries\naction = ReActAction(\n    action_type=ActionType.LLM_SUMMARY,\n    description=\"Summarize findings\",\n    parameters={\n        'content': 'Analysis results...',\n        'summary_type': 'technical',\n        'focus': 'architecture'\n    }\n)\n</code></pre>"},{"location":"react-framework/#8-cache_lookup-cache_store","title":"8. CACHE_LOOKUP / CACHE_STORE","text":"<pre><code># Cache operations\nlookup_action = ReActAction(\n    action_type=ActionType.CACHE_LOOKUP,\n    description=\"Check cached analysis\",\n    parameters={'key': 'module_analysis_main.py'}\n)\n\nstore_action = ReActAction(\n    action_type=ActionType.CACHE_STORE,\n    description=\"Store analysis results\",\n    parameters={\n        'key': 'module_analysis_main.py',\n        'value': analysis_results\n    }\n)\n</code></pre>"},{"location":"react-framework/#tool-validation","title":"Tool Validation","text":"<p>The framework includes comprehensive tool validation:</p> <pre><code># Parameter validation\ndef _validate_action_parameters(self, action: ReActAction) -&gt; Optional[str]:\n    if action.action_type == ActionType.READ_FILE:\n        if 'file_path' not in action.parameters:\n            return \"file_path parameter required for READ_FILE\"\n    return None\n\n# Result validation\ndef _validate_tool_result(self, action: ReActAction, result: Any) -&gt; Dict[str, Any]:\n    if isinstance(result, dict) and 'error' in result:\n        return {'valid': False, 'error': f\"Tool returned error: {result['error']}\"}\n    return {'valid': True, 'error': None}\n</code></pre>"},{"location":"react-framework/#llm-integration","title":"LLM Integration","text":""},{"location":"react-framework/#supported-providers","title":"Supported Providers","text":"<p>The framework supports multiple LLM providers through LiteLLM:</p>"},{"location":"react-framework/#openai","title":"OpenAI","text":"<pre><code>export CF_LLM_MODEL=gpt-4\nexport CF_LLM_API_KEY=your-openai-api-key\n</code></pre> <p>Supported models: - <code>gpt-4</code> - <code>gpt-4-turbo</code> - <code>gpt-3.5-turbo</code> - <code>gpt-3.5-turbo-16k</code></p>"},{"location":"react-framework/#anthropic","title":"Anthropic","text":"<pre><code>export CF_LLM_MODEL=claude-3-sonnet-20240229\nexport CF_LLM_API_KEY=your-anthropic-api-key\n</code></pre> <p>Supported models: - <code>claude-3-opus-20240229</code> - <code>claude-3-sonnet-20240229</code> - <code>claude-3-haiku-20240307</code></p>"},{"location":"react-framework/#llama-via-together-ai","title":"LLaMA via Together AI","text":"<pre><code>export CF_LLM_MODEL=together_ai/meta-llama/Llama-2-7b-chat-hf\nexport CF_LLM_API_KEY=your-together-ai-api-key\n</code></pre> <p>Supported models: - <code>together_ai/meta-llama/Llama-2-7b-chat-hf</code> - <code>together_ai/meta-llama/Llama-2-13b-chat-hf</code> - <code>together_ai/meta-llama/Llama-2-70b-chat-hf</code> - <code>together_ai/meta-llama/Code-Llama-7b-Python-hf</code></p>"},{"location":"react-framework/#llama-via-replicate","title":"LLaMA via Replicate","text":"<pre><code>export CF_LLM_MODEL=replicate/meta/llama-2-7b-chat\nexport CF_LLM_API_KEY=your-replicate-token\n</code></pre>"},{"location":"react-framework/#llama-via-ollama-local","title":"LLaMA via Ollama (Local)","text":"<pre><code>export CF_LLM_MODEL=ollama/llama2\n# No API key needed for local Ollama\n</code></pre>"},{"location":"react-framework/#llm-usage-in-agents","title":"LLM Usage in Agents","text":"<pre><code># Reasoning with LLM\ndef reason(self) -&gt; str:\n    reasoning_result = self._tool_llm_reasoning({\n        'context': self._build_context(),\n        'question': self.state.goal,\n        'agent_type': self.agent_name.lower()\n    })\n    return reasoning_result.get('reasoning', 'Continue exploration')\n\n# Summarization with LLM\ndef _generate_summary(self) -&gt; str:\n    summary_result = self._tool_llm_summary({\n        'content': self._compile_findings(),\n        'summary_type': 'technical',\n        'focus': 'key_insights'\n    })\n    return summary_result.get('summary', 'Analysis completed')\n</code></pre>"},{"location":"react-framework/#fallback-mechanism","title":"Fallback Mechanism","text":"<p>If LLM calls fail, the framework gracefully falls back to simple implementations:</p> <pre><code>try:\n    from ..llm.real_llm import real_llm\n    result = real_llm.reasoning(context, question, agent_type)\n    return result\nexcept Exception as e:\n    self.logger.warning(f\"Real LLM failed, using fallback: {e}\")\n    from ..llm.simple_llm import llm\n    result = llm.reasoning(context, question, agent_type)\n    result['fallback'] = True\n    return result\n</code></pre>"},{"location":"react-framework/#caching-performance","title":"Caching &amp; Performance","text":""},{"location":"react-framework/#persistent-caching","title":"Persistent Caching","text":"<p>The framework includes sophisticated caching with persistence across sessions:</p> <pre><code>class ReActCache:\n    def __init__(self, max_size: int = 1000, cache_dir: Optional[str] = None, ttl: int = 3600):\n        # In-memory cache with optional disk persistence\n        # TTL-based expiration\n        # LRU eviction policy\n</code></pre> <p>Features: - Persistent Storage: JSON files for cross-session continuity - TTL Expiration: Automatic cleanup of stale entries - LRU Eviction: Memory-efficient cache management - Error Resilience: Graceful handling of corrupt cache files</p>"},{"location":"react-framework/#cache-configuration","title":"Cache Configuration","text":"<pre><code># Enable persistent caching\nCF_REACT_CACHE_ENABLED=true\nCF_REACT_CACHE_MAX_SIZE=1000\nCF_REACT_CACHE_TTL=3600\nCF_REACT_TRACE_DIR=./traces  # Cache stored in ./traces/cache/\n</code></pre>"},{"location":"react-framework/#performance-optimization","title":"Performance Optimization","text":"<pre><code># Performance profiles optimize different aspects\nconfig = ReActConfig()\n\n# Fast: Prioritizes speed\nconfig.apply_performance_profile(\"fast\")\n# - max_iterations: 10\n# - iteration_timeout: 15s\n# - cache_max_size: 500\n\n# Balanced: Optimal balance\nconfig.apply_performance_profile(\"balanced\")\n# - max_iterations: 20  \n# - iteration_timeout: 30s\n# - cache_max_size: 1000\n\n# Thorough: Maximizes completeness\nconfig.apply_performance_profile(\"thorough\")\n# - max_iterations: 50\n# - iteration_timeout: 60s\n# - cache_max_size: 2000\n</code></pre>"},{"location":"react-framework/#tracing-monitoring","title":"Tracing &amp; Monitoring","text":""},{"location":"react-framework/#comprehensive-tracing","title":"Comprehensive Tracing","text":"<p>The framework includes detailed execution tracing:</p> <pre><code>@dataclass\nclass ReActTrace:\n    trace_id: str\n    agent_name: str\n    iteration: int\n    phase: str  # 'reason', 'act', 'observe'\n    timestamp: float\n    duration: float\n    content: Dict[str, Any]\n    success: bool\n    error: Optional[str]\n</code></pre>"},{"location":"react-framework/#session-management","title":"Session Management","text":"<pre><code># Tracing lifecycle\ntracer = ReActTracer()\n\n# Start session\nsession_id = tracer.start_session(\"codebase_agent\", \"Analyze main module\")\n\n# Trace phases\ntracer.trace_phase(session_id, \"reason\", iteration=1, \n                  content={'reasoning': 'Should read main.py first'}, \n                  duration=0.5)\n\ntracer.trace_phase(session_id, \"act\", iteration=1,\n                  content={'action': 'READ_FILE', 'file': 'main.py'},\n                  duration=1.2, success=True)\n\n# End session\ncompleted_session = tracer.end_session(session_id, final_results)\n</code></pre>"},{"location":"react-framework/#performance-metrics","title":"Performance Metrics","text":"<pre><code># Get global metrics\nmetrics = tracer.get_global_metrics()\n\n# Example metrics:\n{\n    'total_sessions': 15,\n    'total_iterations': 180,\n    'total_errors': 2,\n    'avg_session_duration': 45.2,\n    'avg_reason_duration': 1.1,\n    'avg_act_duration': 2.3,\n    'avg_observe_duration': 0.8,\n    'agent_usage': {\n        'codebase_agent': 8,\n        'doc_agent': 4,\n        'arch_agent': 3\n    }\n}\n</code></pre>"},{"location":"react-framework/#trace-export","title":"Trace Export","text":"<pre><code># Export traces to file\ntracer.export_metrics('./metrics.json')\n\n# Get human-readable summary\nsummary = tracer.get_trace_summary(session_id)\nprint(summary)\n</code></pre>"},{"location":"react-framework/#error-handling","title":"Error Handling","text":""},{"location":"react-framework/#multi-level-error-handling","title":"Multi-Level Error Handling","text":"<p>The framework implements comprehensive error handling at multiple levels:</p>"},{"location":"react-framework/#1-circuit-breakers","title":"1. Circuit Breakers","text":"<pre><code># Prevent cascading failures\nif self.consecutive_errors &gt;= self.react_config.max_consecutive_errors:\n    self.logger.error(f\"Too many consecutive errors ({self.consecutive_errors})\")\n    break\n</code></pre>"},{"location":"react-framework/#2-retry-logic","title":"2. Retry Logic","text":"<pre><code># Retry failed operations\nfor attempt in range(self.react_config.max_tool_retries + 1):\n    try:\n        result = self._execute_tool_with_timeout(tool_func, action.parameters)\n        break\n    except Exception as e:\n        if attempt &lt; self.react_config.max_tool_retries:\n            recovery_action = self._attempt_tool_recovery(action, str(e))\n            continue\n</code></pre>"},{"location":"react-framework/#3-recovery-strategies","title":"3. Recovery Strategies","text":"<pre><code>def _attempt_tool_recovery(self, action: ReActAction, error: str) -&gt; Optional[str]:\n    error_lower = error.lower()\n\n    if 'file not found' in error_lower:\n        return 'file_not_found'  # Switch to directory scan\n    elif 'permission denied' in error_lower:\n        return 'permission_denied'  # Try different approach\n    elif 'timeout' in error_lower:\n        return 'timeout'  # Use cached results\n</code></pre>"},{"location":"react-framework/#4-graceful-degradation","title":"4. Graceful Degradation","text":"<pre><code># LLM fallback\ntry:\n    result = real_llm.reasoning(context, question)\nexcept Exception:\n    result = simple_llm.reasoning(context, question)\n    result['fallback'] = True\n</code></pre>"},{"location":"react-framework/#error-configuration","title":"Error Configuration","text":"<pre><code># Error handling configuration\nCF_REACT_MAX_ERRORS=10               # Maximum total errors\nCF_REACT_MAX_CONSECUTIVE_ERRORS=3    # Maximum consecutive errors\nCF_REACT_ERROR_RECOVERY=true         # Enable error recovery\nCF_REACT_CIRCUIT_BREAKER_THRESHOLD=5 # Circuit breaker threshold\n</code></pre>"},{"location":"react-framework/#advanced-usage","title":"Advanced Usage","text":""},{"location":"react-framework/#custom-agent-development","title":"Custom Agent Development","text":"<p>Create specialized agents by extending <code>ReActAgent</code>:</p> <pre><code>from cf.core.react_agent import ReActAgent, ReActAction, ActionType\n\nclass CustomAnalysisAgent(ReActAgent):\n    def __init__(self, repo: CodeRepo, config: CfConfig):\n        super().__init__(repo, config, \"custom_agent\")\n        self.domain_knowledge = {}\n\n    def reason(self) -&gt; str:\n        \"\"\"Custom reasoning logic\"\"\"\n        if not self.state.observations:\n            return \"Start by scanning the repository structure\"\n        elif len(self.state.observations) &lt; 5:\n            return \"Search for domain-specific patterns\"\n        else:\n            return \"Analyze findings and generate insights\"\n\n    def plan_action(self, reasoning: str) -&gt; ReActAction:\n        \"\"\"Custom action planning\"\"\"\n        if \"scan\" in reasoning.lower():\n            return ReActAction(\n                action_type=ActionType.SCAN_DIRECTORY,\n                description=\"Scan repository for structure\",\n                parameters={'directory': '.', 'max_depth': 2}\n            )\n        # ... additional action planning\n\n    def _generate_summary(self) -&gt; str:\n        \"\"\"Custom summary generation\"\"\"\n        return f\"Custom analysis completed with {len(self.state.observations)} observations\"\n</code></pre>"},{"location":"react-framework/#multi-agent-coordination","title":"Multi-Agent Coordination","text":"<p>Implement custom coordination logic:</p> <pre><code>class CustomSupervisor(ReActAgent):\n    def __init__(self, repo: CodeRepo, config: CfConfig):\n        super().__init__(repo, config, \"custom_supervisor\")\n        self.specialized_agents = {\n            'security': SecurityAnalysisAgent(repo, config),\n            'performance': PerformanceAnalysisAgent(repo, config),\n            'testing': TestAnalysisAgent(repo, config)\n        }\n\n    def coordinate_agents(self, focus: str) -&gt; Dict[str, Any]:\n        results = {}\n\n        for agent_name, agent in self.specialized_agents.items():\n            if focus == 'all' or focus == agent_name:\n                agent_result = agent.execute_react_loop(f\"Analyze {agent_name} aspects\")\n                results[agent_name] = agent_result\n\n        return self._synthesize_results(results)\n</code></pre>"},{"location":"react-framework/#custom-tools","title":"Custom Tools","text":"<p>Add new tools to the ecosystem:</p> <pre><code># Extend ActionType enum\nclass ExtendedActionType(ActionType):\n    DEPENDENCY_ANALYSIS = \"dependency_analysis\"\n    SECURITY_SCAN = \"security_scan\"\n    PERFORMANCE_PROFILE = \"performance_profile\"\n\n# Add tool implementations\ndef _tool_dependency_analysis(self, params: Dict[str, Any]) -&gt; Dict[str, Any]:\n    \"\"\"Custom dependency analysis tool\"\"\"\n    file_path = params.get('file_path', '')\n    # ... implementation\n    return {'dependencies': dependencies, 'analysis': analysis}\n\n# Register new tools\nself.tools[ExtendedActionType.DEPENDENCY_ANALYSIS] = self._tool_dependency_analysis\n</code></pre>"},{"location":"react-framework/#batch-processing","title":"Batch Processing","text":"<p>Process multiple repositories:</p> <pre><code>def batch_analyze_repositories(repo_paths: List[str], focus: str = \"all\") -&gt; Dict[str, Any]:\n    results = {}\n\n    for repo_path in repo_paths:\n        try:\n            repo = LocalCodeRepo(repo_path)\n            config = CfConfig()\n            supervisor = ReActSupervisorAgent(repo, config)\n\n            result = supervisor.explore_repository(focus=focus)\n            results[repo_path] = result\n\n        except Exception as e:\n            results[repo_path] = {'error': str(e)}\n\n    return results\n</code></pre>"},{"location":"react-framework/#api-reference","title":"API Reference","text":""},{"location":"react-framework/#core-classes","title":"Core Classes","text":""},{"location":"react-framework/#reactagent-abstract-base-class","title":"<code>ReActAgent</code> (Abstract Base Class)","text":"<pre><code>class ReActAgent(ABC):\n    def __init__(self, repo: CodeRepo, config: CfConfig, agent_name: str, \n                 react_config: Optional[ReActConfig] = None)\n\n    def execute_react_loop(self, goal: str, max_iterations: Optional[int] = None) -&gt; Dict[str, Any]\n\n    @abstractmethod\n    def reason(self) -&gt; str\n\n    @abstractmethod\n    def plan_action(self, reasoning: str) -&gt; ReActAction\n\n    def act(self, action: ReActAction) -&gt; ReActObservation\n\n    def observe(self, observation: ReActObservation)\n\n    @abstractmethod\n    def _generate_summary(self) -&gt; str\n</code></pre>"},{"location":"react-framework/#reactconfig","title":"<code>ReActConfig</code>","text":"<pre><code>@dataclass\nclass ReActConfig:\n    max_iterations: int = 20\n    iteration_timeout: float = 30.0\n    total_timeout: float = 600.0\n    max_errors: int = 10\n    max_consecutive_errors: int = 3\n    error_recovery_enabled: bool = True\n    cache_enabled: bool = True\n    cache_max_size: int = 1000\n    cache_ttl: int = 3600\n    tracing_enabled: bool = True\n\n    @classmethod\n    def from_env(cls) -&gt; 'ReActConfig'\n\n    def apply_performance_profile(self, profile: str)\n\n    def validate(self) -&gt; bool\n</code></pre>"},{"location":"react-framework/#reactaction","title":"<code>ReActAction</code>","text":"<pre><code>@dataclass\nclass ReActAction:\n    action_type: ActionType\n    description: str\n    parameters: Dict[str, Any] = field(default_factory=dict)\n    expected_outcome: str = \"\"\n    tool_name: str = \"\"\n</code></pre>"},{"location":"react-framework/#reactobservation","title":"<code>ReActObservation</code>","text":"<pre><code>@dataclass\nclass ReActObservation:\n    action_taken: str\n    result: Any\n    success: bool\n    insight: str\n    confidence: float = 0.0\n    suggests_next_action: Optional[str] = None\n    goal_progress: float = 0.0\n</code></pre>"},{"location":"react-framework/#reacttracer","title":"<code>ReActTracer</code>","text":"<pre><code>class ReActTracer:\n    def __init__(self, log_level: str = \"INFO\", trace_dir: Optional[str] = None)\n\n    def start_session(self, agent_name: str, goal: str) -&gt; str\n\n    def trace_phase(self, session_id: str, phase: str, iteration: int, \n                   content: Dict[str, Any], duration: float = 0.0, \n                   success: bool = True, error: Optional[str] = None) -&gt; str\n\n    def end_session(self, session_id: str, final_result: Dict[str, Any]) -&gt; ReActSession\n\n    def get_global_metrics(self) -&gt; Dict[str, Any]\n\n    def export_metrics(self, output_file: str)\n</code></pre>"},{"location":"react-framework/#specialized-agents","title":"Specialized Agents","text":""},{"location":"react-framework/#reactsupervisoragent","title":"<code>ReActSupervisorAgent</code>","text":"<pre><code>class ReActSupervisorAgent(ReActAgent):\n    def explore_repository(self, focus: str = \"all\", max_agents: int = 3) -&gt; Dict[str, Any]\n\n    def activate_agent(self, agent_type: str, sub_goal: str) -&gt; Dict[str, Any]\n\n    def synthesize_cross_agent_insights(self, agent_results: Dict[str, Any]) -&gt; List[Dict[str, Any]]\n</code></pre>"},{"location":"react-framework/#reactdocumentationagent","title":"<code>ReActDocumentationAgent</code>","text":"<pre><code>class ReActDocumentationAgent(ReActAgent):\n    def discover_documentation(self) -&gt; List[str]\n\n    def analyze_documentation_structure(self, doc_files: List[str]) -&gt; Dict[str, Any]\n\n    def extract_documentation_insights(self, content: str) -&gt; Dict[str, Any]\n</code></pre>"},{"location":"react-framework/#reactcodebaseagent","title":"<code>ReActCodebaseAgent</code>","text":"<pre><code>class ReActCodebaseAgent(ReActAgent):\n    def extract_code_entities(self, file_path: str) -&gt; List[CodeEntity]\n\n    def analyze_code_patterns(self, files: List[str]) -&gt; List[CodePattern]\n\n    def assess_code_complexity(self, file_path: str) -&gt; Dict[str, Any]\n</code></pre>"},{"location":"react-framework/#reactarchitectureagent","title":"<code>ReActArchitectureAgent</code>","text":"<pre><code>class ReActArchitectureAgent(ReActAgent):\n    def identify_components(self) -&gt; List[Dict[str, Any]]\n\n    def detect_architectural_patterns(self) -&gt; List[Dict[str, Any]]\n\n    def analyze_system_boundaries(self) -&gt; Dict[str, Any]\n</code></pre>"},{"location":"react-framework/#troubleshooting","title":"Troubleshooting","text":""},{"location":"react-framework/#common-issues","title":"Common Issues","text":""},{"location":"react-framework/#1-llm-connection-failures","title":"1. LLM Connection Failures","text":"<pre><code># Check API key configuration\necho $CF_LLM_API_KEY\n\n# Test with simple LLM fallback\nCF_LLM_MODEL=simple cf analyze /repo\n</code></pre>"},{"location":"react-framework/#2-cache-permission-issues","title":"2. Cache Permission Issues","text":"<pre><code># Check cache directory permissions\nls -la ./traces/cache/\n\n# Use custom cache directory\nCF_REACT_TRACE_DIR=/tmp/cf_traces cf analyze /repo\n</code></pre>"},{"location":"react-framework/#3-timeout-issues","title":"3. Timeout Issues","text":"<pre><code># Increase timeouts for large repositories\nCF_REACT_ITERATION_TIMEOUT=60.0 CF_REACT_TOTAL_TIMEOUT=1800.0 cf analyze /repo\n\n# Use fast profile\nCF_REACT_MAX_ITERATIONS=10 cf analyze /repo\n</code></pre>"},{"location":"react-framework/#4-memory-issues","title":"4. Memory Issues","text":"<pre><code># Reduce cache size\nCF_REACT_CACHE_MAX_SIZE=500 cf analyze /repo\n\n# Disable caching\nCF_REACT_CACHE_ENABLED=false cf analyze /repo\n</code></pre>"},{"location":"react-framework/#debug-mode","title":"Debug Mode","text":"<p>Enable verbose logging for debugging:</p> <pre><code># Enable debug logging\nCF_REACT_LOG_LEVEL=DEBUG CF_REACT_VERBOSE_LOGGING=true cf analyze /repo\n\n# Enable tracing\nCF_REACT_TRACING_ENABLED=true CF_REACT_TRACE_DIR=./debug_traces cf analyze /repo\n</code></pre>"},{"location":"react-framework/#performance-tuning","title":"Performance Tuning","text":"<pre><code># Quick analysis\nCF_REACT_MAX_ITERATIONS=5 CF_REACT_ITERATION_TIMEOUT=10.0 cf analyze /repo\n\n# Comprehensive analysis\nCF_REACT_MAX_ITERATIONS=100 CF_REACT_ITERATION_TIMEOUT=120.0 cf analyze /repo\n\n# Parallel tools (future feature)\nCF_REACT_PARALLEL_TOOLS=true CF_REACT_MAX_PARALLEL_TOOLS=3 cf analyze /repo\n</code></pre>"},{"location":"react-framework/#error-recovery","title":"Error Recovery","text":"<p>If agents get stuck or error out:</p> <pre><code># Enable aggressive error recovery\nCF_REACT_ERROR_RECOVERY=true CF_REACT_MAX_CONSECUTIVE_ERRORS=1 cf analyze /repo\n\n# Reduce circuit breaker threshold\nCF_REACT_CIRCUIT_BREAKER_THRESHOLD=3 cf analyze /repo\n</code></pre> <p>For additional support, please refer to the Architecture Documentation or open an issue on the project repository.</p>"},{"location":"api/","title":"API Reference","text":"<p>Welcome to the CodeFusion API documentation. This section provides comprehensive documentation for the current working multi-agent system with LLM function calling.</p>"},{"location":"api/#core-components","title":"Core Components","text":""},{"location":"api/#multi-agent-system","title":"Multi-Agent System","text":"<ul> <li>SupervisorAgent - Orchestrates agents and synthesizes responses</li> <li>CodeAgent - Code analysis using LLM function calling loops</li> <li>DocsAgent - Documentation analysis and processing  </li> <li>WebAgent - Web search integration</li> </ul>"},{"location":"api/#infrastructure","title":"Infrastructure","text":"<ul> <li>BaseAgent - Common agent functionality and LLM integration</li> <li>ToolRegistry - Function calling schema management</li> <li>LLM Integration - LiteLLM and multi-provider support</li> <li>Configuration - YAML configuration and environment variables</li> </ul>"},{"location":"api/#quick-api-examples","title":"Quick API Examples","text":""},{"location":"api/#current-multi-agent-analysis","title":"Current Multi-Agent Analysis","text":"<pre><code>from cf.agents.supervisor import SupervisorAgent\nfrom cf.config import CfConfig\n\n# Initialize components\nconfig = CfConfig.load_from_file(\"cf/configs/config.yaml\")\nsupervisor = SupervisorAgent(\"/path/to/repository\", config)\n\n# Analyze with multi-agent coordination\nresult = supervisor.analyze(\"How does FastAPI routing work?\")\n\n# Access results\nnarrative = result['narrative']\nconfidence = result['confidence']\nagents_used = result['agents_consulted']\ninsights = result['insights']\nexecution_time = result['execution_time']\n</code></pre>"},{"location":"api/#using-individual-agents","title":"Using Individual Agents","text":"<pre><code>from cf.agents.code import CodeAgent\nfrom cf.agents.docs import DocsAgent\nfrom cf.agents.web import WebAgent\n\n# Initialize agents\ncode_agent = CodeAgent(\"/path/to/repo\", config)\ndocs_agent = DocsAgent(\"/path/to/repo\", config)\nweb_agent = WebAgent(\"/path/to/repo\", config)\n\n# Run individual analysis\ncode_result = code_agent.analyze(\"Find FastAPI routing implementation\")\ndocs_result = docs_agent.analyze(\"Look for routing documentation\")\nweb_result = web_agent.analyze(\"Search for FastAPI routing best practices\")\n</code></pre>"},{"location":"api/#tool-registry-usage","title":"Tool Registry Usage","text":"<pre><code>from cf.tools.registry import ToolRegistry\n\n# Initialize tool registry\ntools = ToolRegistry(\"/path/to/repo\")\n\n# Get available tool schemas for LLM function calling\nschemas = tools.get_all_schemas()\n\n# Execute specific tool\nresult = tools.use_tool(\"search_files\", pattern=\"FastAPI\", file_types=[\"*.py\"])\n</code></pre>"},{"location":"api/#traditional-multi-agent-analysis","title":"Traditional Multi-Agent Analysis","text":"<pre><code># Run multi-agent analysis\nresults = supervisor.explore_repository(\n    goal=\"analyze authentication system\",\n    focus=\"all\"\n)\n\n# Access results\nagent_results = supervisor.get_agent_results()\ninsights = supervisor.get_cross_agent_insights()\n</code></pre>"},{"location":"api/#custom-agent-development","title":"Custom Agent Development","text":"<pre><code>from cf.core.react_agent import ReActAgent, ReActAction, ActionType\n\nclass CustomAnalysisAgent(ReActAgent):\n    def reason(self) -&gt; str:\n        # Implement reasoning logic\n        if not self.state.observations:\n            return \"Need to start analysis by scanning codebase\"\n        return \"Continue with detailed examination\"\n\n    def plan_action(self, reasoning: str) -&gt; ReActAction:\n        # Plan next action based on reasoning\n        return ReActAction(\n            action_type=ActionType.SCAN_DIRECTORY,\n            description=\"Scan for analysis targets\",\n            parameters={'directory': '.', 'pattern': '*.py'}\n        )\n\n    def _generate_summary(self) -&gt; str:\n        return f\"Custom analysis complete: {len(self.state.observations)} findings\"\n</code></pre>"},{"location":"api/#llm-integration-with-life-of-x","title":"LLM Integration with Life of X","text":"<pre><code>from cf.llm.real_llm import RealLLM, LLMConfig\nfrom cf.llm.prompt_templates import PromptBuilder\nfrom cf.llm.response_parser import ResponseParser\n\n# Configure LLM provider\nconfig = LLMConfig(\n    model=\"gpt-4\",\n    api_key=\"your-api-key\",\n    max_tokens=1000,\n    temperature=0.7\n)\n\nllm = RealLLM(config)\n\n# Generate Life of X narrative\nnarrative_result = llm.generate_life_of_x_narrative(\n    question=\"How does authentication work?\",\n    insights={'agents': 'results'},\n    components=[{'name': 'AuthController', 'type': 'api'}],\n    flows=[{'source': 'Client', 'target': 'AuthService'}]\n)\n\n# Use for reasoning\nreasoning_result = llm.reasoning(\n    context=\"Current codebase state\",\n    question=\"What should I analyze next?\",\n    agent_type=\"codebase\"\n)\n</code></pre>"},{"location":"api/#life-of-x-utilities","title":"Life of X Utilities","text":"<pre><code>from cf.tools.narrative_utils import extract_key_entity, display_life_of_x_narrative\nfrom cf.llm.prompt_templates import PromptBuilder\nfrom cf.llm.response_parser import ResponseParser, LIFE_OF_X_SCHEMA\n\n# Extract entity from question\nentity = extract_key_entity(\"How does authentication work?\")\n# Returns: \"Authentication\"\n\n# Build prompts using templates\nbuilder = PromptBuilder()\nprompt = builder.build_life_of_x_prompt(\n    question=\"How does authentication work?\",\n    insights=\"System insights...\",\n    components=\"Key components...\",\n    flows=\"Data flows...\",\n    code_examples=\"Code examples...\",\n    key_entity=\"Authentication\",\n    model_name=\"gpt-4\"\n)\n\n# Parse responses with schema validation\nparser = ResponseParser()\nparsed = parser.parse_response(llm_response, LIFE_OF_X_SCHEMA)\n\n# Display narrative with beautiful formatting\ndisplay_life_of_x_narrative(parsed, \"How does authentication work?\")\n</code></pre>"},{"location":"api/#navigation","title":"Navigation","text":"<p>Use the sidebar to navigate through the API documentation. Each section provides:</p> <ul> <li>Class Overview: Purpose and role in the framework</li> <li>Constructor Parameters: How to initialize the class</li> <li>Methods: All public methods with parameters and return types</li> <li>Examples: Practical usage examples</li> <li>Integration: How the class integrates with other components</li> </ul>"},{"location":"api/#type-definitions","title":"Type Definitions","text":"<p>All APIs use type hints for better development experience:</p> <pre><code>from typing import Dict, List, Any, Optional\nfrom cf.core.react_agent import ReActAction, ReActObservation, ActionType\n</code></pre>"},{"location":"api/#error-handling","title":"Error Handling","text":"<p>The framework includes comprehensive error handling:</p> <pre><code>try:\n    results = supervisor.explore_repository(goal=\"analysis\")\nexcept Exception as e:\n    print(f\"Analysis failed: {e}\")\n    # Framework includes automatic recovery mechanisms\n</code></pre>"},{"location":"api/#agent-api-documentation","title":"Agent API Documentation","text":""},{"location":"api/#codeagent","title":"CodeAgent","text":"<p>The CodeAgent specializes in analyzing source code using LLM function calling loops.</p> <pre><code>from cf.agents.code import CodeAgent\nfrom cf.configs.config_mgr import CfConfig\n\n# Initialize agent\nconfig = CfConfig.load_from_file(\"cf/configs/config.yaml\")\ncode_agent = CodeAgent(\"/path/to/repo\", config)\n\n# Analyze code with LLM function calling\nresult = code_agent.analyze(\"Find FastAPI routing implementation\")\nprint(result['insights'])\n</code></pre> <p>Key Methods: - <code>analyze(goal: str)</code> - Main analysis method with LLM function calling - <code>plan_action(reasoning: str)</code> - LLM-driven action planning - <code>execute_action(action)</code> - Tool execution with registry</p>"},{"location":"api/#docsagent","title":"DocsAgent","text":"<p>The DocsAgent processes documentation and README files.</p> <pre><code>from cf.agents.docs import DocsAgent\n\n# Initialize and analyze documentation\ndocs_agent = DocsAgent(\"/path/to/repo\", config)\nresult = docs_agent.analyze(\"Look for routing documentation\")\nprint(result['documentation_insights'])\n</code></pre> <p>Key Methods: - <code>analyze(goal: str)</code> - Documentation analysis - <code>extract_documentation_patterns()</code> - Find doc patterns - <code>analyze_readme_quality()</code> - README assessment</p>"},{"location":"api/#webagent","title":"WebAgent","text":"<p>The WebAgent integrates external knowledge via web search.</p> <pre><code>from cf.agents.web import WebAgent\n\n# Initialize and search web\nweb_agent = WebAgent(\"/path/to/repo\", config)\nresult = web_agent.analyze(\"Search for FastAPI routing best practices\")\nprint(result['web_insights'])\n</code></pre> <p>Key Methods: - <code>analyze(goal: str)</code> - Web search analysis - <code>generate_search_queries()</code> - LLM-driven query generation - <code>process_web_results()</code> - Result integration</p>"},{"location":"api/#baseagent","title":"BaseAgent","text":"<p>Common functionality shared by all agents.</p> <pre><code>from cf.agents.base import BaseAgent\n\n# BaseAgent provides common methods:\n# - LLM integration patterns\n# - Logging and tracing\n# - Tool registry access\n# - Configuration management\n</code></pre> <p>Key Methods: - <code>call_llm(prompt: str)</code> - LLM interaction - <code>get_tool_registry()</code> - Access to tools - <code>log_action(action: str)</code> - Progress logging</p>"},{"location":"api/#toolregistry","title":"ToolRegistry","text":"<p>Centralized tool management for LLM function calling.</p> <pre><code>from cf.tools.registry import ToolRegistry\n\n# Initialize tool registry\ntools = ToolRegistry(\"/path/to/repo\")\n\n# Get available tool schemas for LLM function calling\nschemas = tools.get_all_schemas()\n\n# Execute specific tool\nresult = tools.execute_tool(\"search_files\", {\"pattern\": \"FastAPI\", \"file_types\": [\"*.py\"]})\n</code></pre> <p>Available Tools: - <code>scan_directory</code> - Repository structure exploration - <code>read_file</code> - File content analysis - <code>search_files</code> - Pattern-based file search - <code>analyze_code</code> - Code complexity analysis - <code>web_search</code> - External knowledge search</p> <p>For detailed information about specific components, explore the individual API documentation pages.</p>"},{"location":"api/architecture-agent/","title":"Architecture Agent","text":"<p>Note: This agent has been integrated into the CodeAgent in the clean architecture.</p> <p>The CodeAgent in <code>cf/agents/code.py</code> now handles architectural analysis as part of its code analysis capabilities.</p>"},{"location":"api/architecture-agent/#current-implementation","title":"Current Implementation","text":"<p>In the clean architecture, architectural analysis is handled by the CodeAgent (<code>cf/agents/code.py</code>) which uses LLM function calling to:</p> <ul> <li>Identify system components through intelligent tool selection</li> <li>Detect architectural patterns via LLM analysis</li> <li>Map data flows using code exploration</li> <li>Analyze layers through repository structure examination</li> <li>Recognize design patterns via code analysis tools</li> </ul>"},{"location":"api/architecture-agent/#usage-examples","title":"Usage Examples","text":""},{"location":"api/architecture-agent/#architectural-analysis-with-codeagent","title":"Architectural Analysis with CodeAgent","text":"<pre><code>from cf.agents.code import CodeAgent\nfrom cf.configs.config_mgr import CfConfig\n\n# Initialize CodeAgent for architectural analysis\nconfig = CfConfig.load_from_file(\"cf/configs/config.yaml\")\ncode_agent = CodeAgent(\"/path/to/repository\", config)\n\n# Analyze system architecture\nresults = code_agent.analyze(\"analyze system architecture and design patterns\")\n\nprint(f\"Analysis results: {results['insights']}\")\nprint(f\"Components found: {results.get('components_analyzed', 0)}\")\n</code></pre>"},{"location":"api/architecture-agent/#system-component-analysis","title":"System Component Analysis","text":"<pre><code># Use CodeAgent to identify components\ncomponent_analysis = code_agent.analyze(\"identify main system components and their responsibilities\")\n\n# The CodeAgent uses LLM function calling to:\n# 1. scan_directory - Explore repository structure\n# 2. search_files - Find component definitions\n# 3. analyze_code - Examine component patterns\n# 4. llm_reasoning - Synthesize architectural insights\n</code></pre>"},{"location":"api/architecture-agent/#pattern-detection-via-llm-function-calling","title":"Pattern Detection via LLM Function Calling","text":"<pre><code># Analyze architectural patterns\npattern_analysis = code_agent.analyze(\"identify architectural patterns and design principles used\")\n\n# CodeAgent will intelligently select tools like:\n# - search_files to find pattern implementations\n# - analyze_code to examine pattern usage\n# - llm_reasoning to identify pattern types\n</code></pre> <p>For complete API documentation, see the CodeAgent documentation.</p>"},{"location":"api/codebase-agent/","title":"Codebase Agent","text":"<p>Note: This functionality has been integrated into the CodeAgent in the clean architecture.</p> <p>The CodeAgent in <code>cf/agents/code.py</code> now handles comprehensive codebase analysis using LLM function calling.</p>"},{"location":"api/codebase-agent/#current-implementation","title":"Current Implementation","text":"<p>See CodeAgent API Documentation for the current implementation.</p>"},{"location":"api/codebase-agent/#migration-guide","title":"Migration Guide","text":"<p>The previous <code>ReActCodebaseAgent</code> functionality is now available through:</p> <pre><code>from cf.agents.code import CodeAgent\nfrom cf.configs.config_mgr import CfConfig\n\n# Initialize CodeAgent (replaces ReActCodebaseAgent)\nconfig = CfConfig.load_from_file(\"cf/configs/config.yaml\")\ncode_agent = CodeAgent(\"/path/to/repository\", config)\n\n# Comprehensive codebase analysis\nresult = code_agent.analyze(\"analyze entire codebase structure and patterns\")\n</code></pre> <p>The CodeAgent provides the same capabilities with improved LLM function calling: - Source code analysis - Pattern detection - Code quality assessment - Dependency mapping - Architecture exploration</p> <p>For complete documentation, see the main API index.</p>"},{"location":"api/config/","title":"Configuration","text":"<p>The CodeFusion framework provides comprehensive configuration options for performance tuning, LLM integration, and behavioral customization through the clean <code>cf/configs/</code> module.</p>"},{"location":"api/config/#configuration-management","title":"Configuration Management","text":""},{"location":"api/config/#cfconfig-class","title":"CfConfig Class","text":"<p>The configuration is managed by the <code>CfConfig</code> class in <code>cf/configs/config_mgr.py</code>:</p> <pre><code>from cf.configs.config_mgr import CfConfig\n\n# Load configuration from YAML file\nconfig = CfConfig.load_from_file(\"cf/configs/config.yaml\")\n\n# Access configuration values\nllm_model = config.llm.model\napi_key = config.llm.api_key\nmax_tokens = config.llm.max_tokens\n</code></pre>"},{"location":"api/config/#configuration-file-structure","title":"Configuration File Structure","text":"<p>The main configuration file is <code>cf/configs/config.yaml</code>:</p> <pre><code># LLM Configuration\nllm:\n  model: \"gpt-4o\"\n  api_key: \"your-openai-api-key\"  # Or use OPENAI_API_KEY env var\n  max_tokens: 1000\n  temperature: 0.7\n  provider: \"openai\"\n\n# Agent Configuration\nagents:\n  supervisor:\n    enabled: true\n    max_agents: 4\n    timeout: 300\n\n  code:\n    enabled: true\n    max_iterations: 20\n    languages: [\"python\", \"javascript\", \"typescript\", \"java\"]\n\n  documentation:\n    enabled: true\n    file_types: [\".md\", \".rst\", \".txt\"]\n\n  web:\n    enabled: true\n    max_results: 10\n\n# Tool Configuration\ntools:\n  registry:\n    enabled: true\n    max_tools: 50\n\n  caching:\n    enabled: true\n    ttl: 3600\n    max_size: 1000\n\n# Logging Configuration\nlogging:\n  level: \"INFO\"\n  verbose: true\n  file_output: false\n</code></pre>"},{"location":"api/config/#environment-variables","title":"Environment Variables","text":"<p>Configuration can be overridden with environment variables:</p> <pre><code># LLM Configuration\nexport OPENAI_API_KEY=\"your-openai-api-key\"\nexport CF_LLM_MODEL=\"gpt-4o\"\nexport CF_LLM_MAX_TOKENS=1000\nexport CF_LLM_TEMPERATURE=0.7\n\n# Agent Configuration\nexport CF_AGENT_MAX_ITERATIONS=20\nexport CF_AGENT_TIMEOUT=300\n\n# Logging Configuration\nexport CF_LOG_LEVEL=\"DEBUG\"\nexport CF_VERBOSE_LOGGING=true\n</code></pre>"},{"location":"api/config/#configuration-examples","title":"Configuration Examples","text":""},{"location":"api/config/#basic-setup","title":"Basic Setup","text":"<pre><code>from cf.configs.config_mgr import CfConfig\n\n# Load default configuration\nconfig = CfConfig.load_from_file(\"cf/configs/config.yaml\")\n\n# Use with agents\nfrom cf.agents.supervisor import SupervisorAgent\nsupervisor = SupervisorAgent(\"/path/to/repo\", config)\n</code></pre>"},{"location":"api/config/#custom-configuration","title":"Custom Configuration","text":"<pre><code># Create custom config\nconfig = CfConfig()\nconfig.llm.model = \"gpt-4\"\nconfig.llm.max_tokens = 2000\nconfig.llm.temperature = 0.5\n\n# Override with environment variables\nconfig.load_environment_overrides()\n</code></pre>"},{"location":"api/config/#configuration-validation","title":"Configuration Validation","text":"<pre><code># Validate configuration\ntry:\n    config = CfConfig.load_from_file(\"cf/configs/config.yaml\")\n    config.validate()\n    print(\"Configuration is valid\")\nexcept Exception as e:\n    print(f\"Configuration error: {e}\")\n</code></pre>"},{"location":"api/config/#llm-provider-configuration","title":"LLM Provider Configuration","text":""},{"location":"api/config/#openai-configuration","title":"OpenAI Configuration","text":"<pre><code>llm:\n  provider: \"openai\"\n  model: \"gpt-4o\"\n  api_key: \"sk-...\"\n  max_tokens: 1000\n  temperature: 0.7\n</code></pre>"},{"location":"api/config/#anthropic-configuration","title":"Anthropic Configuration","text":"<pre><code>llm:\n  provider: \"anthropic\" \n  model: \"claude-3-sonnet-20240229\"\n  api_key: \"sk-ant-...\"\n  max_tokens: 1000\n  temperature: 0.7\n</code></pre>"},{"location":"api/config/#local-llm-configuration","title":"Local LLM Configuration","text":"<pre><code>llm:\n  provider: \"ollama\"\n  model: \"llama2\"\n  base_url: \"http://localhost:11434\"\n  max_tokens: 1000\n  temperature: 0.7\n</code></pre>"},{"location":"api/config/#performance-configuration","title":"Performance Configuration","text":""},{"location":"api/config/#caching-settings","title":"Caching Settings","text":"<pre><code>tools:\n  caching:\n    enabled: true\n    ttl: 3600  # 1 hour\n    max_size: 1000  # Maximum cached items\n    storage_path: \"./cf_cache\"\n</code></pre>"},{"location":"api/config/#agent-performance","title":"Agent Performance","text":"<pre><code>agents:\n  code:\n    max_iterations: 20  # Maximum ReAct iterations\n    timeout: 300  # 5 minutes\n    parallel_tools: true\n\n  supervisor:\n    max_agents: 4  # Maximum concurrent agents\n    synthesis_timeout: 60  # LLM synthesis timeout\n</code></pre>"},{"location":"api/config/#tool-registry-settings","title":"Tool Registry Settings","text":"<pre><code>tools:\n  registry:\n    enabled: true\n    max_tools: 50\n    schema_validation: true\n    error_recovery: true\n</code></pre>"},{"location":"api/config/#migration-from-legacy-configuration","title":"Migration from Legacy Configuration","text":"<p>If migrating from the old configuration system:</p> <pre><code># Old way (no longer available)\n# from cf.config import CfConfig\n\n# New way (clean architecture)\nfrom cf.configs.config_mgr import CfConfig\n\n# Load configuration\nconfig = CfConfig.load_from_file(\"cf/configs/config.yaml\")\n</code></pre>"},{"location":"api/config/#configuration-best-practices","title":"Configuration Best Practices","text":"<ol> <li>Use Environment Variables for Secrets: Never commit API keys to configuration files</li> <li>Validate Configuration: Always validate config before using</li> <li>Use Appropriate Timeouts: Set reasonable timeouts for your use case</li> <li>Enable Caching: Use caching for better performance</li> <li>Monitor Usage: Track LLM token usage and costs</li> </ol>"},{"location":"api/config/#troubleshooting","title":"Troubleshooting","text":""},{"location":"api/config/#common-configuration-issues","title":"Common Configuration Issues","text":"<p>API Key Issues: <pre><code># Check if API key is set\necho $OPENAI_API_KEY\n\n# Validate API key\npython -c \"from cf.configs.config_mgr import CfConfig; config = CfConfig.load_from_file('cf/configs/config.yaml'); print('Config loaded successfully')\"\n</code></pre></p> <p>Configuration File Not Found: <pre><code>import os\nconfig_path = \"cf/configs/config.yaml\"\nif os.path.exists(config_path):\n    print(f\"Config file found: {config_path}\")\nelse:\n    print(f\"Config file not found: {config_path}\")\n</code></pre></p> <p>LLM Provider Issues: <pre><code># Test LLM connectivity\nfrom cf.llm.client import get_llm_client\nclient = get_llm_client()\nif client:\n    print(\"LLM client initialized successfully\")\nelse:\n    print(\"LLM client initialization failed\")\n</code></pre></p> <p>For complete documentation, see the main API index.</p>"},{"location":"api/documentation-agent/","title":"Documentation Agent","text":"<p>Note: This functionality is now implemented in the DocsAgent in the clean architecture.</p> <p>The DocsAgent in <code>cf/agents/docs.py</code> handles documentation analysis using LLM function calling.</p>"},{"location":"api/documentation-agent/#current-implementation","title":"Current Implementation","text":"<p>See DocsAgent API Documentation for the current implementation.</p>"},{"location":"api/documentation-agent/#migration-guide","title":"Migration Guide","text":"<p>The previous <code>ReActDocumentationAgent</code> functionality is now available through:</p> <pre><code>from cf.agents.docs import DocsAgent\nfrom cf.configs.config_mgr import CfConfig\n\n# Initialize DocsAgent (replaces ReActDocumentationAgent)\nconfig = CfConfig.load_from_file(\"cf/configs/config.yaml\")\ndocs_agent = DocsAgent(\"/path/to/repository\", config)\n\n# Documentation analysis\nresult = docs_agent.analyze(\"analyze project documentation and README files\")\n</code></pre> <p>The DocsAgent provides enhanced capabilities with LLM function calling: - README analysis and quality assessment - Documentation completeness evaluation - API documentation parsing - Usage example extraction - Documentation pattern recognition</p> <p>For complete documentation, see the main API index.</p>"},{"location":"api/interactive-session/","title":"Interactive Sessions","text":"<p>Note: Interactive session functionality is now integrated into the SupervisorAgent and CLI in the clean architecture.</p> <p>Interactive sessions are now handled through the clean command-line interface and persistent caching.</p>"},{"location":"api/interactive-session/#current-implementation","title":"Current Implementation","text":"<p>Interactive capabilities are provided through:</p>"},{"location":"api/interactive-session/#cli-interface-cfrunmainpy","title":"CLI Interface (<code>cf/run/main.py</code>)","text":"<pre><code># Interactive analysis with persistent memory\npython -m cf.run.main --verbose ask /path/to/repo \"How does routing work?\"\n\n# Follow-up questions benefit from cached analysis\npython -m cf.run.main --verbose ask /path/to/repo \"What about error handling?\"\n</code></pre>"},{"location":"api/interactive-session/#supervisoragent-coordination","title":"SupervisorAgent Coordination","text":"<pre><code>from cf.agents.supervisor import SupervisorAgent\nfrom cf.configs.config_mgr import CfConfig\n\n# Create supervisor for interactive-like sessions\nconfig = CfConfig.load_from_file(\"cf/configs/config.yaml\")\nsupervisor = SupervisorAgent(\"/path/to/repo\", config)\n\n# Each analysis builds on previous context through caching\nresult1 = supervisor.analyze(\"How does authentication work?\")\nresult2 = supervisor.analyze(\"What about authorization?\")  # Benefits from cached insights\n</code></pre>"},{"location":"api/interactive-session/#persistent-memory-cfcachesemanticpy","title":"Persistent Memory (<code>cf/cache/semantic.py</code>)","text":"<p>The framework provides persistent memory through semantic caching:</p> <pre><code>from cf.cache.semantic import SemanticCache\n\n# Cache automatically stores and retrieves analysis results\ncache = SemanticCache()\n\n# Similar questions use cached insights for faster, more comprehensive responses\n</code></pre>"},{"location":"api/interactive-session/#interactive-features","title":"Interactive Features","text":""},{"location":"api/interactive-session/#multi-turn-conversations","title":"Multi-Turn Conversations","text":"<p>While there's no explicit session manager, the caching system provides continuity:</p> <pre><code># First question - full analysis\npython -m cf.run.main --verbose ask /repo \"Explain the architecture\"\n\n# Follow-up questions leverage cached knowledge\npython -m cf.run.main --verbose ask /repo \"How does the routing layer work?\"\npython -m cf.run.main --verbose ask /repo \"What about the database layer?\"\n</code></pre>"},{"location":"api/interactive-session/#context-building","title":"Context Building","text":"<p>Each analysis contributes to the knowledge base:</p> <ol> <li>Repository Structure: Cached after first exploration</li> <li>Code Patterns: Identified patterns are remembered</li> <li>Documentation Insights: README and docs analysis is cached</li> <li>Web Knowledge: External research is cached for reuse</li> </ol>"},{"location":"api/interactive-session/#multi-agent-coordination","title":"Multi-Agent Coordination","text":"<p>The SupervisorAgent provides interactive-like coordination:</p> <pre><code># Supervisor intelligently selects agents per question\nsupervisor = SupervisorAgent(\"/path/to/repo\", config)\n\n# Code-focused question - primarily uses CodeAgent\ncode_result = supervisor.analyze(\"Find the main application entry point\")\n\n# Documentation question - primarily uses DocsAgent  \ndocs_result = supervisor.analyze(\"What does the README say about installation?\")\n\n# Best practices question - uses WebAgent\nweb_result = supervisor.analyze(\"What are FastAPI performance best practices?\")\n</code></pre>"},{"location":"api/interactive-session/#session-like-workflow","title":"Session-Like Workflow","text":""},{"location":"api/interactive-session/#programmatic-session-pattern","title":"Programmatic Session Pattern","text":"<pre><code>from cf.agents.supervisor import SupervisorAgent\nfrom cf.configs.config_mgr import CfConfig\n\nclass InteractiveAnalysis:\n    def __init__(self, repo_path: str):\n        self.config = CfConfig.load_from_file(\"cf/configs/config.yaml\")\n        self.supervisor = SupervisorAgent(repo_path, self.config)\n        self.session_history = []\n\n    def ask(self, question: str):\n        \"\"\"Ask a question with session context.\"\"\"\n        result = self.supervisor.analyze(question)\n\n        # Store in session history\n        self.session_history.append({\n            \"question\": question,\n            \"result\": result,\n            \"timestamp\": time.time()\n        })\n\n        return result\n\n    def get_session_summary(self):\n        \"\"\"Get summary of session questions and insights.\"\"\"\n        return {\n            \"questions_asked\": len(self.session_history),\n            \"total_insights\": sum(len(r[\"result\"].get(\"insights\", [])) for r in self.session_history),\n            \"agents_used\": set(r[\"result\"].get(\"agents_consulted\", []) for r in self.session_history)\n        }\n\n# Usage\nsession = InteractiveAnalysis(\"/path/to/repo\")\nresult1 = session.ask(\"How does the application start?\")\nresult2 = session.ask(\"What are the main API endpoints?\") \nresult3 = session.ask(\"How is authentication handled?\")\n\nsummary = session.get_session_summary()\n</code></pre>"},{"location":"api/interactive-session/#cli-session-pattern","title":"CLI Session Pattern","text":"<pre><code>#!/bin/bash\n# session.sh - Interactive analysis script\n\nREPO_PATH=\"/path/to/repo\"\n\necho \"\ud83d\ude80 Starting CodeFusion Interactive Session\"\necho \"Repository: $REPO_PATH\"\necho\n\n# Initial architecture overview\necho \"\ud83d\udccb Getting architecture overview...\"\npython -m cf.run.main --verbose ask \"$REPO_PATH\" \"Provide an overview of the system architecture\"\n\necho\necho \"\ud83d\udd0d Analyzing core components...\"\npython -m cf.run.main --verbose ask \"$REPO_PATH\" \"What are the main components and their responsibilities?\"\n\necho  \necho \"\ud83c\udf10 Checking API structure...\"\npython -m cf.run.main --verbose ask \"$REPO_PATH\" \"How are the API endpoints organized?\"\n\necho\necho \"\u2705 Session complete - all analysis cached for future use\"\n</code></pre>"},{"location":"api/interactive-session/#migration-guide","title":"Migration Guide","text":"<p>If migrating from an explicit InteractiveSessionManager:</p> <pre><code># Old way (no longer available)  \n# from cf.core.interactive_session import InteractiveSessionManager\n# session_manager = InteractiveSessionManager(repo, config)\n\n# New way (clean architecture)\nfrom cf.agents.supervisor import SupervisorAgent\nsupervisor = SupervisorAgent(\"/path/to/repo\", config)\n\n# Interactive-like usage through repeated calls\n# (benefits from automatic caching)\nresult = supervisor.analyze(\"Your question here\")\n</code></pre>"},{"location":"api/interactive-session/#advantages-of-current-approach","title":"Advantages of Current Approach","text":"<ol> <li>Simpler Architecture: No complex session state management</li> <li>Automatic Caching: Persistent memory without explicit session handling</li> <li>Stateless Operations: Each call is independent but benefits from cache</li> <li>CLI Integration: Works seamlessly with command-line workflows</li> <li>Multi-Agent Coordination: Intelligent agent selection per question</li> </ol> <p>For complete documentation, see the main API index.</p>"},{"location":"api/llm/","title":"LLM Integration","text":"<p>The CodeFusion framework provides comprehensive Language Model integration for AI-powered reasoning and analysis through the clean <code>cf/llm/</code> module.</p>"},{"location":"api/llm/#llm-client","title":"LLM Client","text":"<p>The LLM integration is handled by the unified client in <code>cf/llm/client.py</code>:</p> <pre><code>from cf.llm.client import get_llm_client\n\n# Get configured LLM client\nllm_client = get_llm_client()\n\n# Use for analysis\nresponse = llm_client.generate(\"Analyze this code pattern\")\n</code></pre>"},{"location":"api/llm/#llm-provider-support","title":"LLM Provider Support","text":"<p>The framework supports multiple LLM providers through LiteLLM:</p>"},{"location":"api/llm/#openai-integration","title":"OpenAI Integration","text":"<pre><code>from cf.configs.config_mgr import CfConfig\n\n# Configure for OpenAI\nconfig = CfConfig()\nconfig.llm.provider = \"openai\"\nconfig.llm.model = \"gpt-4o\"\nconfig.llm.api_key = \"your-openai-api-key\"\n</code></pre>"},{"location":"api/llm/#anthropic-integration","title":"Anthropic Integration","text":"<pre><code># Configure for Anthropic\nconfig.llm.provider = \"anthropic\"\nconfig.llm.model = \"claude-3-sonnet-20240229\"\nconfig.llm.api_key = \"your-anthropic-api-key\"\n</code></pre>"},{"location":"api/llm/#local-llm-integration","title":"Local LLM Integration","text":"<pre><code># Configure for local LLM\nconfig.llm.provider = \"ollama\"\nconfig.llm.model = \"llama2\"\nconfig.llm.base_url = \"http://localhost:11434\"\n</code></pre>"},{"location":"api/llm/#llm-function-calling","title":"LLM Function Calling","text":"<p>The framework supports LLM function calling for intelligent tool selection:</p> <pre><code>from cf.tools.registry import ToolRegistry\n\n# Get tool schemas for LLM function calling\nregistry = ToolRegistry(\"/path/to/repo\")\nschemas = registry.get_all_schemas()\n\n# LLM can select tools based on context\ntools_available = [\n    \"scan_directory\",\n    \"read_file\", \n    \"search_files\",\n    \"analyze_code\",\n    \"web_search\"\n]\n</code></pre>"},{"location":"api/llm/#llm-configuration","title":"LLM Configuration","text":""},{"location":"api/llm/#basic-configuration","title":"Basic Configuration","text":"<pre><code># cf/configs/config.yaml\nllm:\n  provider: \"openai\"\n  model: \"gpt-4o\"\n  api_key: \"your-api-key\"\n  max_tokens: 1000\n  temperature: 0.7\n  timeout: 30\n</code></pre>"},{"location":"api/llm/#advanced-configuration","title":"Advanced Configuration","text":"<pre><code>llm:\n  provider: \"openai\"\n  model: \"gpt-4o\"\n  api_key: \"your-api-key\"\n  max_tokens: 2000\n  temperature: 0.5\n  top_p: 0.9\n  frequency_penalty: 0.0\n  presence_penalty: 0.0\n  timeout: 60\n  retry_attempts: 3\n  retry_delay: 1.0\n</code></pre>"},{"location":"api/llm/#usage-examples","title":"Usage Examples","text":""},{"location":"api/llm/#basic-llm-usage","title":"Basic LLM Usage","text":"<pre><code>from cf.llm.client import get_llm_client\n\n# Initialize LLM client\nllm_client = get_llm_client()\n\n# Generate response\nresponse = llm_client.generate(\n    prompt=\"Explain the architecture of this system\",\n    max_tokens=1000\n)\n\nprint(response)\n</code></pre>"},{"location":"api/llm/#llm-with-function-calling","title":"LLM with Function Calling","text":"<pre><code>from cf.agents.code import CodeAgent\nfrom cf.configs.config_mgr import CfConfig\n\n# CodeAgent uses LLM function calling internally\nconfig = CfConfig.load_from_file(\"cf/configs/config.yaml\")\ncode_agent = CodeAgent(\"/path/to/repo\", config)\n\n# LLM will intelligently select tools\nresult = code_agent.analyze(\"Find main application entry points\")\n</code></pre>"},{"location":"api/llm/#multi-agent-llm-coordination","title":"Multi-Agent LLM Coordination","text":"<pre><code>from cf.agents.supervisor import SupervisorAgent\n\n# SupervisorAgent coordinates LLM across multiple agents\nsupervisor = SupervisorAgent(\"/path/to/repo\", config)\nresult = supervisor.analyze(\"How does authentication work?\")\n\n# LLM synthesis combines insights from all agents\nprint(result['narrative'])\n</code></pre>"},{"location":"api/llm/#llm-integration-patterns","title":"LLM Integration Patterns","text":""},{"location":"api/llm/#reasoning-pattern","title":"Reasoning Pattern","text":"<pre><code># Agents use LLM for reasoning about next actions\nreasoning = llm_client.reasoning(\n    context=\"Current repository state\",\n    question=\"What should I analyze next?\",\n    agent_type=\"code_analysis\"\n)\n</code></pre>"},{"location":"api/llm/#tool-selection-pattern","title":"Tool Selection Pattern","text":"<pre><code># LLM selects optimal tools based on context\ntool_selection = llm_client.function_calling(\n    context=\"Repository analysis context\",\n    available_tools=tool_schemas,\n    goal=\"Find routing implementation\"\n)\n</code></pre>"},{"location":"api/llm/#synthesis-pattern","title":"Synthesis Pattern","text":"<pre><code># LLM synthesizes results from multiple sources\nnarrative = llm_client.synthesize(\n    question=\"How does FastAPI routing work?\",\n    code_insights=code_results,\n    docs_insights=docs_results,\n    web_insights=web_results\n)\n</code></pre>"},{"location":"api/llm/#error-handling","title":"Error Handling","text":""},{"location":"api/llm/#llm-availability-checking","title":"LLM Availability Checking","text":"<pre><code>from cf.llm.client import get_llm_client\n\nllm_client = get_llm_client()\nif llm_client and llm_client.is_available():\n    # Use LLM functionality\n    response = llm_client.generate(prompt)\nelse:\n    # Fallback to non-LLM methods\n    print(\"LLM not available, using fallback\")\n</code></pre>"},{"location":"api/llm/#graceful-degradation","title":"Graceful Degradation","text":"<pre><code>try:\n    # Try LLM function calling\n    result = agent.llm_function_calling(context)\nexcept Exception as e:\n    # Fallback to hardcoded logic\n    logger.warning(f\"LLM function calling failed: {e}\")\n    result = agent.fallback_action_planning(context)\n</code></pre>"},{"location":"api/llm/#performance-optimization","title":"Performance Optimization","text":""},{"location":"api/llm/#token-usage-optimization","title":"Token Usage Optimization","text":"<pre><code># Configure for efficient token usage\nconfig.llm.max_tokens = 1000  # Limit response length\nconfig.llm.temperature = 0.3  # More focused responses\n</code></pre>"},{"location":"api/llm/#caching-integration","title":"Caching Integration","text":"<pre><code># LLM responses are automatically cached\nfrom cf.cache.semantic import SemanticCache\n\ncache = SemanticCache()\n# Repeated similar queries will use cached responses\n</code></pre>"},{"location":"api/llm/#parallel-llm-calls","title":"Parallel LLM Calls","text":"<pre><code># SupervisorAgent coordinates parallel LLM usage\nsupervisor = SupervisorAgent(\"/path/to/repo\", config)\n\n# Multiple agents can use LLM simultaneously\nresult = supervisor.analyze(\"Complex multi-faceted question\")\n</code></pre>"},{"location":"api/llm/#troubleshooting","title":"Troubleshooting","text":""},{"location":"api/llm/#common-llm-issues","title":"Common LLM Issues","text":"<p>API Key Problems: <pre><code># Test API key validity\nfrom cf.llm.client import get_llm_client\n\ntry:\n    client = get_llm_client()\n    test_response = client.generate(\"Hello\")\n    print(\"LLM connection successful\")\nexcept Exception as e:\n    print(f\"LLM connection failed: {e}\")\n</code></pre></p> <p>Rate Limiting: <pre><code># Configure retry behavior\nconfig.llm.retry_attempts = 5\nconfig.llm.retry_delay = 2.0\nconfig.llm.timeout = 60\n</code></pre></p> <p>Model Availability: <pre><code># Check if model is available\ntry:\n    response = client.generate(\"test\", model=\"gpt-4o\")\nexcept Exception as e:\n    print(f\"Model unavailable: {e}\")\n    # Fallback to different model\n    response = client.generate(\"test\", model=\"gpt-3.5-turbo\")\n</code></pre></p>"},{"location":"api/llm/#migration-guide","title":"Migration Guide","text":"<p>If migrating from the old LLM system:</p> <pre><code># Old way (no longer available)\n# from cf.llm.real_llm import RealLLM\n\n# New way (clean architecture)\nfrom cf.llm.client import get_llm_client\n\n# Get LLM client\nclient = get_llm_client()\n</code></pre> <p>For complete documentation, see the main API index.</p>"},{"location":"api/react-agent/","title":"ReAct Agent Base Class","text":"<p>Note: The ReAct agent foundation is now implemented in the BaseAgent class in the clean architecture.</p> <p>The BaseAgent in <code>cf/agents/base.py</code> provides the foundation for all agents using common functionality patterns.</p>"},{"location":"api/react-agent/#current-implementation","title":"Current Implementation","text":"<p>See BaseAgent API Documentation for the current implementation.</p>"},{"location":"api/react-agent/#overview","title":"Overview","text":"<p>The BaseAgent provides common functionality for all agents:</p> <ul> <li>LLM Integration: Unified interface to LLM providers</li> <li>Tool Registry Access: Centralized tool management</li> <li>Logging and Tracing: Progress tracking and debugging</li> <li>Configuration Management: YAML config and environment variables</li> <li>Error Handling: Robust error recovery patterns</li> </ul>"},{"location":"api/react-agent/#migration-guide","title":"Migration Guide","text":"<p>The previous <code>ReActAgent</code> functionality is now available through <code>BaseAgent</code>:</p> <pre><code>from cf.agents.base import BaseAgent\nfrom cf.configs.config_mgr import CfConfig\n\n# BaseAgent is extended by all specific agents\nfrom cf.agents.code import CodeAgent\nfrom cf.agents.supervisor import SupervisorAgent\n\n# Initialize any agent (they all extend BaseAgent)\nconfig = CfConfig.load_from_file(\"cf/configs/config.yaml\")\ncode_agent = CodeAgent(\"/path/to/repository\", config)\n\n# All agents inherit BaseAgent functionality:\n# - call_llm() for LLM interaction\n# - get_tool_registry() for tool access\n# - log_action() for progress tracking\n</code></pre>"},{"location":"api/react-agent/#core-patterns","title":"Core Patterns","text":"<p>The BaseAgent implements these core patterns that all agents inherit:</p>"},{"location":"api/react-agent/#llm-integration-pattern","title":"LLM Integration Pattern","text":"<pre><code># All agents can call LLM through BaseAgent\nresult = agent.call_llm(\"Analyze this code pattern\")\n</code></pre>"},{"location":"api/react-agent/#tool-registry-pattern","title":"Tool Registry Pattern","text":"<pre><code># All agents have access to tools through BaseAgent\nregistry = agent.get_tool_registry()\nschemas = registry.get_all_schemas()\n</code></pre>"},{"location":"api/react-agent/#logging-pattern","title":"Logging Pattern","text":"<pre><code># All agents can log actions through BaseAgent\nagent.log_action(\"Starting code analysis\")\n</code></pre> <p>For complete documentation, see the main API index.</p>"},{"location":"api/supervisor-agent/","title":"Supervisor Agent","text":"<p>The <code>SupervisorAgent</code> orchestrates multiple specialized agents to perform comprehensive codebase analysis through intelligent coordination and cross-agent synthesis.</p> <p>Current Implementation: See SupervisorAgent API Documentation for usage examples.</p>"},{"location":"api/supervisor-agent/#overview","title":"Overview","text":"<p>The SupervisorAgent implements a multi-agent coordination pattern:</p> <ol> <li>Analyzes the question to determine which agents are needed</li> <li>Coordinates parallel execution of CodeAgent, DocsAgent, and WebAgent</li> <li>Synthesizes results from multiple agents using LLM</li> <li>Generates unified technical narratives with comprehensive insights</li> </ol>"},{"location":"api/supervisor-agent/#class-definition","title":"Class Definition","text":"<pre><code>from cf.agents.supervisor import SupervisorAgent\n</code></pre>"},{"location":"api/supervisor-agent/#constructor","title":"Constructor","text":"<pre><code>SupervisorAgent(repo_path: str, config: CfConfig)\n</code></pre> <p>Parameters: - <code>repo_path</code> (str): Path to the repository for analysis - <code>config</code> (CfConfig): Configuration with LLM and agent settings</p>"},{"location":"api/supervisor-agent/#key-methods","title":"Key Methods","text":""},{"location":"api/supervisor-agent/#analyzequestion-str","title":"analyze(question: str)","text":"<p>Performs comprehensive multi-agent analysis.</p> <p>Parameters: - <code>question</code> (str): The analysis question or goal</p> <p>Returns: - <code>dict</code>: Complete analysis results with narrative, insights, and metadata</p> <p>Example: <pre><code>from cf.agents.supervisor import SupervisorAgent\nfrom cf.configs.config_mgr import CfConfig\n\n# Initialize SupervisorAgent\nconfig = CfConfig.load_from_file(\"cf/configs/config.yaml\")\nsupervisor = SupervisorAgent(\"/path/to/repository\", config)\n\n# Perform multi-agent analysis\nresult = supervisor.analyze(\"How does FastAPI routing work?\")\n\nprint(result['narrative'])\nprint(f\"Agents consulted: {result['agents_consulted']}\")\nprint(f\"Execution time: {result['execution_time']}s\")\n</code></pre></p>"},{"location":"api/supervisor-agent/#multi-agent-coordination","title":"Multi-Agent Coordination","text":"<p>The SupervisorAgent coordinates these specialized agents:</p>"},{"location":"api/supervisor-agent/#codeagent-integration","title":"CodeAgent Integration","text":"<ul> <li>Analyzes source code using LLM function calling</li> <li>Identifies implementation patterns and architecture</li> <li>Provides code-specific insights</li> </ul>"},{"location":"api/supervisor-agent/#docsagent-integration","title":"DocsAgent Integration","text":"<ul> <li>Processes documentation and README files</li> <li>Extracts usage examples and API documentation</li> <li>Provides documentation quality assessment</li> </ul>"},{"location":"api/supervisor-agent/#webagent-integration","title":"WebAgent Integration","text":"<ul> <li>Searches external knowledge sources</li> <li>Finds best practices and tutorials</li> <li>Integrates industry documentation</li> </ul>"},{"location":"api/supervisor-agent/#llm-synthesis","title":"LLM Synthesis","text":"<p>The SupervisorAgent uses LLM to synthesize results:</p> <pre><code># The SupervisorAgent automatically:\n# 1. Collects insights from all agents\n# 2. Uses LLM to generate unified narrative\n# 3. Provides comprehensive technical stories\n# 4. Includes confidence scores and metadata\n</code></pre>"},{"location":"api/supervisor-agent/#integration-patterns","title":"Integration Patterns","text":""},{"location":"api/supervisor-agent/#cli-integration","title":"CLI Integration","text":"<pre><code># SupervisorAgent is used automatically by the CLI\npython -m cf.run.main --verbose ask /path/to/repo \"How does routing work?\"\n</code></pre>"},{"location":"api/supervisor-agent/#programmatic-usage","title":"Programmatic Usage","text":"<pre><code># Direct SupervisorAgent usage\nsupervisor = SupervisorAgent(\"/path/to/repo\", config)\nresult = supervisor.analyze(\"Explain the architecture\")\n\n# Access specific insights\ncode_insights = result.get('code_insights', [])\ndocs_insights = result.get('docs_insights', [])\nweb_insights = result.get('web_insights', [])\n</code></pre>"},{"location":"api/supervisor-agent/#performance-characteristics","title":"Performance Characteristics","text":"<ul> <li>Response Time: 15-45 seconds depending on repository size</li> <li>Agent Coordination: Parallel execution where possible  </li> <li>LLM Integration: Uses primary LLM for synthesis</li> <li>Caching: Leverages semantic caching for repeated queries</li> </ul> <p>For complete documentation, see the main API index.</p>"},{"location":"api/tools/","title":"Tools Ecosystem","text":"<p>The CodeFusion framework provides a comprehensive set of specialized tools for code exploration and analysis through the clean <code>cf/tools/</code> module.</p>"},{"location":"api/tools/#tool-registry","title":"Tool Registry","text":"<p>The central tool management is handled by <code>cf/tools/registry.py</code>:</p> <pre><code>from cf.tools.registry import ToolRegistry\n\n# Initialize tool registry\nregistry = ToolRegistry(\"/path/to/repo\")\n\n# Get all available tool schemas for LLM function calling\nschemas = registry.get_all_schemas()\n\n# Execute a specific tool\nresult = registry.execute_tool(\"search_files\", {\n    \"pattern\": \"FastAPI\",\n    \"file_types\": [\"*.py\"],\n    \"max_results\": 10\n})\n</code></pre>"},{"location":"api/tools/#available-tools","title":"Available Tools","text":""},{"location":"api/tools/#repository-tools-cftoolsrepo_toolspy","title":"Repository Tools (<code>cf/tools/repo_tools.py</code>)","text":"<p>scan_directory - Purpose: Explore repository structure and find files - Usage: LLM selects this for initial exploration - Parameters: <code>directory</code>, <code>max_depth</code>, <code>file_types</code></p> <pre><code>from cf.tools.repo_tools import scan_directory\n\nresult = scan_directory({\n    \"directory\": \".\",\n    \"max_depth\": 3,\n    \"file_types\": [\".py\", \".js\", \".md\"]\n})\n</code></pre> <p>read_file - Purpose: Read and analyze file contents - Usage: LLM selects this for detailed examination - Parameters: <code>file_path</code>, <code>max_lines</code></p> <pre><code>from cf.tools.repo_tools import read_file\n\nresult = read_file({\n    \"file_path\": \"main.py\",\n    \"max_lines\": 100\n})\n</code></pre> <p>search_files - Purpose: Pattern-based file searching - Usage: LLM selects this to find specific implementations - Parameters: <code>pattern</code>, <code>file_types</code>, <code>max_results</code></p> <pre><code>from cf.tools.repo_tools import search_files\n\nresult = search_files({\n    \"pattern\": \"routing|router\",\n    \"file_types\": [\".py\"],\n    \"max_results\": 20\n})\n</code></pre>"},{"location":"api/tools/#llm-tools-cftoolsllm_toolspy","title":"LLM Tools (<code>cf/tools/llm_tools.py</code>)","text":"<p>analyze_code - Purpose: AI-powered code analysis and complexity assessment - Usage: LLM selects this for deep code understanding - Parameters: <code>code_content</code>, <code>analysis_type</code></p> <pre><code>from cf.tools.llm_tools import analyze_code\n\nresult = analyze_code({\n    \"code_content\": \"def hello():\\n    return 'world'\",\n    \"analysis_type\": \"complexity\"\n})\n</code></pre> <p>llm_reasoning - Purpose: LLM-powered reasoning and decision making - Usage: Agents use this for intelligent analysis - Parameters: <code>context</code>, <code>question</code>, <code>reasoning_type</code></p> <pre><code>from cf.tools.llm_tools import llm_reasoning\n\nresult = llm_reasoning({\n    \"context\": \"Current codebase state\",\n    \"question\": \"What should I analyze next?\",\n    \"reasoning_type\": \"exploration_strategy\"\n})\n</code></pre>"},{"location":"api/tools/#web-tools-cftoolsweb_toolspy","title":"Web Tools (<code>cf/tools/web_tools.py</code>)","text":"<p>web_search - Purpose: External knowledge search via DuckDuckGo API - Usage: LLM selects this for external documentation - Parameters: <code>query</code>, <code>max_results</code>, <code>search_type</code></p> <pre><code>from cf.tools.web_tools import web_search\n\nresult = web_search({\n    \"query\": \"FastAPI routing best practices\",\n    \"max_results\": 5,\n    \"search_type\": \"documentation\"\n})\n</code></pre>"},{"location":"api/tools/#llm-function-calling-integration","title":"LLM Function Calling Integration","text":"<p>The tools are designed for LLM function calling where the AI selects optimal tools:</p>"},{"location":"api/tools/#tool-schema-definition","title":"Tool Schema Definition","text":"<p>Each tool provides an OpenAI-compatible schema:</p> <pre><code>{\n    \"type\": \"function\",\n    \"function\": {\n        \"name\": \"search_files\",\n        \"description\": \"Search for files matching a pattern\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"pattern\": {\n                    \"type\": \"string\",\n                    \"description\": \"Search pattern or keyword\"\n                },\n                \"file_types\": {\n                    \"type\": \"array\",\n                    \"items\": {\"type\": \"string\"},\n                    \"description\": \"File extensions to search\"\n                }\n            },\n            \"required\": [\"pattern\"]\n        }\n    }\n}\n</code></pre>"},{"location":"api/tools/#llm-tool-selection","title":"LLM Tool Selection","text":"<p>Agents use LLM function calling to intelligently select tools:</p> <pre><code>from cf.agents.code import CodeAgent\n\n# CodeAgent uses LLM function calling internally\ncode_agent = CodeAgent(\"/path/to/repo\", config)\n\n# LLM will select appropriate tools based on the goal\nresult = code_agent.analyze(\"Find authentication implementation\")\n\n# Example LLM tool selection sequence:\n# 1. scan_directory - Explore repository structure\n# 2. search_files - Find auth-related files  \n# 3. read_file - Examine key files\n# 4. analyze_code - Understand implementation patterns\n</code></pre>"},{"location":"api/tools/#tool-execution-flow","title":"Tool Execution Flow","text":""},{"location":"api/tools/#agent-registry-tool-flow","title":"Agent \u2192 Registry \u2192 Tool Flow","text":"<pre><code>graph LR\n    Agent[Agent] --&gt; Registry[ToolRegistry]\n    Registry --&gt; RepoTools[repo_tools.py]\n    Registry --&gt; LLMTools[llm_tools.py]  \n    Registry --&gt; WebTools[web_tools.py]\n    RepoTools --&gt; Result[Tool Result]\n    LLMTools --&gt; Result\n    WebTools --&gt; Result\n    Result --&gt; Agent</code></pre>"},{"location":"api/tools/#error-handling","title":"Error Handling","text":"<p>Tools include comprehensive error handling:</p> <pre><code>try:\n    result = registry.execute_tool(\"search_files\", params)\n    if result[\"success\"]:\n        data = result[\"result\"]\n    else:\n        error = result[\"error\"]\n        print(f\"Tool execution failed: {error}\")\nexcept Exception as e:\n    print(f\"Tool registry error: {e}\")\n</code></pre>"},{"location":"api/tools/#tool-development","title":"Tool Development","text":""},{"location":"api/tools/#creating-custom-tools","title":"Creating Custom Tools","text":"<p>To add new tools to the registry:</p> <pre><code># cf/tools/custom_tools.py\ndef analyze_dependencies(params, context):\n    \"\"\"Analyze project dependencies.\"\"\"\n    return {\n        \"dependencies\": [],\n        \"analysis\": \"Dependency analysis complete\"\n    }\n\n# Register in cf/tools/registry.py\nclass ToolRegistry:\n    def __init__(self, repo_path):\n        self.tools = {\n            # Existing tools...\n            \"analyze_dependencies\": analyze_dependencies\n        }\n</code></pre>"},{"location":"api/tools/#tool-schema-requirements","title":"Tool Schema Requirements","text":"<p>Each tool must provide: 1. Function implementation with <code>params</code> and <code>context</code> parameters 2. Schema definition for LLM function calling 3. Error handling with try/catch blocks 4. Result formatting with consistent return structure</p>"},{"location":"api/tools/#performance-characteristics","title":"Performance Characteristics","text":""},{"location":"api/tools/#tool-execution-metrics","title":"Tool Execution Metrics","text":"<ul> <li>scan_directory: ~1-3 seconds depending on repository size</li> <li>read_file: ~0.5-2 seconds depending on file size</li> <li>search_files: ~2-5 seconds depending on pattern complexity</li> <li>analyze_code: ~3-8 seconds depending on code complexity</li> <li>web_search: ~5-10 seconds depending on network and results</li> </ul>"},{"location":"api/tools/#caching-integration","title":"Caching Integration","text":"<p>Tools leverage semantic caching for performance:</p> <pre><code>from cf.cache.semantic import SemanticCache\n\n# Tool results are automatically cached\ncache = SemanticCache()\n# Repeated tool calls with similar parameters use cached results\n</code></pre>"},{"location":"api/tools/#migration-guide","title":"Migration Guide","text":"<p>If migrating from the old tools system:</p> <pre><code># Old way (no longer available)\n# from cf.tools.advanced_tools import scan_directory\n\n# New way (clean architecture)\nfrom cf.tools.repo_tools import scan_directory\nfrom cf.tools.registry import ToolRegistry\n\n# Use through registry for LLM function calling\nregistry = ToolRegistry(\"/path/to/repo\")\nresult = registry.execute_tool(\"scan_directory\", params)\n</code></pre> <p>For complete documentation, see the main API index.</p>"},{"location":"api/web-search-agent/","title":"WebAgent API","text":"<p>The <code>WebAgent</code> provides intelligent web search capabilities with LLM-powered query generation and seamless integration of external knowledge into technical responses.</p>"},{"location":"api/web-search-agent/#overview","title":"Overview","text":"<p>The WebAgent enables: - LLM-Powered Query Generation: Intelligent search query crafting based on questions and codebase context - External Knowledge Integration: Web search results seamlessly woven into main narrative responses - Relevance Filtering: AI-driven filtering of search results for technical accuracy - Best Practices Enhancement: Industry documentation and tutorials automatically included - No Configuration Required: Web search automatically enabled when beneficial</p>"},{"location":"api/web-search-agent/#current-implementation","title":"Current Implementation","text":"<p>See WebAgent API Documentation for the current implementation.</p>"},{"location":"api/web-search-agent/#class-definition","title":"Class Definition","text":"<pre><code>from cf.agents.web import WebAgent\n</code></pre>"},{"location":"api/web-search-agent/#constructor","title":"Constructor","text":"<pre><code>WebAgent(repo_path: str, config: CfConfig)\n</code></pre> <p>Parameters: - <code>repo_path</code> (str): Path to the repository for context-aware search - <code>config</code> (CfConfig): Configuration with web search and LLM settings</p> <p>Example: <pre><code>from cf.agents.web import WebAgent\nfrom cf.configs.config_mgr import CfConfig\n\n# Initialize configuration and WebAgent\nconfig = CfConfig.load_from_file(\"cf/configs/config.yaml\")\nweb_agent = WebAgent(\"/path/to/repository\", config)\n\n# Perform web search analysis\nresult = web_agent.analyze(\"Search for FastAPI routing best practices\")\nprint(result['web_insights'])\n</code></pre></p>"},{"location":"api/web-search-agent/#key-methods","title":"Key Methods","text":""},{"location":"api/web-search-agent/#analyzegoal-str","title":"analyze(goal: str)","text":"<p>Performs web search analysis based on the goal.</p> <p>Parameters: - <code>goal</code> (str): The search objective or question</p> <p>Returns: - <code>dict</code>: Analysis results with web insights</p> <p>Example: <pre><code>result = web_agent.analyze(\"Find best practices for FastAPI authentication\")\n</code></pre></p>"},{"location":"api/web-search-agent/#generate_search_queriesquestion-str","title":"generate_search_queries(question: str)","text":"<p>Generates intelligent search queries using LLM.</p> <p>Parameters: - <code>question</code> (str): Original question or topic</p> <p>Returns: - <code>list</code>: Generated search queries</p>"},{"location":"api/web-search-agent/#process_web_resultsresults-list","title":"process_web_results(results: list)","text":"<p>Processes and filters web search results.</p> <p>Parameters: - <code>results</code> (list): Raw web search results</p> <p>Returns: - <code>dict</code>: Processed and filtered results</p>"},{"location":"api/web-search-agent/#integration-with-multi-agent-system","title":"Integration with Multi-Agent System","text":"<p>The WebAgent integrates seamlessly with the SupervisorAgent:</p> <pre><code>from cf.agents.supervisor import SupervisorAgent\n\n# SupervisorAgent automatically uses WebAgent when beneficial\nsupervisor = SupervisorAgent(\"/path/to/repo\", config)\nresult = supervisor.analyze(\"How does FastAPI handle authentication?\")\n\n# WebAgent results are automatically integrated into the final narrative\n</code></pre>"},{"location":"api/web-search-agent/#web-search-tools","title":"Web Search Tools","text":"<p>The WebAgent uses the following tools via LLM function calling:</p> <ul> <li>web_search: External knowledge search via DuckDuckGo API</li> <li>search_documentation: Find relevant documentation online</li> <li>extract_best_practices: Identify industry best practices</li> </ul> <p>For complete documentation, see the main API index.</p>"},{"location":"dev/CODE_OF_CONDUCT/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"dev/CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"dev/CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the   overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or   advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email   address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"dev/CODE_OF_CONDUCT/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"dev/CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"dev/CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at . All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"dev/CODE_OF_CONDUCT/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"dev/CODE_OF_CONDUCT/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"dev/CODE_OF_CONDUCT/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"dev/CODE_OF_CONDUCT/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"dev/CODE_OF_CONDUCT/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior,  harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"dev/CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"dev/architecture/","title":"CodeFusion Interactive Architecture","text":"<p>CodeFusion is an interactive, multi-agent LLM-powered system for intelligent codebase exploration and analysis. The architecture enables continuous question-answer sessions with persistent memory, adaptive response formats, and seamless web search integration. The primary innovation is the intelligent response format detection and multi-agent coordination that provides the right type of analysis for each question.</p>"},{"location":"dev/architecture/#design-philosophy","title":"Design Philosophy","text":""},{"location":"dev/architecture/#core-principles","title":"Core Principles","text":"<ol> <li>Interactive Sessions: Continuous question-answer with persistent memory and context building</li> <li>Adaptive Response Formats: LLM-driven format detection (Journey, Comparison, Explanation)</li> <li>Multi-Agent Coordination: Intelligent agent selection based on question complexity</li> <li>Web Search Integration: External knowledge seamlessly woven into responses</li> <li>LLM-Driven Consolidation: Unified responses from multiple agent insights</li> <li>ReAct Pattern Foundation: Systematic Reason \u2192 Act \u2192 Observe loops for intelligent exploration</li> </ol>"},{"location":"dev/architecture/#key-features","title":"Key Features","text":"<ul> <li>\u2705 Interactive Session Management: Persistent memory and context across questions</li> <li>\u2705 Multi-Agent Coordination: Intelligent selection of code, documentation, and web search agents</li> <li>\u2705 Adaptive Response Formats: Journey, Comparison, and Explanation formats based on question type</li> <li>\u2705 Web Search Integration: DuckDuckGo API with LLM-powered query generation</li> <li>\u2705 LLM-Driven Consolidation: Unified narrative generation from multi-agent results</li> <li>\u2705 Smart Entity Extraction: Improved entity detection for better narrative titles</li> <li>\u2705 Tool Registry System: Structured tool definitions for LLM function calling</li> <li>\u2705 Advanced Caching: Persistent cross-session caching with TTL and LRU eviction</li> <li>\u2705 LLM Integration: OpenAI, Anthropic, and LLaMA support via LiteLLM</li> <li>\u2705 Comprehensive Tracing: Performance monitoring and debugging capabilities</li> <li>\u2705 Error Recovery: Robust error handling with circuit breakers and recovery strategies</li> <li>\u2705 Clean Import Structure: Absolute imports and proper module organization</li> <li>\u2705 Dynamic LLM Loading: Function-based LLM access for proper initialization</li> <li>\u2705 Graceful Fallbacks: Seamless operation with or without LLM availability</li> <li>\u2705 Virtual Environment Support: Proper isolation and dependency management</li> </ul>"},{"location":"dev/architecture/#system-workflow-overview","title":"System Workflow Overview","text":"<p>For the complete system architecture diagram, see the README.</p> <p>This section focuses on the workflow showing how a question flows through the system:</p> <pre><code>flowchart TD\n    %% Input Flow\n    User[\ud83d\udc64 User] --&gt; Question{\u2753 Question&lt;br/&gt;How does routing work?}\n    Question --&gt; CLI[\ud83d\udda5\ufe0f CLI Interface&lt;br/&gt;Parse &amp; Initialize]\n    CLI --&gt; Config[\u2699\ufe0f Load Configuration&lt;br/&gt;API Keys &amp; Settings]\n    Config --&gt; Supervisor[\ud83e\udd16 SupervisorAgent&lt;br/&gt;Question Analysis]\n\n    %% Multi-Agent Coordination\n    Supervisor --&gt; Parallel{\ud83c\udfaf Parallel Agent Execution}\n\n    Parallel --&gt; CodeAgent[\ud83d\udd0d CodeAgent&lt;br/&gt;Analyze Source Code]\n    Parallel --&gt; DocsAgent[\ud83d\udcda DocsAgent&lt;br/&gt;Process Documentation]  \n    Parallel --&gt; WebAgent[\ud83c\udf10 WebAgent&lt;br/&gt;Search External Knowledge]\n\n    %% Agent Processing\n    CodeAgent --&gt; CodeTools[\ud83d\udee0\ufe0f Repository Tools&lt;br/&gt;scan_directory, read_file, search_files]\n    DocsAgent --&gt; DocsTools[\ud83d\udee0\ufe0f Documentation Tools&lt;br/&gt;README analysis, API docs]\n    WebAgent --&gt; WebTools[\ud83d\udee0\ufe0f Web Search Tools&lt;br/&gt;External best practices]\n\n    %% LLM Integration\n    CodeTools --&gt; LLM[\ud83e\udde0 LLM Integration&lt;br/&gt;GPT-4o Function Calling]\n    DocsTools --&gt; LLM\n    WebTools --&gt; LLM\n\n    %% Results Collection\n    CodeAgent --&gt; Results[\ud83d\udcca Collect Agent Results&lt;br/&gt;Code insights, Doc insights, Web insights]\n    DocsAgent --&gt; Results\n    WebAgent --&gt; Results\n\n    %% Synthesis\n    Results --&gt; Synthesis[\ud83e\udd16 LLM Synthesis&lt;br/&gt;Generate Unified Narrative]\n    Synthesis --&gt; Cache[\ud83d\udcbe Cache Results&lt;br/&gt;Persistent Memory]\n\n    %% Output\n    Cache --&gt; Narrative[\ud83d\udcd6 Technical Narrative&lt;br/&gt;Life of X Format]\n    Narrative --&gt; Response[\u2705 Complete Response&lt;br/&gt;Confidence + Timing + Agents Used]\n    Response --&gt; Display[\ud83d\udda5\ufe0f Display Results&lt;br/&gt;Verbose Logging + Final Answer]\n    Display --&gt; User\n\n    %% Styling with darker, more visible colors\n    classDef userStyle fill:#1565c0,stroke:#0d47a1,stroke-width:3px,color:#fff\n    classDef processStyle fill:#2e7d32,stroke:#1b5e20,stroke-width:2px,color:#fff\n    classDef agentStyle fill:#d84315,stroke:#bf360c,stroke-width:2px,color:#fff\n    classDef toolStyle fill:#f57c00,stroke:#e65100,stroke-width:2px,color:#fff\n    classDef llmStyle fill:#7b1fa2,stroke:#4a148c,stroke-width:2px,color:#fff\n    classDef outputStyle fill:#c2185b,stroke:#880e4f,stroke-width:3px,color:#fff\n\n    class User,Display userStyle\n    class Question,CLI,Config,Supervisor,Parallel,Results,Synthesis,Cache,Narrative,Response processStyle\n    class CodeAgent,DocsAgent,WebAgent agentStyle\n    class CodeTools,DocsTools,WebTools toolStyle\n    class LLM llmStyle</code></pre>"},{"location":"dev/architecture/#clean-package-architecture-benefits","title":"Clean Package Architecture Benefits","text":""},{"location":"dev/architecture/#organized-module-structure","title":"\ud83c\udfaf Organized Module Structure","text":"<p>The clean <code>cf/</code> package provides several key benefits:</p> <ol> <li>Clear Separation of Concerns: Each module has a specific responsibility</li> <li><code>cf/agents/</code> - Multi-agent coordination system</li> <li><code>cf/tools/</code> - Tool ecosystem for LLM function calling  </li> <li><code>cf/llm/</code> - LLM integration layer</li> <li><code>cf/configs/</code> - Configuration management</li> <li> <p><code>cf/run/</code> - CLI interface</p> </li> <li> <p>Simplified Imports: Clean absolute import paths    <pre><code>from cf.agents.supervisor import SupervisorAgent\nfrom cf.tools.registry import ToolRegistry\nfrom cf.llm.client import get_llm_client\n</code></pre></p> </li> <li> <p>Modular Design: Each component can be tested and used independently</p> </li> <li> <p>Consistent Naming: All modules follow Python naming conventions</p> </li> </ol>"},{"location":"dev/architecture/#current-working-features","title":"\ud83d\udd27 Current Working Features","text":"<p>The clean architecture supports these working features:</p> <ul> <li>\u2705 Multi-Agent Coordination: SupervisorAgent orchestrates specialized agents</li> <li>\u2705 LLM Function Calling: Dynamic tool selection with intelligent parameters</li> <li>\u2705 Verbose Logging: Real-time visibility into agent decision making</li> <li>\u2705 Technical Narratives: Comprehensive architectural overviews</li> <li>\u2705 Response Time Tracking: Accurate execution time measurement</li> <li>\u2705 Clean Configuration: YAML config with environment variable support</li> </ul>"},{"location":"dev/architecture/#system-flow-example","title":"\ud83d\udcca System Flow Example","text":"<pre><code>python -m cf.run.main --verbose ask /path/to/repo \"How does routing work?\"\n</code></pre> <p>Working Flow: <pre><code>cf/run/main.py (CLI Entry)\n  \u2193\ncf/agents/supervisor.py (Orchestration)\n  \u2193  \ncf/agents/code.py + docs.py + web.py (Parallel Analysis)\n  \u2193\ncf/tools/registry.py (Tool Dispatch)\n  \u2193\ncf/llm/client.py (LLM Integration)\n  \u2193\n\u2705 Result: Complete technical narrative with timing\n</code></pre></p>"},{"location":"dev/architecture/#module-details","title":"Module Details","text":""},{"location":"dev/architecture/#cfagents-multi-agent-system","title":"cf/agents/ - Multi-Agent System","text":"<p>SupervisorAgent (<code>cf/agents/supervisor.py</code>) - Orchestrates multiple specialized agents - Consolidates results with LLM synthesis - Provides unified response generation</p> <p>CodeAgent (<code>cf/agents/code.py</code>) - Analyzes source code using LLM function calling - Intelligent tool selection based on context - Code pattern recognition and analysis</p> <p>DocsAgent (<code>cf/agents/docs.py</code>) - Processes documentation and README files - Extracts architectural information - Analyzes documentation quality</p> <p>WebAgent (<code>cf/agents/web.py</code>) - External knowledge integration via web search - Context-aware query generation - Best practices and external documentation</p> <p>BaseAgent (<code>cf/agents/base.py</code>) - Common agent functionality - LLM integration patterns - Shared logging and tracing</p>"},{"location":"dev/architecture/#cftools-tool-ecosystem","title":"cf/tools/ - Tool Ecosystem","text":"<p>ToolRegistry (<code>cf/tools/registry.py</code>) - Centralized tool management - Schema validation for LLM function calling - Tool dispatch and execution</p> <p>RepoTools (<code>cf/tools/repo_tools.py</code>) - File system operations: <code>scan_directory</code>, <code>read_file</code>, <code>search_files</code> - Repository exploration capabilities - Smart file filtering and analysis</p> <p>LLMTools (<code>cf/tools/llm_tools.py</code>) - AI-powered analysis: <code>analyze_code</code>, <code>llm_reasoning</code> - Code complexity analysis - Intelligent summarization</p> <p>WebTools (<code>cf/tools/web_tools.py</code>) - External search: <code>web_search</code> - Knowledge base integration - Documentation discovery</p>"},{"location":"dev/architecture/#cfllm-llm-integration","title":"cf/llm/ - LLM Integration","text":"<p>LLMClient (<code>cf/llm/client.py</code>) - LiteLLM multi-provider support - OpenAI, Anthropic, LLaMA integration - Robust error handling and fallbacks</p>"},{"location":"dev/architecture/#cfconfigs-configuration-management","title":"cf/configs/ - Configuration Management","text":"<p>ConfigManager (<code>cf/configs/config_mgr.py</code>) - YAML configuration loading - Environment variable support - Secure API key management</p> <p>Configuration (<code>cf/configs/config.yaml</code>) - LLM provider settings - Agent configuration - Tool parameters</p>"},{"location":"dev/architecture/#cfrun-cli-interface","title":"cf/run/ - CLI Interface","text":"<p>Main (<code>cf/run/main.py</code>) - Command-line interface - Argument parsing - Verbose logging integration</p>"},{"location":"dev/architecture/#getting-started","title":"Getting Started","text":""},{"location":"dev/architecture/#basic-usage","title":"Basic Usage","text":"<pre><code># Install dependencies\npip install -e .\n\n# Set API key\nexport OPENAI_API_KEY=\"your-key\"\n\n# Run analysis\npython -m cf.run.main --verbose ask /path/to/repo \"How does routing work?\"\n</code></pre>"},{"location":"dev/architecture/#configuration","title":"Configuration","text":"<pre><code># cf/configs/config.yaml\nllm:\n  model: \"gpt-4o\"\n  api_key: \"your-openai-api-key\"\n  provider: \"openai\"\n</code></pre>"},{"location":"dev/architecture/#contributing","title":"Contributing","text":"<p>The clean package architecture makes contributing straightforward:</p> <ol> <li>Add New Agents: Extend <code>cf/agents/base.py</code></li> <li>Create Tools: Add to <code>cf/tools/</code> with proper schemas</li> <li>Enhance LLM Integration: Extend <code>cf/llm/client.py</code></li> <li>Improve Configuration: Update <code>cf/configs/</code></li> </ol>"},{"location":"dev/architecture/#performance-characteristics","title":"Performance Characteristics","text":"<ul> <li>Response Time: 15-45 seconds depending on repository size</li> <li>Agent Coordination: Parallel execution where possible</li> <li>Caching: Persistent semantic caching for repeated queries</li> <li>Memory Usage: Efficient with smart file filtering</li> <li>Error Recovery: Graceful fallbacks and circuit breakers</li> </ul> <p>This clean architecture provides a solid foundation for intelligent codebase exploration with clear separation of concerns and excellent maintainability.</p>"},{"location":"dev/contributing/","title":"Contributing to CodeFusion","text":"<p>Thank you for your interest in contributing to CodeFusion! This project focuses on simplicity and human-like exploration patterns.</p>"},{"location":"dev/contributing/#philosophy","title":"Philosophy","text":"<p>CodeFusion is built on the principle that code exploration should be as natural as human investigation. When contributing, please keep these principles in mind:</p> <ul> <li>Keep it simple: Avoid complex dependencies and solutions</li> <li>Human-like patterns: Follow natural investigation workflows</li> <li>Immediate usability: No complex setup or preprocessing</li> <li>Incremental understanding: Build knowledge step by step</li> </ul>"},{"location":"dev/contributing/#getting-started","title":"Getting Started","text":""},{"location":"dev/contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.10 or higher</li> <li>Git</li> <li>Basic understanding of command-line tools</li> </ul>"},{"location":"dev/contributing/#development-setup","title":"Development Setup","text":"<pre><code># Clone the repository\ngit clone &lt;repository-url&gt;\ncd codefusion\n\n# Create virtual environment\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n\n# Install for development\npip install -e \".[dev]\"\n\n# Install pre-commit hooks\npre-commit install\n\n# Run tests to verify setup\npytest\n</code></pre>"},{"location":"dev/contributing/#code-organization","title":"Code Organization","text":""},{"location":"dev/contributing/#project-structure","title":"Project Structure","text":"<pre><code>cf/\n\u251c\u2500\u2500 core/\n\u2502   \u2514\u2500\u2500 simple_explorer.py      # Main exploration interface\n\u251c\u2500\u2500 agents/\n\u2502   \u2514\u2500\u2500 human_explorer.py       # Human-like investigation agent\n\u251c\u2500\u2500 run/\n\u2502   \u2514\u2500\u2500 simple_run.py           # CLI interface\n\u251c\u2500\u2500 aci/\n\u2502   \u2514\u2500\u2500 repo.py                 # Repository access\n\u2514\u2500\u2500 config.py                   # Simple configuration\n</code></pre>"},{"location":"dev/contributing/#key-components","title":"Key Components","text":"<ol> <li>CLI (<code>cf/run/simple_run.py</code>): Command-line interface</li> <li>Simple Explorer (<code>cf/core/simple_explorer.py</code>): Main orchestration</li> <li>Human Explorer (<code>cf/agents/human_explorer.py</code>): Investigation logic</li> <li>Repository Interface (<code>cf/aci/repo.py</code>): File system access</li> <li>Configuration (<code>cf/config.py</code>): Simple settings management</li> </ol>"},{"location":"dev/contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"dev/contributing/#making-changes","title":"Making Changes","text":"<ol> <li>Create a branch: <code>git checkout -b feature/your-feature</code></li> <li>Make changes: Follow the coding standards below</li> <li>Test changes: Run tests and verify functionality</li> <li>Commit changes: Use clear, descriptive commit messages</li> <li>Push branch: <code>git push origin feature/your-feature</code></li> <li>Create PR: Submit a pull request for review</li> </ol>"},{"location":"dev/contributing/#testing","title":"Testing","text":"<pre><code># Run all tests\npytest\n\n# Run with coverage\npytest --cov=cf\n\n# Run specific test file\npytest tests/test_simple_explorer.py\n\n# Run tests with verbose output\npytest -v\n</code></pre>"},{"location":"dev/contributing/#code-quality","title":"Code Quality","text":"<pre><code># Format code\nblack .\n\n# Sort imports\nisort .\n\n# Check linting\nflake8 cf/\n\n# Type checking\nmypy cf/\n\n# Run all quality checks\nblack . &amp;&amp; isort . &amp;&amp; flake8 cf/ &amp;&amp; mypy cf/\n</code></pre>"},{"location":"dev/contributing/#coding-standards","title":"Coding Standards","text":""},{"location":"dev/contributing/#python-style","title":"Python Style","text":"<ul> <li>Follow PEP 8 style guide</li> <li>Use Black for code formatting</li> <li>Sort imports with isort</li> <li>Add type hints for function parameters and return values</li> <li>Keep functions focused and single-purpose</li> </ul>"},{"location":"dev/contributing/#example-code-style","title":"Example Code Style","text":"<pre><code>def explore_repository(repo_path: str, question: str) -&gt; str:\n    \"\"\"\n    Explore a repository to answer a question.\n\n    Args:\n        repo_path: Path to the repository\n        question: Question to investigate\n\n    Returns:\n        Human-readable investigation results\n    \"\"\"\n    explorer = SimpleExplorer(repo_path)\n    return explorer.explore(question)\n</code></pre>"},{"location":"dev/contributing/#documentation","title":"Documentation","text":"<ul> <li>Use Google-style docstrings</li> <li>Include type hints</li> <li>Provide clear examples</li> <li>Document complex logic with comments</li> </ul>"},{"location":"dev/contributing/#adding-features","title":"Adding Features","text":""},{"location":"dev/contributing/#new-exploration-tools","title":"New Exploration Tools","text":"<p>To add a new exploration tool:</p> <ol> <li>Add method to <code>ExplorationTools</code> class in <code>cf/agents/human_explorer.py</code></li> <li>Update <code>_take_action</code> method to use the new tool</li> <li>Add observation handling in <code>_observe_results</code></li> <li>Write tests for the new functionality</li> </ol> <p>Example: <pre><code>def find_imports(self, file_path: str) -&gt; List[str]:\n    \"\"\"Find import statements in a file.\"\"\"\n    try:\n        content = self.repo.read_file(file_path)\n        # Simple regex to find imports\n        import re\n        imports = re.findall(r'^(?:from|import)\\s+(\\S+)', content, re.MULTILINE)\n        return imports\n    except Exception as e:\n        return [f\"Error finding imports: {e}\"]\n</code></pre></p>"},{"location":"dev/contributing/#new-cli-commands","title":"New CLI Commands","text":"<p>To add a new CLI command:</p> <ol> <li>Add parser in <code>create_parser</code> method in <code>cf/run/simple_run.py</code></li> <li>Create command handler method (e.g., <code>cmd_new_command</code>)</li> <li>Add to the argument parser setup</li> <li>Test the new command</li> </ol>"},{"location":"dev/contributing/#configuration-options","title":"Configuration Options","text":"<p>To add new configuration options:</p> <ol> <li>Add field to <code>CfConfig</code> class in <code>cf/config.py</code></li> <li>Update <code>to_dict</code> and validation methods</li> <li>Update default configuration file</li> <li>Document the new option</li> </ol>"},{"location":"dev/contributing/#testing-guidelines","title":"Testing Guidelines","text":""},{"location":"dev/contributing/#unit-tests","title":"Unit Tests","text":"<ul> <li>Test individual components in isolation</li> <li>Mock external dependencies</li> <li>Use descriptive test names</li> <li>Test both success and failure cases</li> </ul> <p>Example: <pre><code>def test_simple_explorer_caching():\n    \"\"\"Test that exploration results are cached correctly.\"\"\"\n    explorer = SimpleExplorer(\"/test/repo\")\n\n    # Mock the investigation\n    with patch.object(explorer.explorer, 'investigate') as mock_investigate:\n        mock_investigate.return_value = Mock(...)\n\n        # First call should hit investigation\n        result1 = explorer.explore(\"test question\")\n        assert mock_investigate.called\n\n        # Second call should use cache\n        result2 = explorer.explore(\"test question\")\n        assert result1 == result2\n</code></pre></p>"},{"location":"dev/contributing/#integration-tests","title":"Integration Tests","text":"<ul> <li>Test end-to-end workflows</li> <li>Use temporary directories for file operations</li> <li>Test CLI commands with real repositories</li> <li>Verify error handling</li> </ul>"},{"location":"dev/contributing/#performance-tests","title":"Performance Tests","text":"<ul> <li>Test with large repositories</li> <li>Monitor memory usage</li> <li>Measure response times</li> <li>Test caching effectiveness</li> </ul>"},{"location":"dev/contributing/#submitting-changes","title":"Submitting Changes","text":""},{"location":"dev/contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Fork the repository</li> <li>Create a feature branch</li> <li>Make your changes</li> <li>Test thoroughly</li> <li>Update documentation</li> <li>Submit pull request</li> </ol>"},{"location":"dev/contributing/#pr-guidelines","title":"PR Guidelines","text":"<ul> <li>Clear, descriptive title</li> <li>Detailed description of changes</li> <li>Reference any related issues</li> <li>Include tests for new features</li> <li>Update documentation as needed</li> </ul>"},{"location":"dev/contributing/#bug-reports","title":"Bug Reports","text":""},{"location":"dev/contributing/#before-reporting","title":"Before Reporting","text":"<ol> <li>Check existing issues</li> <li>Try latest version</li> <li>Verify it's not a configuration issue</li> <li>Test with minimal example</li> </ol>"},{"location":"dev/contributing/#bug-report-template","title":"Bug Report Template","text":"<pre><code>## Bug Description\nClear description of the bug\n\n## Steps to Reproduce\n1. Step one\n2. Step two\n3. Step three\n\n## Expected Behavior\nWhat should happen\n\n## Actual Behavior\nWhat actually happens\n\n## Environment\n- OS: [e.g., macOS 12.0]\n- Python: [e.g., 3.10.0]\n- CodeFusion: [e.g., 0.0.1]\n\n## Additional Context\nAny other relevant information\n</code></pre>"},{"location":"dev/contributing/#feature-requests","title":"Feature Requests","text":""},{"location":"dev/contributing/#guidelines","title":"Guidelines","text":"<ul> <li>Keep features simple and focused</li> <li>Align with human-like exploration philosophy</li> <li>Avoid complex dependencies</li> <li>Consider maintenance burden</li> </ul>"},{"location":"dev/contributing/#community","title":"Community","text":""},{"location":"dev/contributing/#communication","title":"Communication","text":"<ul> <li>Be respectful and professional</li> <li>Focus on the code, not the person</li> <li>Provide constructive feedback</li> <li>Help others learn and improve</li> </ul>"},{"location":"dev/contributing/#getting-help","title":"Getting Help","text":"<ul> <li>Check existing documentation</li> <li>Search previous issues</li> <li>Ask questions in discussions</li> <li>Be specific about problems</li> </ul>"},{"location":"dev/contributing/#thank-you","title":"Thank You","text":"<p>Thank you for contributing to CodeFusion! Your contributions help make code exploration more natural and accessible for developers everywhere.</p> <p>Remember: Keep it simple, keep it human-like, and keep it useful.</p>"},{"location":"installation/quickstart/","title":"Quick Start","text":"<p>Get up and running with CodeFusion in minutes.</p>"},{"location":"installation/quickstart/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.10 or higher</li> <li>Git</li> </ul>"},{"location":"installation/quickstart/#installation","title":"Installation","text":"<pre><code># Clone the repository\ngit clone &lt;repository-url&gt;\ncd codefusion\n\n# Create virtual environment\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n\n# Install CodeFusion\npip install -e .\n\n# Verify installation\ncf --help\n</code></pre>"},{"location":"installation/quickstart/#first-exploration","title":"First Exploration","text":"<pre><code># Explore a repository\ncf explore /path/to/your/repo \"How does authentication work?\"\n\n# Continue exploration\ncf continue /path/to/your/repo \"How are sessions managed?\" --previous \"How does authentication work?\"\n\n# View exploration summary\ncf summary /path/to/your/repo\n</code></pre>"},{"location":"installation/quickstart/#example-questions","title":"Example Questions","text":"<p>Try these example questions:</p> <ul> <li>\"How does authentication work?\"</li> <li>\"What are the main API endpoints?\"</li> <li>\"How is data stored and retrieved?\"</li> <li>\"What testing frameworks are used?\"</li> <li>\"How is the application configured?\"</li> </ul>"},{"location":"installation/quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Read the CLI Usage Guide</li> <li>Learn about Configuration</li> <li>Check the Installation Guide for detailed setup</li> </ul>"},{"location":"installation/quickstart/#need-help","title":"Need Help?","text":"<ul> <li>Use <code>cf --help</code> for command help</li> <li>Use <code>cf --verbose</code> for detailed output</li> <li>Check the documentation for more information</li> </ul>"},{"location":"installation/setup/","title":"Installation and Setup Guide","text":"<p>This guide covers setting up CodeFusion for human-like code exploration.</p>"},{"location":"installation/setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.10+: Required for all functionality</li> <li>Git: For cloning repositories and version control</li> <li>Virtual Environment: Highly recommended to avoid dependency conflicts</li> </ul>"},{"location":"installation/setup/#virtual-environment-setup","title":"Virtual Environment Setup","text":""},{"location":"installation/setup/#create-virtual-environment","title":"Create Virtual Environment","text":"<pre><code># Navigate to project directory\ncd codefusion\n\n# Create virtual environment\npython -m venv venv\n\n# Activate virtual environment\n# On macOS/Linux:\nsource venv/bin/activate\n\n# On Windows:\nvenv\\Scripts\\activate\n</code></pre>"},{"location":"installation/setup/#verify-activation","title":"Verify Activation","text":"<p>Your terminal prompt should show <code>(venv)</code> when the virtual environment is active:</p> <pre><code>(venv) $ python --version\nPython 3.10.x\n</code></pre>"},{"location":"installation/setup/#installation-options","title":"Installation Options","text":""},{"location":"installation/setup/#basic-installation","title":"Basic Installation","text":"<p>Install CodeFusion with human-like exploration capabilities:</p> <pre><code>pip install -e .\n</code></pre> <p>This includes: - Core human-like exploration system - Simple CLI interface - Text-based caching - Repository access layer - Basic configuration management</p>"},{"location":"installation/setup/#development-installation","title":"Development Installation","text":"<p>For development and contributing:</p> <pre><code>pip install -e \".[dev]\"\n</code></pre> <p>This adds: - Testing framework (pytest) - Code formatting (black) - Import sorting (isort) - Linting (flake8) - Type checking (mypy) - Pre-commit hooks</p>"},{"location":"installation/setup/#documentation-installation","title":"Documentation Installation","text":"<p>For building and serving documentation:</p> <pre><code>pip install -e \".[docs]\"\n</code></pre> <p>This adds: - MkDocs for documentation - Material theme - Mermaid diagrams - Python docstring support</p>"},{"location":"installation/setup/#complete-installation","title":"Complete Installation","text":"<p>Install everything:</p> <pre><code>pip install -e \".[all]\"\n</code></pre>"},{"location":"installation/setup/#verify-installation","title":"Verify Installation","text":""},{"location":"installation/setup/#basic-verification","title":"Basic Verification","text":"<pre><code># Check if cf command is available\ncf --help\n\n# Verify Python imports work\npython -c \"import cf; print(f'CodeFusion v{cf.__version__}')\"\n</code></pre>"},{"location":"installation/setup/#test-with-sample-repository","title":"Test with Sample Repository","text":"<pre><code># Test basic exploration\ncf explore . \"How does the simple explorer work?\"\n\n# Test with a larger repository\ncf explore /path/to/some/repo \"What is the overall architecture?\"\n</code></pre>"},{"location":"installation/setup/#initial-configuration","title":"Initial Configuration","text":""},{"location":"installation/setup/#default-configuration","title":"Default Configuration","text":"<p>CodeFusion works out of the box with sensible defaults. The default configuration is located at:</p> <pre><code>config/default/config.yaml\n</code></pre>"},{"location":"installation/setup/#custom-configuration","title":"Custom Configuration","text":"<p>Create your own configuration file:</p> <pre><code># Copy default configuration\ncp config/default/config.yaml my-config.yaml\n\n# Edit configuration\nnano my-config.yaml\n\n# Use custom configuration\ncf --config my-config.yaml explore /path/to/repo \"How does authentication work?\"\n</code></pre>"},{"location":"installation/setup/#development-setup","title":"Development Setup","text":""},{"location":"installation/setup/#additional-development-tools","title":"Additional Development Tools","text":"<pre><code># Install pre-commit hooks\npre-commit install\n\n# Run tests\npytest\n\n# Format code\nblack .\n\n# Sort imports\nisort .\n\n# Check types\nmypy cf/\n\n# Lint code\nflake8 cf/\n</code></pre>"},{"location":"installation/setup/#ide-configuration","title":"IDE Configuration","text":""},{"location":"installation/setup/#vs-code","title":"VS Code","text":"<p>Install recommended extensions:</p> <pre><code>{\n    \"recommendations\": [\n        \"ms-python.python\",\n        \"ms-python.black-formatter\",\n        \"ms-python.isort\",\n        \"ms-python.flake8\",\n        \"ms-python.mypy-type-checker\"\n    ]\n}\n</code></pre>"},{"location":"installation/setup/#pycharm","title":"PyCharm","text":"<p>Configure interpreters: 1. Go to File \u2192 Settings \u2192 Project \u2192 Python Interpreter 2. Select the virtual environment: <code>./venv/bin/python</code> 3. Enable type checking and linting</p>"},{"location":"installation/setup/#common-installation-issues","title":"Common Installation Issues","text":""},{"location":"installation/setup/#python-version-issues","title":"Python Version Issues","text":"<pre><code># Check Python version\npython --version\n\n# If you have multiple Python versions, use specific version\npython3.10 -m venv venv\n</code></pre>"},{"location":"installation/setup/#permission-issues","title":"Permission Issues","text":"<pre><code># On macOS/Linux, if you get permission errors:\nsudo chown -R $(whoami) ~/.local/lib/python3.10/site-packages/\n\n# Or use user installation\npip install --user -e .\n</code></pre>"},{"location":"installation/setup/#virtual-environment-issues","title":"Virtual Environment Issues","text":"<pre><code># Deactivate and recreate virtual environment\ndeactivate\nrm -rf venv\npython -m venv venv\nsource venv/bin/activate\npip install --upgrade pip\npip install -e .\n</code></pre>"},{"location":"installation/setup/#dependencies-issues","title":"Dependencies Issues","text":"<pre><code># Clear pip cache\npip cache purge\n\n# Upgrade pip and setuptools\npip install --upgrade pip setuptools wheel\n\n# Reinstall dependencies\npip install --force-reinstall -e .\n</code></pre>"},{"location":"installation/setup/#directory-structure","title":"Directory Structure","text":"<p>After installation, your directory structure should look like:</p> <pre><code>codefusion/\n\u251c\u2500\u2500 cf/                          # Main package\n\u2502   \u251c\u2500\u2500 core/\n\u2502   \u2502   \u2514\u2500\u2500 simple_explorer.py   # Main exploration interface\n\u2502   \u251c\u2500\u2500 agents/\n\u2502   \u2502   \u2514\u2500\u2500 human_explorer.py    # Human-like investigation\n\u2502   \u251c\u2500\u2500 run/\n\u2502   \u2502   \u2514\u2500\u2500 simple_run.py        # CLI interface\n\u2502   \u251c\u2500\u2500 aci/\n\u2502   \u2502   \u2514\u2500\u2500 repo.py              # Repository access\n\u2502   \u2514\u2500\u2500 config.py                # Configuration management\n\u251c\u2500\u2500 config/\n\u2502   \u2514\u2500\u2500 default/\n\u2502       \u2514\u2500\u2500 config.yaml          # Default configuration\n\u251c\u2500\u2500 examples/\n\u2502   \u2514\u2500\u2500 human_exploration_demo.py # Demo script\n\u251c\u2500\u2500 tests/                       # Test suite\n\u251c\u2500\u2500 docs/                        # Documentation\n\u251c\u2500\u2500 pyproject.toml               # Package configuration\n\u2514\u2500\u2500 README.md                    # Main documentation\n</code></pre>"},{"location":"installation/setup/#environment-variables","title":"Environment Variables","text":"<p>CodeFusion uses minimal environment variables:</p> <pre><code># Optional: Set default configuration path\nexport CF_CONFIG_PATH=\"/path/to/config.yaml\"\n\n# Optional: Enable debug mode\nexport CF_DEBUG=1\n\n# Optional: Set output directory\nexport CF_OUTPUT_DIR=\"/path/to/output\"\n</code></pre>"},{"location":"installation/setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/setup/#command-not-found","title":"Command Not Found","text":"<pre><code># Check if cf is in PATH\nwhich cf\n\n# If not found, try:\npip install -e . --force-reinstall\n\n# Or use python module execution\npython -m cf --help\n</code></pre>"},{"location":"installation/setup/#import-errors","title":"Import Errors","text":"<pre><code># Check if package is installed\npip list | grep codefusion\n\n# If not listed, reinstall\npip install -e .\n\n# Check for import issues\npython -c \"import cf; print('OK')\"\n</code></pre>"},{"location":"installation/setup/#configuration-errors","title":"Configuration Errors","text":"<pre><code># Validate configuration\ncf --config config.yaml summary /path/to/repo\n\n# Check YAML syntax\npython -c \"import yaml; yaml.safe_load(open('config.yaml'))\"\n</code></pre>"},{"location":"installation/setup/#performance-optimization","title":"Performance Optimization","text":""},{"location":"installation/setup/#for-large-repositories","title":"For Large Repositories","text":"<pre><code># Create optimized configuration\ncat &gt; large-repo-config.yaml &lt;&lt; 'EOF'\nmax_file_size: 2097152  # 2MB\nmax_exploration_depth: 3\nexcluded_dirs:\n  - \".git\"\n  - \"__pycache__\"\n  - \"node_modules\"\n  - \".venv\"\n  - \"dist\"\n  - \"build\"\n  - \"target\"\n  - \"vendor\"\nEOF\n\n# Use optimized configuration\ncf --config large-repo-config.yaml explore /path/to/large/repo \"How does X work?\"\n</code></pre>"},{"location":"installation/setup/#memory-usage","title":"Memory Usage","text":"<pre><code># Monitor memory usage\n/usr/bin/time -v cf explore /path/to/repo \"How does X work?\"\n\n# For memory-constrained environments\nexport CF_MAX_FILE_SIZE=524288  # 512KB\n</code></pre>"},{"location":"installation/setup/#next-steps","title":"Next Steps","text":"<ol> <li>Try the demo: Run <code>python examples/human_exploration_demo.py</code></li> <li>Explore a repository: Use <code>cf explore /path/to/repo \"How does X work?\"</code></li> <li>Read the documentation: Check out the CLI Usage guide</li> <li>Configure for your needs: See Configuration</li> <li>Contributing: Check the development setup above</li> </ol>"},{"location":"installation/setup/#getting-help","title":"Getting Help","text":"<p>If you encounter issues:</p> <ol> <li>Check the documentation: Look through the docs/ directory</li> <li>Run diagnostics: Use <code>cf --verbose</code> for detailed output</li> <li>Check dependencies: Ensure all required packages are installed</li> <li>Test configuration: Validate your configuration files</li> <li>Create an issue: Report bugs or request features in the repository</li> </ol>"},{"location":"installation/setup/#uninstallation","title":"Uninstallation","text":"<p>To remove CodeFusion:</p> <pre><code># Uninstall package\npip uninstall codefusion\n\n# Remove virtual environment\ndeactivate\nrm -rf venv\n\n# Clean up cache (optional)\nrm -rf ~/.cache/pip/\n</code></pre>"},{"location":"usage/cli/","title":"CLI Commands","text":"<p>CodeFusion provides an AI-powered command-line interface for intelligent codebase analysis using multi-agent coordination and verbose logging.</p>"},{"location":"usage/cli/#current-command-interface","title":"Current Command Interface","text":"<pre><code># Main command interface with verbose logging\npython -m cf.run.main --verbose ask /path/to/repo \"How does routing work?\"\n\n# Example with detailed output showing agent activity\npython -m cf.run.main --verbose ask /tmp/fastapi \"Explain FastAPI and Starlette relationship\"\n</code></pre>"},{"location":"usage/cli/#system-features","title":"System Features","text":""},{"location":"usage/cli/#multi-agent-coordination","title":"\ud83e\udd16 Multi-Agent Coordination","text":"<ul> <li>SupervisorAgent: Orchestrates all agents and synthesizes responses</li> <li>CodeAgent: Analyzes source code using LLM function calling</li> <li>DocsAgent: Processes documentation and README files</li> <li>WebAgent: Integrates web search for external knowledge</li> </ul>"},{"location":"usage/cli/#verbose-logging-system","title":"\ud83d\udcdd Verbose Logging System","text":"<ul> <li>Action Planning Phases: Shows agent reasoning process</li> <li>Tool Selection Logging: Displays LLM tool choices with parameters</li> <li>Progress Tracking: Real-time visibility into system activity</li> <li>Response Time Measurement: Accurate execution timing</li> </ul>"},{"location":"usage/cli/#llm-function-calling","title":"\ud83d\udd27 LLM Function Calling","text":"<ul> <li>Dynamic Tool Selection: LLM chooses optimal tools based on context</li> <li>Conversation History: Multi-turn dialogue with context preservation</li> <li>Available Tools: <code>scan_directory</code>, <code>read_file</code>, <code>search_files</code>, <code>analyze_code</code>, <code>web_search</code></li> </ul>"},{"location":"usage/cli/#current-commands","title":"Current Commands","text":""},{"location":"usage/cli/#ask-main-analysis-command-primary-command","title":"<code>ask</code> - Main Analysis Command \u2b50 PRIMARY COMMAND","text":"<p>Ask a question about a codebase and receive detailed technical analysis with verbose logging.</p> <pre><code>python -m cf.run.main [OPTIONS] ask REPO_PATH QUESTION\n</code></pre> <p>Arguments: - <code>REPO_PATH</code>: Path to the repository to analyze - <code>QUESTION</code>: Natural language question about the codebase</p> <p>Options: - <code>--verbose, -v</code>: Enable detailed verbose logging (RECOMMENDED) - <code>--config, -c PATH</code>: Configuration file path</p> <p>Examples: <pre><code># Basic analysis with verbose logging\npython -m cf.run.main --verbose ask /tmp/fastapi \"How does routing work?\"\n\n# Analyze framework relationships\npython -m cf.run.main --verbose ask /path/to/repo \"Explain the relationship between FastAPI and Starlette\"\n\n# Understand system architecture\npython -m cf.run.main --verbose ask /path/to/repo \"What specific responsibilities does Starlette handle?\"\n</code></pre></p>"},{"location":"usage/cli/#complete-working-example","title":"Complete Working Example","text":""},{"location":"usage/cli/#input-command","title":"Input Command","text":"<pre><code>python -m cf.run.main --verbose ask /tmp/fastapi \"Explain the relationship between FastAPI and Starlette. What specific responsibilities does Starlette handle?\"\n</code></pre>"},{"location":"usage/cli/#detailed-output","title":"Detailed Output","text":"<pre><code>\ud83d\ude80 CodeFusion - Ask\n\ud83d\udcc1 /tmp/fastapi | \ud83e\udd16 code, docs, web\n==================================================\n\ud83d\udcdd [SupervisorAgent] Processing: Explain the relationship between FastAPI and Starlette...\n\n\ud83e\udde0 [SupervisorAgent] Analyzing question and building context...\n\ud83e\udd16 [SupervisorAgent] Coordinating multiple specialized agents...\n\ud83d\udd0d [SupervisorAgent] Running code analysis agent...\n\ud83c\udfaf [CodeAgent] ACTION PLANNING PHASE\n\ud83d\udcad [CodeAgent] Based on reasoning: Since there are no code files found yet, the first step is to identify and explore...\n\ud83d\udd27 [CodeAgent] Using LLM function calling for intelligent tool selection\n\ud83d\udce1 [CodeAgent] Calling LLM with function calling enabled...\n\ud83c\udfaf [CodeAgent] LLM selected tool: search_files\n\ud83d\udccb [CodeAgent] Tool arguments: {'pattern': 'FastAPI', 'file_types': ['*.py'], 'max_results': 5}\n\ud83d\udce1 [CodeAgent] Calling LLM with function calling enabled...\n\ud83c\udfaf [CodeAgent] LLM selected tool: search_documentation\n\ud83d\udccb [CodeAgent] Tool arguments: {'topic': 'FastAPI', 'framework': 'FastAPI'}\n\u2705 [SupervisorAgent] Code analysis completed\n\ud83d\udcda [SupervisorAgent] Running documentation agent...\n\ud83c\udfaf [DocsAgent] ACTION PLANNING PHASE\n\ud83d\udcad [DocsAgent] Based on reasoning: Analyzing documentation files to understand the system architecture...\n\ud83d\udd27 [DocsAgent] Using LLM function calling for intelligent tool selection\n\ud83d\udce1 [DocsAgent] Calling LLM with function calling enabled...\n\ud83c\udfaf [DocsAgent] LLM selected tool: search_files\n\ud83d\udccb [DocsAgent] Tool arguments: {'pattern': 'FastAPI and Starlette', 'file_types': ['md', 'txt'], 'max_results': 3}\n\u2705 [SupervisorAgent] Documentation analysis completed\n\ud83c\udf10 [SupervisorAgent] Running web search agent...\n\ud83c\udfaf [WebAgent] ACTION PLANNING PHASE\n\ud83d\udcad [WebAgent] Based on reasoning: Searching the web for external documentation and related information...\n\ud83d\udd27 [WebAgent] Using LLM function calling for intelligent tool selection\n\ud83d\udce1 [WebAgent] Calling LLM with function calling enabled...\n\ud83c\udfaf [WebAgent] LLM selected tool: web_search\n\ud83d\udccb [WebAgent] Tool arguments: {'query': 'relationship between FastAPI and Starlette responsibilities', 'max_results': 5}\n\u2705 [SupervisorAgent] Web search completed\n\ud83e\udd16 Consolidating results with LLM...\n============================================================\n\u2705 [SupervisorAgent] Integrated 6 insights into narrative\n\n\ud83c\udfaf Life of FastAPI: The Role of Starlette\n======================================================================\n\n\ud83c\udfd7\ufe0f **Architectural Overview:** When a developer decides to use FastAPI for building a web application, \nthe journey begins with FastAPI itself, which is a modern, fast (high-performance), web framework for \nbuilding APIs with Python 3.6+ based on standard Python type hints. The underlying technology that \nFastAPI relies on is Starlette, a lightweight ASGI (Asynchronous Server Gateway Interface) framework. \nStarlette handles several core responsibilities that are critical for the operation of FastAPI. The entry \npoint for handling HTTP requests in FastAPI typically involves the `FastAPI` class, which is defined in \na FastAPI-specific file but leverages Starlette's routing and ASGI capabilities. FastAPI uses Starlette's \ncapabilities to manage HTTP requests, responses, WebSocket support, and background tasks. For example, \nwhen an HTTP request is made to a FastAPI endpoint, Starlette's built-in routing system directs the \nrequest to the appropriate endpoint defined in the FastAPI application. This routing mechanism is \nresponsible for efficiently managing and directing requests. The actual request handling logic is \nfacilitated by FastAPI, which builds on Starlette's robust ASGI infrastructure. Once a request is \nhandled, Starlette further assists in managing responses through its middleware and exception handling \nfeatures, completing the lifecycle of a request in this framework.\n\n\ud83d\udcca **Analysis Confidence:** 75.0%\n\ud83e\udd16 **Powered by:** gpt-4o\n\ud83c\udfaf **Agents used:** 3\n\ud83d\udca1 This unified narrative traces the complete journey of how your\n   question flows through interconnected system components.\n\u23f1\ufe0f  Response time: 30.4s\n</code></pre>"},{"location":"usage/cli/#configuration","title":"Configuration","text":""},{"location":"usage/cli/#configuration-file","title":"Configuration File","text":"<p>Edit <code>cf/configs/config.yaml</code>:</p> <pre><code># LLM settings\nllm:\n  model: \"gpt-4o\"\n  api_key: \"your-openai-api-key\"  # Or use OPENAI_API_KEY env var\n  max_tokens: 1000\n  temperature: 0.7\n  provider: \"openai\"\n\n# Agent settings  \nagents:\n  supervisor:\n    enabled: true\n    max_agents: 4\n    timeout: 300\n\n  documentation:\n    enabled: true\n    file_types: [\".md\", \".rst\", \".txt\"]\n\n  codebase:\n    enabled: true\n    languages: [\"python\", \"javascript\", \"typescript\", \"java\"]\n</code></pre>"},{"location":"usage/cli/#environment-variables","title":"Environment Variables","text":"<pre><code># API key (recommended method)\nexport OPENAI_API_KEY=\"your-openai-api-key\"\n\n# Alternative model configuration\nexport CF_LLM_MODEL=\"gpt-4o\"\nexport CF_LLM_MAX_TOKENS=1000\n</code></pre>"},{"location":"usage/cli/#system-requirements","title":"System Requirements","text":"<ul> <li>Python 3.10+</li> <li>Virtual environment (<code>.venv</code> recommended)</li> <li>Valid OpenAI API key or other LLM provider</li> <li><code>litellm</code> package for LLM integration</li> </ul>"},{"location":"usage/cli/#troubleshooting","title":"Troubleshooting","text":""},{"location":"usage/cli/#common-issues","title":"Common Issues","text":"<p>API Key Problems: <pre><code># Check if API key is set\necho $OPENAI_API_KEY\n\n# Test API key validity\npython -c \"import openai; print('API key works')\"\n</code></pre></p> <p>Import Errors: <pre><code># Verify installation\npython -c \"import cf; print('CodeFusion installed')\"\n\n# Reinstall if needed\npip install -e .\n</code></pre></p> <p>LiteLLM Issues: <pre><code># Install/reinstall LiteLLM\npip install --upgrade litellm\n\n# Enable debug mode\npython -c \"import litellm; litellm._turn_on_debug()\"\n</code></pre></p>"},{"location":"usage/configuration/","title":"Configuration","text":"<p>CodeFusion provides simple configuration options to customize exploration behavior for different repositories and use cases.</p>"},{"location":"usage/configuration/#configuration-methods","title":"Configuration Methods","text":""},{"location":"usage/configuration/#1-configuration-files","title":"1. Configuration Files","text":"<p>The primary way to configure CodeFusion is through YAML configuration files:</p> <pre><code>cf --config /path/to/config.yaml explore /path/to/repo \"How does authentication work?\"\n</code></pre>"},{"location":"usage/configuration/#2-command-line-options","title":"2. Command Line Options","text":"<p>Some settings can be overridden via command line:</p> <pre><code>cf --verbose explore /path/to/repo \"How does X work?\"\n</code></pre>"},{"location":"usage/configuration/#configuration-hierarchy","title":"Configuration Hierarchy","text":"<p>Settings are applied in order of precedence (highest to lowest):</p> <ol> <li>Command line options (highest priority)</li> <li>Configuration file (specified with <code>--config</code>)</li> <li>Default values (lowest priority)</li> </ol>"},{"location":"usage/configuration/#basic-configuration","title":"Basic Configuration","text":""},{"location":"usage/configuration/#default-configuration","title":"Default Configuration","text":"<pre><code># config/default/config.yaml\nrepo_path: null\noutput_dir: \"./output\"\n\n# File filtering\nmax_file_size: 1048576  # 1MB\nexcluded_dirs:\n  - \".git\"\n  - \"__pycache__\"\n  - \"node_modules\"\n  - \".venv\"\n  - \"venv\"\nexcluded_extensions:\n  - \".pyc\"\n  - \".pyo\"\n  - \".pyd\"\n  - \".so\"\n  - \".dll\"\n  - \".exe\"\n\n# Exploration settings\nmax_exploration_depth: 5\n</code></pre>"},{"location":"usage/configuration/#configuration-options","title":"Configuration Options","text":""},{"location":"usage/configuration/#core-settings","title":"Core Settings","text":""},{"location":"usage/configuration/#repo_path","title":"<code>repo_path</code>","text":"<ul> <li>Type: String (optional)</li> <li>Default: <code>null</code></li> <li>Description: Default repository path to explore</li> </ul> <pre><code>repo_path: \"/path/to/default/repo\"\n</code></pre>"},{"location":"usage/configuration/#output_dir","title":"<code>output_dir</code>","text":"<ul> <li>Type: String</li> <li>Default: <code>\"./output\"</code></li> <li>Description: Directory for output files and cache</li> </ul> <pre><code>output_dir: \"./my-output\"\n</code></pre>"},{"location":"usage/configuration/#file-filtering","title":"File Filtering","text":""},{"location":"usage/configuration/#max_file_size","title":"<code>max_file_size</code>","text":"<ul> <li>Type: Integer</li> <li>Default: <code>1048576</code> (1MB)</li> <li>Description: Maximum file size in bytes to process</li> </ul> <pre><code>max_file_size: 2097152  # 2MB\n</code></pre>"},{"location":"usage/configuration/#excluded_dirs","title":"<code>excluded_dirs</code>","text":"<ul> <li>Type: List of strings</li> <li>Default: <code>[\".git\", \"__pycache__\", \"node_modules\", \".venv\", \"venv\"]</code></li> <li>Description: Directories to exclude from exploration</li> </ul> <pre><code>excluded_dirs:\n  - \".git\"\n  - \"__pycache__\"\n  - \"node_modules\"\n  - \".venv\"\n  - \"venv\"\n  - \"dist\"\n  - \"build\"\n</code></pre>"},{"location":"usage/configuration/#excluded_extensions","title":"<code>excluded_extensions</code>","text":"<ul> <li>Type: List of strings</li> <li>Default: <code>[\".pyc\", \".pyo\", \".pyd\", \".so\", \".dll\", \".exe\"]</code></li> <li>Description: File extensions to exclude from exploration</li> </ul> <pre><code>excluded_extensions:\n  - \".pyc\"\n  - \".pyo\"\n  - \".pyd\"\n  - \".so\"\n  - \".dll\"\n  - \".exe\"\n  - \".log\"\n  - \".tmp\"\n</code></pre>"},{"location":"usage/configuration/#exploration-settings","title":"Exploration Settings","text":""},{"location":"usage/configuration/#max_exploration_depth","title":"<code>max_exploration_depth</code>","text":"<ul> <li>Type: Integer</li> <li>Default: <code>5</code></li> <li>Description: Maximum depth for recursive exploration</li> </ul> <pre><code>max_exploration_depth: 10\n</code></pre>"},{"location":"usage/configuration/#configuration-examples","title":"Configuration Examples","text":""},{"location":"usage/configuration/#basic-repository-configuration","title":"Basic Repository Configuration","text":"<pre><code># basic-config.yaml\nrepo_path: \"/path/to/my/project\"\noutput_dir: \"./codefusion-output\"\nmax_file_size: 1048576  # 1MB\nmax_exploration_depth: 5\n</code></pre>"},{"location":"usage/configuration/#large-repository-configuration","title":"Large Repository Configuration","text":"<pre><code># large-repo-config.yaml\nrepo_path: \"/path/to/large/project\"\noutput_dir: \"./large-repo-output\"\nmax_file_size: 2097152  # 2MB\nmax_exploration_depth: 3\n\n# Exclude additional directories for performance\nexcluded_dirs:\n  - \".git\"\n  - \"__pycache__\"\n  - \"node_modules\"\n  - \".venv\"\n  - \"venv\"\n  - \"dist\"\n  - \"build\"\n  - \"target\"\n  - \"out\"\n  - \"bin\"\n  - \"obj\"\n  - \"vendor\"\n  - \"external\"\n  - \"third_party\"\n\n# Exclude more file types\nexcluded_extensions:\n  - \".pyc\"\n  - \".pyo\"\n  - \".pyd\"\n  - \".so\"\n  - \".dll\"\n  - \".exe\"\n  - \".log\"\n  - \".tmp\"\n  - \".cache\"\n  - \".min.js\"\n  - \".min.css\"\n  - \".map\"\n</code></pre>"},{"location":"usage/configuration/#performance-optimized-configuration","title":"Performance-Optimized Configuration","text":"<pre><code># performance-config.yaml\nrepo_path: \"/path/to/project\"\noutput_dir: \"./fast-output\"\nmax_file_size: 524288  # 512KB (smaller files only)\nmax_exploration_depth: 3\n\n# Minimal exclusions for speed\nexcluded_dirs:\n  - \".git\"\n  - \"__pycache__\"\n  - \"node_modules\"\n  - \".venv\"\n\nexcluded_extensions:\n  - \".pyc\"\n  - \".pyo\"\n  - \".pyd\"\n</code></pre>"},{"location":"usage/configuration/#using-configuration-files","title":"Using Configuration Files","text":""},{"location":"usage/configuration/#create-configuration","title":"Create Configuration","text":"<pre><code># Create a new configuration file\ncp config/default/config.yaml my-config.yaml\n\n# Edit configuration\nnano my-config.yaml\n\n# Use configuration\ncf --config my-config.yaml explore /path/to/repo \"How does authentication work?\"\n</code></pre>"},{"location":"usage/configuration/#configuration-validation","title":"Configuration Validation","text":"<pre><code># Test configuration\ncf --config my-config.yaml summary /path/to/repo\n\n# Validate YAML syntax\npython -c \"import yaml; yaml.safe_load(open('my-config.yaml'))\"\n</code></pre>"},{"location":"usage/configuration/#repository-specific-configuration","title":"Repository-Specific Configuration","text":""},{"location":"usage/configuration/#project-specific-settings","title":"Project-Specific Settings","text":"<pre><code># web-app-config.yaml\nrepo_path: \"/path/to/web/app\"\noutput_dir: \"./web-app-analysis\"\nmax_file_size: 1048576\n\n# Web-specific exclusions\nexcluded_dirs:\n  - \".git\"\n  - \"__pycache__\"\n  - \"node_modules\"\n  - \".venv\"\n  - \"dist\"\n  - \"build\"\n  - \"public\"\n  - \"static\"\n\nexcluded_extensions:\n  - \".pyc\"\n  - \".pyo\"\n  - \".pyd\"\n  - \".min.js\"\n  - \".min.css\"\n  - \".map\"\n  - \".ico\"\n  - \".png\"\n  - \".jpg\"\n  - \".jpeg\"\n  - \".gif\"\n  - \".svg\"\n</code></pre>"},{"location":"usage/configuration/#language-specific-settings","title":"Language-Specific Settings","text":"<pre><code># python-project-config.yaml\nrepo_path: \"/path/to/python/project\"\noutput_dir: \"./python-analysis\"\nmax_file_size: 1048576\n\n# Python-specific exclusions\nexcluded_dirs:\n  - \".git\"\n  - \"__pycache__\"\n  - \".venv\"\n  - \"venv\"\n  - \"env\"\n  - \".pytest_cache\"\n  - \".mypy_cache\"\n  - \"dist\"\n  - \"build\"\n  - \"*.egg-info\"\n\nexcluded_extensions:\n  - \".pyc\"\n  - \".pyo\"\n  - \".pyd\"\n  - \".so\"\n  - \".dll\"\n  - \".exe\"\n</code></pre>"},{"location":"usage/configuration/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"usage/configuration/#configuration-templates","title":"Configuration Templates","text":"<p>Create template configurations for different scenarios:</p> <pre><code># Create templates directory\nmkdir -p config/templates\n\n# Create template configurations\ncat &gt; config/templates/web-app.yaml &lt;&lt; 'EOF'\n# Web application configuration\nmax_file_size: 1048576\nexcluded_dirs:\n  - \".git\"\n  - \"__pycache__\"\n  - \"node_modules\"\n  - \".venv\"\n  - \"dist\"\n  - \"build\"\n  - \"public\"\n  - \"static\"\nmax_exploration_depth: 5\nEOF\n\ncat &gt; config/templates/large-repo.yaml &lt;&lt; 'EOF'\n# Large repository configuration\nmax_file_size: 2097152\nexcluded_dirs:\n  - \".git\"\n  - \"__pycache__\"\n  - \"node_modules\"\n  - \".venv\"\n  - \"venv\"\n  - \"dist\"\n  - \"build\"\n  - \"target\"\n  - \"out\"\n  - \"bin\"\n  - \"obj\"\n  - \"vendor\"\nmax_exploration_depth: 3\nEOF\n\n# Use templates\ncf --config config/templates/web-app.yaml explore /path/to/web/app \"How does authentication work?\"\n</code></pre>"},{"location":"usage/configuration/#dynamic-configuration","title":"Dynamic Configuration","text":"<pre><code>#!/bin/bash\n# generate-config.sh - Generate configuration based on repository type\n\nREPO_PATH=\"$1\"\nCONFIG_FILE=\"generated-config.yaml\"\n\n# Detect repository type\nif [ -f \"$REPO_PATH/package.json\" ]; then\n    echo \"Detected Node.js project\"\n    cp config/templates/web-app.yaml \"$CONFIG_FILE\"\nelif [ -f \"$REPO_PATH/requirements.txt\" ] || [ -f \"$REPO_PATH/setup.py\" ]; then\n    echo \"Detected Python project\"\n    cp config/templates/python-project.yaml \"$CONFIG_FILE\"\nelse\n    echo \"Using default configuration\"\n    cp config/default/config.yaml \"$CONFIG_FILE\"\nfi\n\n# Set repository path\nsed -i \"s|repo_path: null|repo_path: \\\"$REPO_PATH\\\"|\" \"$CONFIG_FILE\"\n\necho \"Generated configuration: $CONFIG_FILE\"\n</code></pre>"},{"location":"usage/configuration/#troubleshooting-configuration","title":"Troubleshooting Configuration","text":""},{"location":"usage/configuration/#common-issues","title":"Common Issues","text":"<p>Invalid YAML syntax: <pre><code># Check YAML syntax\npython -c \"import yaml; yaml.safe_load(open('config.yaml'))\"\n</code></pre></p> <p>Configuration not found: <pre><code># Check file exists\nls -la config.yaml\n\n# Use absolute path\ncf --config /full/path/to/config.yaml explore /path/to/repo \"How does X work?\"\n</code></pre></p> <p>Permission issues: <pre><code># Check file permissions\nls -la config.yaml\n\n# Fix permissions\nchmod 644 config.yaml\n</code></pre></p>"},{"location":"usage/configuration/#debug-configuration","title":"Debug Configuration","text":"<pre><code># Test configuration with verbose output\ncf --verbose --config config.yaml summary /path/to/repo\n\n# Validate configuration file\npython -c \"\nimport yaml\nfrom cf.config import CfConfig\nconfig = CfConfig.from_file('config.yaml')\nconfig.validate()\nprint('Configuration is valid')\n\"\n</code></pre>"},{"location":"usage/configuration/#best-practices","title":"Best Practices","text":""},{"location":"usage/configuration/#configuration-management","title":"Configuration Management","text":"<ol> <li>Use version control for configuration files</li> <li>Create project-specific configurations for different repositories</li> <li>Use templates for common scenarios</li> <li>Document custom configurations with comments</li> <li>Validate configurations before use</li> </ol>"},{"location":"usage/configuration/#performance-optimization","title":"Performance Optimization","text":"<ol> <li>Exclude unnecessary directories to improve speed</li> <li>Set appropriate file size limits for your use case</li> <li>Use smaller exploration depths for large repositories</li> <li>Test configurations with sample repositories first</li> </ol>"},{"location":"usage/configuration/#security-considerations","title":"Security Considerations","text":"<ol> <li>Never commit sensitive information in configuration files</li> <li>Use appropriate file permissions (644 for config files)</li> <li>Be careful with excluded directories - don't exclude important code</li> </ol>"},{"location":"usage/configuration/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about CLI Usage</li> <li>See Usage Examples</li> <li>Check the Installation Guide</li> </ul>"},{"location":"usage/examples/","title":"Usage Examples","text":"<p>This page shows practical examples of using CodeFusion for code exploration.</p>"},{"location":"usage/examples/#basic-exploration","title":"Basic Exploration","text":""},{"location":"usage/examples/#explore-authentication","title":"Explore Authentication","text":"<pre><code># Start with a broad question\ncf explore /path/to/webapp \"How does authentication work?\"\n\n# Continue with specific questions\ncf continue /path/to/webapp \"How are passwords validated?\" --previous \"How does authentication work?\"\n\n# Explore session management\ncf continue /path/to/webapp \"How are user sessions managed?\" --previous \"How are passwords validated?\"\n</code></pre>"},{"location":"usage/examples/#explore-api-structure","title":"Explore API Structure","text":"<pre><code># Understand API endpoints\ncf explore /path/to/api \"What are the main API endpoints?\"\n\n# Dive into validation\ncf continue /path/to/api \"How is input validation handled?\" --previous \"What are the main API endpoints?\"\n\n# Check error handling\ncf continue /path/to/api \"How are API errors handled?\" --previous \"How is input validation handled?\"\n</code></pre>"},{"location":"usage/examples/#common-investigation-patterns","title":"Common Investigation Patterns","text":""},{"location":"usage/examples/#understanding-new-codebase","title":"Understanding New Codebase","text":"<pre><code># Start with architecture overview\ncf explore /path/to/project \"What is the overall architecture?\"\n\n# Explore main entry points\ncf continue /path/to/project \"How does the application start up?\" --previous \"What is the overall architecture?\"\n\n# Check configuration\ncf continue /path/to/project \"How is the application configured?\" --previous \"How does the application start up?\"\n</code></pre>"},{"location":"usage/examples/#debugging-issues","title":"Debugging Issues","text":"<pre><code># Explore error handling\ncf explore /path/to/project \"How are errors handled and logged?\"\n\n# Check testing approach\ncf continue /path/to/project \"What testing strategies are used?\" --previous \"How are errors handled and logged?\"\n\n# Understand deployment\ncf continue /path/to/project \"How is the application deployed?\" --previous \"What testing strategies are used?\"\n</code></pre>"},{"location":"usage/examples/#advanced-usage","title":"Advanced Usage","text":""},{"location":"usage/examples/#configuration-for-large-repositories","title":"Configuration for Large Repositories","text":"<pre><code># Create optimized config for large repos\ncat &gt; large-repo-config.yaml &lt;&lt; 'EOF'\nmax_file_size: 2097152  # 2MB\nmax_exploration_depth: 3\nexcluded_dirs:\n  - \".git\"\n  - \"__pycache__\"\n  - \"node_modules\"\n  - \".venv\"\n  - \"dist\"\n  - \"build\"\n  - \"vendor\"\n  - \"target\"\nEOF\n\n# Use optimized config\ncf --config large-repo-config.yaml explore /path/to/large/repo \"How does the core system work?\"\n</code></pre>"},{"location":"usage/examples/#batch-exploration","title":"Batch Exploration","text":"<pre><code>#!/bin/bash\n# Explore multiple related questions\nREPO=\"/path/to/project\"\nQUESTIONS=(\n    \"How does authentication work?\"\n    \"What are the main API endpoints?\"\n    \"How is data validation handled?\"\n    \"What testing frameworks are used?\"\n    \"How is the application deployed?\"\n)\n\nfor question in \"${QUESTIONS[@]}\"; do\n    echo \"Exploring: $question\"\n    cf explore \"$REPO\" \"$question\"\n    echo \"---\"\ndone\n</code></pre>"},{"location":"usage/examples/#building-understanding-incrementally","title":"Building Understanding Incrementally","text":"<pre><code># Start broad\ncf explore /path/to/ecommerce \"What is the overall architecture?\"\n\n# Narrow down to specific domains\ncf continue /path/to/ecommerce \"How does the shopping cart work?\" --previous \"What is the overall architecture?\"\n\n# Get specific implementation details\ncf continue /path/to/ecommerce \"How are cart items persisted?\" --previous \"How does the shopping cart work?\"\n\n# Explore related functionality\ncf continue /path/to/ecommerce \"How does checkout process work?\" --previous \"How are cart items persisted?\"\n</code></pre>"},{"location":"usage/examples/#language-specific-examples","title":"Language-Specific Examples","text":""},{"location":"usage/examples/#python-projects","title":"Python Projects","text":"<pre><code># Explore Python project structure\ncf explore /path/to/python/project \"How is the package structure organized?\"\n\n# Check dependency management\ncf continue /path/to/python/project \"How are dependencies managed?\" --previous \"How is the package structure organized?\"\n\n# Understand testing\ncf continue /path/to/python/project \"How are tests organized and run?\" --previous \"How are dependencies managed?\"\n</code></pre>"},{"location":"usage/examples/#javascriptnodejs-projects","title":"JavaScript/Node.js Projects","text":"<pre><code># Explore Node.js application\ncf explore /path/to/node/app \"How is the Express.js application structured?\"\n\n# Check middleware\ncf continue /path/to/node/app \"What middleware is used?\" --previous \"How is the Express.js application structured?\"\n\n# Explore frontend build\ncf continue /path/to/node/app \"How is the frontend built and served?\" --previous \"What middleware is used?\"\n</code></pre>"},{"location":"usage/examples/#web-applications","title":"Web Applications","text":"<pre><code># Explore web app architecture\ncf explore /path/to/webapp \"How is the MVC pattern implemented?\"\n\n# Check database interactions\ncf continue /path/to/webapp \"How does the application interact with the database?\" --previous \"How is the MVC pattern implemented?\"\n\n# Explore frontend integration\ncf continue /path/to/webapp \"How is the frontend integrated with the backend?\" --previous \"How does the application interact with the database?\"\n</code></pre>"},{"location":"usage/examples/#performance-tips","title":"Performance Tips","text":""},{"location":"usage/examples/#effective-questions","title":"Effective Questions","text":"<p>Good questions: - \"How does authentication work?\" - \"What are the main API endpoints?\" - \"How is data stored and retrieved?\" - \"What testing strategies are used?\"</p> <p>Less effective questions: - \"Tell me about this code\" (too vague) - \"What is line 42 in file.py?\" (too specific) - \"Is this code good?\" (subjective)</p>"},{"location":"usage/examples/#exploration-strategies","title":"Exploration Strategies","text":"<p>Start broad, then narrow: <pre><code># 1. Get overview\ncf explore /path/to/repo \"What is the overall architecture?\"\n\n# 2. Focus on area of interest\ncf continue /path/to/repo \"How does the authentication system work?\" --previous \"What is the overall architecture?\"\n\n# 3. Get implementation details\ncf continue /path/to/repo \"How are JWT tokens validated?\" --previous \"How does the authentication system work?\"\n</code></pre></p> <p>Use the cache effectively: <pre><code># Related questions benefit from cache\ncf explore /path/to/repo \"How does authentication work?\"\ncf continue /path/to/repo \"How are user sessions managed?\" --previous \"How does authentication work?\"\ncf continue /path/to/repo \"How are passwords validated?\" --previous \"How are user sessions managed?\"\n</code></pre></p>"},{"location":"usage/examples/#integration-examples","title":"Integration Examples","text":""},{"location":"usage/examples/#vs-code-integration","title":"VS Code Integration","text":"<p>Create a VS Code task:</p> <pre><code>// .vscode/tasks.json\n{\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"label\": \"CodeFusion Explore\",\n            \"type\": \"shell\",\n            \"command\": \"cf\",\n            \"args\": [\"explore\", \"${workspaceFolder}\", \"${input:question}\"],\n            \"group\": \"build\",\n            \"presentation\": {\n                \"echo\": true,\n                \"reveal\": \"always\",\n                \"focus\": false,\n                \"panel\": \"shared\"\n            }\n        }\n    ],\n    \"inputs\": [\n        {\n            \"id\": \"question\",\n            \"description\": \"Question to explore\",\n            \"default\": \"How does authentication work?\",\n            \"type\": \"promptString\"\n        }\n    ]\n}\n</code></pre>"},{"location":"usage/examples/#shell-aliases","title":"Shell Aliases","text":"<p>Add to your <code>.bashrc</code> or <code>.zshrc</code>:</p> <pre><code># CodeFusion aliases\nalias cfx='cf explore'\nalias cfa='cf ask'\nalias cfc='cf continue'\nalias cfs='cf summary'\n\n# Usage\ncfx /path/to/repo \"How does login work?\"\ncfa /path/to/repo \"What are the API endpoints?\"\ncfc /path/to/repo \"How is validation handled?\" --previous \"What are the API endpoints?\"\n</code></pre>"},{"location":"usage/examples/#troubleshooting-examples","title":"Troubleshooting Examples","text":""},{"location":"usage/examples/#common-issues","title":"Common Issues","text":"<p>Slow exploration: <pre><code># Create performance config\ncat &gt; fast-config.yaml &lt;&lt; 'EOF'\nmax_file_size: 524288  # 512KB\nmax_exploration_depth: 3\nexcluded_dirs:\n  - \".git\"\n  - \"__pycache__\"\n  - \"node_modules\"\n  - \".venv\"\n  - \"dist\"\n  - \"build\"\nEOF\n\ncf --config fast-config.yaml explore /path/to/repo \"How does X work?\"\n</code></pre></p> <p>Permission issues: <pre><code># Check permissions\nls -la /path/to/repo\n\n# Fix if needed\nchmod -R 755 /path/to/repo\n</code></pre></p> <p>Configuration errors: <pre><code># Test configuration\ncf --config my-config.yaml summary /path/to/repo\n\n# Validate YAML\npython -c \"import yaml; yaml.safe_load(open('my-config.yaml'))\"\n</code></pre></p>"},{"location":"usage/examples/#llm-function-calling-examples","title":"LLM Function Calling Examples","text":""},{"location":"usage/examples/#basic-llm-driven-exploration","title":"Basic LLM-Driven Exploration","text":"<pre><code># LLM selects optimal tools for FastAPI exploration\npython -m cf.run.simple_run explore /path/to/fastapi \"How does request routing work?\"\n\n# LLM-powered architectural analysis\npython -m cf.run.simple_run explore /path/to/project \"Life of an API Request\"\n\n# Dynamic tool selection based on context\npython -m cf.run.simple_run explore /path/to/microservices \"How do services communicate?\"\n</code></pre>"},{"location":"usage/examples/#llm-function-calling-with-life-of-x-narratives","title":"LLM Function Calling with Life of X Narratives","text":"<pre><code># Generate technical architectural stories\npython -m cf.run.simple_run explore /path/to/webapp \"Life of User Authentication\"\n\n# Follow data through the system\npython -m cf.run.simple_run explore /path/to/ecommerce \"Life of a Shopping Cart Item\"\n\n# Trace request flows\npython -m cf.run.simple_run explore /path/to/api \"Life of a Database Query\"\n</code></pre>"},{"location":"usage/examples/#configuration-for-llm-function-calling","title":"Configuration for LLM Function Calling","text":"<pre><code># llm-config.yaml\nllm:\n  model: \"claude-3-sonnet-20240229\"  # or gpt-4, together_ai/meta-llama/...\n  api_key: \"${CF_LLM_API_KEY}\"\n  max_tokens: 2000\n  temperature: 0.7\n  provider: \"anthropic\"\n\n# ReAct agent settings\nagents:\n  code_architecture:\n    llm_reasoning_enabled: true\n    llm_function_calling_enabled: true\n    fallback_to_hardcoded: true\n</code></pre>"},{"location":"usage/examples/#environment-variables-for-llm-integration","title":"Environment Variables for LLM Integration","text":"<pre><code># OpenAI Configuration\nexport CF_LLM_MODEL=gpt-4\nexport CF_LLM_API_KEY=your-openai-api-key\n\n# Anthropic Configuration  \nexport CF_LLM_MODEL=claude-3-sonnet-20240229\nexport CF_LLM_API_KEY=your-anthropic-api-key\n\n# LLaMA via Together AI\nexport CF_LLM_MODEL=together_ai/meta-llama/Llama-2-7b-chat-hf\nexport CF_LLM_API_KEY=your-together-ai-key\n\n# Run with LLM function calling\npython -m cf.run.simple_run explore /path/to/repo \"How does authentication work?\"\n</code></pre>"},{"location":"usage/examples/#advanced-llm-function-calling-examples","title":"Advanced LLM Function Calling Examples","text":"<pre><code># Complex architectural analysis with LLM tool selection\npython -m cf.run.simple_run explore /path/to/distributed/system \"How does the system handle distributed transactions?\"\n\n# LLM-driven security analysis\npython -m cf.run.simple_run explore /path/to/webapp \"How are security vulnerabilities prevented?\"\n\n# Performance analysis with intelligent tool selection\npython -m cf.run.simple_run explore /path/to/high/traffic/app \"How does the system handle high load?\"\n</code></pre>"},{"location":"usage/examples/#multi-agent-framework-examples","title":"Multi-Agent Framework Examples","text":""},{"location":"usage/examples/#comprehensive-repository-analysis","title":"Comprehensive Repository Analysis","text":"<pre><code># Run comprehensive multi-agent analysis with LLM function calling\npython -m cf.run.simple_run analyze /path/to/repo --focus=all\n\n# Focus on specific areas with LLM-driven tool selection\npython -m cf.run.simple_run analyze /path/to/repo --focus=docs\npython -m cf.run.simple_run analyze /path/to/repo --focus=code_arch\n</code></pre>"},{"location":"usage/examples/#advanced-multi-agent-workflows","title":"Advanced Multi-Agent Workflows","text":"<pre><code># Full comprehensive analysis\ncf analyze /path/to/large/project --focus all\n\n# Documentation-focused analysis\ncf analyze /path/to/project --focus docs\n\n# Code structure analysis\ncf analyze /path/to/project --focus code\n\n# Architecture mapping\ncf analyze /path/to/project --focus arch\n</code></pre>"},{"location":"usage/examples/#configuration-for-multi-agent-system","title":"Configuration for Multi-Agent System","text":"<pre><code># multi-agent-config.yaml\nagents:\n  supervisor:\n    enabled: true\n    max_agents: 6\n    timeout: 600  # 10 minutes\n\n  documentation:\n    enabled: true\n    file_types: [\".md\", \".rst\", \".txt\", \".adoc\", \".wiki\"]\n    max_files: 100\n\n  codebase:\n    enabled: true\n    languages: [\"python\", \"javascript\", \"typescript\", \"java\", \"go\", \"rust\", \"c\", \"cpp\", \"kotlin\", \"swift\"]\n    max_files: 500\n\n  architecture:\n    enabled: true\n    diagram_types: [\"mermaid\", \"plantuml\", \"graphviz\", \"drawio\"]\n    max_components: 200\n\n  summary:\n    enabled: true\n    max_sections: 15\n    cheat_sheet_format: \"markdown\"\n\nerror_recovery:\n  enabled: true\n  max_retries: 5\n  circuit_breaker_threshold: 8\n  loop_detection_window: 15\n</code></pre>"},{"location":"usage/examples/#usage-with-custom-configuration","title":"Usage with Custom Configuration","text":"<pre><code># Use custom multi-agent config\ncf --config multi-agent-config.yaml analyze /path/to/enterprise/repo\n\n# Generate comprehensive documentation\ncf --config multi-agent-config.yaml analyze /path/to/repo --focus docs &gt; project-analysis.md\n\n# Architecture mapping for complex systems\ncf --config multi-agent-config.yaml analyze /path/to/microservices --focus arch\n</code></pre>"},{"location":"usage/examples/#integration-with-cicd","title":"Integration with CI/CD","text":"<pre><code># .github/workflows/codefusion-analysis.yml\nname: CodeFusion Analysis\non:\n  push:\n    branches: [main, develop]\n  pull_request:\n    branches: [main]\n\njobs:\n  analyze:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Setup Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.11'\n      - name: Install CodeFusion\n        run: pip install codefusion\n      - name: Run Multi-Agent Analysis\n        run: |\n          cf analyze . --focus all &gt; analysis-report.md\n          cf analyze . --focus code &gt; code-structure.md\n      - name: Upload Analysis\n        uses: actions/upload-artifact@v3\n        with:\n          name: codefusion-analysis\n          path: |\n            analysis-report.md\n            code-structure.md\n</code></pre>"},{"location":"usage/examples/#error-recovery-examples","title":"Error Recovery Examples","text":"<pre><code># Enable verbose error reporting\ncf --verbose analyze /path/to/complex/repo\n\n# Custom error recovery settings\ncat &gt; error-config.yaml &lt;&lt; 'EOF'\nerror_recovery:\n  enabled: true\n  max_retries: 3\n  circuit_breaker_threshold: 5\n  loop_detection_window: 10\nagents:\n  supervisor:\n    timeout: 300\nEOF\n\ncf --config error-config.yaml analyze /path/to/repo\n</code></pre>"},{"location":"usage/examples/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about CLI Commands</li> <li>Understand Configuration</li> <li>Check the Installation Guide</li> <li>Explore Multi-Agent Architecture</li> </ul>"},{"location":"workflows/llm-function-calling/","title":"LLM Function Calling Workflow","text":"<p>This document describes the detailed workflow for LLM Function Calling in CodeFusion, where AI selects tools by generating structured output for dynamic exploration.</p>"},{"location":"workflows/llm-function-calling/#overview","title":"Overview","text":"<p>The LLM Function Calling system in the clean <code>cf/</code> package revolutionizes how ReAct agents select and execute tools by letting the LLM analyze context and choose optimal tools with parameters, rather than using hardcoded decision logic.</p>"},{"location":"workflows/llm-function-calling/#clean-package-architecture","title":"Clean Package Architecture","text":"<p>The workflow operates within the clean <code>cf/</code> package structure:</p> <pre><code>cf/\n\u251c\u2500\u2500 agents/           # Multi-agent system with LLM function calling\n\u2502   \u251c\u2500\u2500 base.py      # Common agent functionality\n\u2502   \u251c\u2500\u2500 supervisor.py # Orchestrates function calling across agents\n\u2502   \u251c\u2500\u2500 code.py      # Code analysis with LLM tool selection\n\u2502   \u251c\u2500\u2500 docs.py      # Documentation processing with smart tool choice\n\u2502   \u2514\u2500\u2500 web.py       # Web search with context-aware queries\n\u251c\u2500\u2500 tools/           # Tool ecosystem for LLM function calling\n\u2502   \u251c\u2500\u2500 registry.py  # Schema management and tool dispatch\n\u2502   \u251c\u2500\u2500 repo_tools.py # File system operations\n\u2502   \u251c\u2500\u2500 llm_tools.py  # AI-powered analysis tools\n\u2502   \u2514\u2500\u2500 web_tools.py  # External search capabilities\n\u251c\u2500\u2500 llm/             # LLM integration layer\n\u2502   \u2514\u2500\u2500 client.py    # LiteLLM multi-provider interface\n\u2514\u2500\u2500 configs/         # Configuration management\n    \u251c\u2500\u2500 config.yaml  # LLM and function calling settings\n    \u2514\u2500\u2500 config_mgr.py # Configuration loading\n</code></pre>"},{"location":"workflows/llm-function-calling/#workflow-diagram","title":"Workflow Diagram","text":"<pre><code>graph TB\n    %% Agent Context Building\n    subgraph CONTEXT [\"\ud83d\udd0d Context Building\"]\n        AGENT_STATE[Agent State&lt;br/&gt;\u2022 Goal&lt;br/&gt;\u2022 Iteration&lt;br/&gt;\u2022 Files Found&lt;br/&gt;\u2022 Components]\n        REASONING[Previous Reasoning&lt;br/&gt;\u2022 LLM Analysis&lt;br/&gt;\u2022 Context Summary]\n        OBSERVATIONS[Recent Observations&lt;br/&gt;\u2022 Tool Results&lt;br/&gt;\u2022 Success/Failures]\n        MEMORY[Exploration Memory&lt;br/&gt;\u2022 Question Analysis&lt;br/&gt;\u2022 Strategy Planning]\n    end\n\n    %% Clean LLM Integration (cf/llm/)\n    subgraph LLM_PROCESS [\"\ud83e\udde0 cf/llm/ - LLM Integration\"]\n        LLM_INIT[cf/llm/client.py&lt;br/&gt;\u2022 LiteLLM Client&lt;br/&gt;\u2022 Multi-Provider Support&lt;br/&gt;\u2022 API Key Validation]\n        LLM_INPUT[LLM Input&lt;br/&gt;Context + Tool Schemas + Memory]\n        LLM_ANALYSIS[LLM Analysis&lt;br/&gt;\u2022 Context Understanding&lt;br/&gt;\u2022 Goal Assessment&lt;br/&gt;\u2022 Tool Evaluation&lt;br/&gt;\u2022 Strategy Optimization]\n        TOOL_SELECTION[Tool Selection&lt;br/&gt;\u2022 Function Name&lt;br/&gt;\u2022 Parameters&lt;br/&gt;\u2022 Reasoning&lt;br/&gt;\u2022 Fallback Logic]\n        JSON_OUTPUT[JSON Output&lt;br/&gt;{\"tool_calls\": [...]}]\n        FALLBACK[Graceful Fallback&lt;br/&gt;\u2022 Simple LLM&lt;br/&gt;\u2022 Default Strategies&lt;br/&gt;\u2022 Error Recovery]\n    end\n\n    %% Clean Tool Registry &amp; Execution (cf/tools/)\n    subgraph EXECUTION [\"\u2699\ufe0f cf/tools/ - Tool Ecosystem\"]\n        TOOL_REGISTRY[cf/tools/registry.py&lt;br/&gt;\u2022 Function Schemas&lt;br/&gt;\u2022 Execution Mapping&lt;br/&gt;\u2022 Clean Tool Dispatch]\n        TOOL_VALIDATION[Parameter Validation&lt;br/&gt;\u2022 Schema Check&lt;br/&gt;\u2022 Type Validation&lt;br/&gt;\u2022 Error Handling]\n        REPO_TOOLS[cf/tools/repo_tools.py&lt;br/&gt;\u2022 scan_directory&lt;br/&gt;\u2022 read_file&lt;br/&gt;\u2022 search_files]\n        LLM_TOOLS[cf/tools/llm_tools.py&lt;br/&gt;\u2022 analyze_code&lt;br/&gt;\u2022 llm_reasoning&lt;br/&gt;\u2022 code_analysis]\n        WEB_TOOLS[cf/tools/web_tools.py&lt;br/&gt;\u2022 web_search&lt;br/&gt;\u2022 external_knowledge]\n        RESULT_FORMATTING[Result Formatting&lt;br/&gt;\u2022 Success/Error&lt;br/&gt;\u2022 Structured Data&lt;br/&gt;\u2022 Cache Storage]\n        ERROR_RECOVERY[Error Recovery&lt;br/&gt;\u2022 Circuit Breakers&lt;br/&gt;\u2022 Retry Logic&lt;br/&gt;\u2022 Fallback Tools]\n    end\n\n    %% Clean Configuration (cf/configs/)\n    subgraph CONFIG [\"\u2699\ufe0f cf/configs/ - Configuration\"]\n        CONFIG_MGR[cf/configs/config_mgr.py&lt;br/&gt;\u2022 Configuration Loading&lt;br/&gt;\u2022 Environment Variables&lt;br/&gt;\u2022 YAML Processing]\n        CONFIG_FILE[cf/configs/config.yaml&lt;br/&gt;\u2022 LLM Settings&lt;br/&gt;\u2022 Agent Configuration&lt;br/&gt;\u2022 Tool Parameters]\n        VENV[Virtual Environment&lt;br/&gt;\u2022 LiteLLM Dependencies&lt;br/&gt;\u2022 Isolated Runtime]\n        IMPORT_SYSTEM[Clean Imports&lt;br/&gt;\u2022 cf.* Package Structure&lt;br/&gt;\u2022 Absolute Imports&lt;br/&gt;\u2022 Modular Design]\n    end\n\n    %% Enhanced Flow Connections\n    AGENT_STATE --&gt; LLM_INPUT\n    REASONING --&gt; LLM_INPUT\n    OBSERVATIONS --&gt; LLM_INPUT\n    MEMORY --&gt; LLM_INPUT\n\n    LLM_INIT --&gt; LLM_ANALYSIS\n    LLM_INPUT --&gt; LLM_ANALYSIS\n    LLM_ANALYSIS --&gt; TOOL_SELECTION\n    TOOL_SELECTION --&gt; JSON_OUTPUT\n\n    JSON_OUTPUT --&gt; TOOL_REGISTRY\n    TOOL_REGISTRY --&gt; TOOL_VALIDATION\n    TOOL_VALIDATION --&gt; REPO_TOOLS\n    TOOL_VALIDATION --&gt; LLM_TOOLS\n    TOOL_VALIDATION --&gt; WEB_TOOLS\n    REPO_TOOLS --&gt; RESULT_FORMATTING\n    LLM_TOOLS --&gt; RESULT_FORMATTING\n    WEB_TOOLS --&gt; RESULT_FORMATTING\n    RESULT_FORMATTING --&gt; ERROR_RECOVERY\n\n    %% Fallback Flow\n    LLM_ANALYSIS --&gt; FALLBACK\n    FALLBACK --&gt; TOOL_SELECTION\n\n    %% Clean Configuration Dependencies\n    CONFIG_MGR --&gt; LLM_INIT\n    CONFIG_FILE --&gt; CONFIG_MGR\n    VENV --&gt; LLM_INIT\n    IMPORT_SYSTEM --&gt; TOOL_REGISTRY\n\n    %% Styling\n    classDef context fill:#3b4d66,stroke:#2d3748,stroke-width:2px,color:#f7fafc\n    classDef llm fill:#8b5a3c,stroke:#6b4423,stroke-width:3px,color:#f7fafc\n    classDef execution fill:#2d5a3d,stroke:#1a4d2e,stroke-width:2px,color:#f7fafc\n\n    class CONTEXT,AGENT_STATE,REASONING,OBSERVATIONS context\n    class LLM_PROCESS,LLM_INPUT,LLM_ANALYSIS,TOOL_SELECTION,JSON_OUTPUT llm\n    class EXECUTION,TOOL_REGISTRY,TOOL_VALIDATION,TOOL_EXEC,RESULT_FORMATTING execution</code></pre>"},{"location":"workflows/llm-function-calling/#detailed-process-flow","title":"Detailed Process Flow","text":""},{"location":"workflows/llm-function-calling/#phase-1-context-building","title":"Phase 1: Context Building","text":"<ol> <li> <p>Agent State Collection <pre><code>context_parts = [\n    f\"Goal: {self.state.goal}\",\n    f\"Iteration: {self.state.iteration}/{self.state.max_iterations}\",\n    f\"Code files found: {len(self.code_files)}\",\n    f\"Files analyzed: {len(self.analyzed_files)}\",\n    f\"Components identified: {len(self.components)}\"\n]\n</code></pre></p> </li> <li> <p>Reasoning Integration <pre><code># Using cf/llm/client.py\nfrom cf.llm.client import get_llm_client\n\nllm_client = get_llm_client()\nreasoning_result = llm_client.reasoning(\n    context=context,\n    question=self.state.goal,\n    agent_type=\"code_architecture\"\n)\n</code></pre></p> </li> <li> <p>Observation History <pre><code>if self.state.observations:\n    for obs in self.state.observations[-3:]:\n        context_parts.append(f\"- {obs}\")\n</code></pre></p> </li> </ol>"},{"location":"workflows/llm-function-calling/#phase-2-llm-function-calling","title":"Phase 2: LLM Function Calling","text":"<pre><code>sequenceDiagram\n    participant Agent\n    participant LLM\n    participant ToolRegistry\n    participant Tool\n\n    Note over Agent: Build Context\n    Agent-&gt;&gt;Agent: Collect state, reasoning, observations\n\n    Note over Agent: Prepare LLM Call\n    Agent-&gt;&gt;ToolRegistry: Get tool schemas\n    ToolRegistry--&gt;&gt;Agent: Function definitions\n\n    Note over Agent: LLM Function Calling\n    Agent-&gt;&gt;LLM: Context + Tool Schemas + Reasoning\n    Note over LLM: Analyze context&lt;br/&gt;Select optimal tool&lt;br/&gt;Generate parameters\n    LLM--&gt;&gt;Agent: {\"tool_calls\": [{\"function_name\": \"scan_directory\", \"arguments\": {...}}]}\n\n    Note over Agent: Parse &amp; Execute\n    Agent-&gt;&gt;ToolRegistry: Execute tool_call\n    ToolRegistry-&gt;&gt;Tool: Call with LLM parameters\n    Tool--&gt;&gt;ToolRegistry: Execution results\n    ToolRegistry--&gt;&gt;Agent: Structured response</code></pre>"},{"location":"workflows/llm-function-calling/#phase-3-tool-schema-definition","title":"Phase 3: Tool Schema Definition","text":"<p>Each tool is defined with an OpenAI-compatible function schema:</p> <pre><code>{\n    \"type\": \"function\",\n    \"function\": {\n        \"name\": \"scan_directory\",\n        \"description\": \"Scan a directory to understand its structure and find files\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"directory\": {\n                    \"type\": \"string\",\n                    \"description\": \"Directory path to scan (default: '.')\"\n                },\n                \"max_depth\": {\n                    \"type\": \"integer\", \n                    \"description\": \"Maximum depth to scan (default: 3)\"\n                }\n            },\n            \"required\": [\"directory\"]\n        }\n    }\n}\n</code></pre>"},{"location":"workflows/llm-function-calling/#phase-4-llm-tool-selection-examples","title":"Phase 4: LLM Tool Selection Examples","text":""},{"location":"workflows/llm-function-calling/#example-1-early-exploration","title":"Example 1: Early Exploration","text":"<p>Context: Iteration 1, no files found yet LLM Selection: <pre><code>{\n    \"tool_calls\": [\n        {\n            \"function_name\": \"scan_directory\",\n            \"arguments\": {\n                \"directory\": \".\",\n                \"max_depth\": 4\n            }\n        }\n    ]\n}\n</code></pre></p>"},{"location":"workflows/llm-function-calling/#example-2-code-analysis","title":"Example 2: Code Analysis","text":"<p>Context: Found 150 Python files, need to analyze key files LLM Selection: <pre><code>{\n    \"tool_calls\": [\n        {\n            \"function_name\": \"search_files\",\n            \"arguments\": {\n                \"pattern\": \"main|app|__init__\",\n                \"file_types\": [\".py\"],\n                \"max_results\": 20\n            }\n        }\n    ]\n}\n</code></pre></p>"},{"location":"workflows/llm-function-calling/#example-3-specific-investigation","title":"Example 3: Specific Investigation","text":"<p>Context: Looking for API routing in FastAPI project LLM Selection: <pre><code>{\n    \"tool_calls\": [\n        {\n            \"function_name\": \"search_files\",\n            \"arguments\": {\n                \"pattern\": \"router|route|endpoint\",\n                \"file_types\": [\".py\"],\n                \"max_results\": 15\n            }\n        }\n    ]\n}\n</code></pre></p>"},{"location":"workflows/llm-function-calling/#phase-5-execution-error-handling","title":"Phase 5: Execution &amp; Error Handling","text":"<pre><code>graph LR\n    A[LLM Tool Call] --&gt; B{Validate Parameters}\n    B --&gt;|Valid| C[Execute Tool]\n    B --&gt;|Invalid| D[Return Validation Error]\n    C --&gt; E{Tool Success?}\n    E --&gt;|Success| F[Format Results]\n    E --&gt;|Error| G[Return Tool Error]\n    F --&gt; H[Agent Observation]\n    D --&gt; H\n    G --&gt; H</code></pre>"},{"location":"workflows/llm-function-calling/#benefits-of-llm-function-calling","title":"Benefits of LLM Function Calling","text":""},{"location":"workflows/llm-function-calling/#1-adaptive-intelligence","title":"1. Adaptive Intelligence","text":"<ul> <li>LLM considers current context and goal</li> <li>Dynamic parameter selection based on situation</li> <li>Learning from previous observations</li> </ul>"},{"location":"workflows/llm-function-calling/#2-context-aware-decisions","title":"2. Context-Aware Decisions","text":"<pre><code># Traditional hardcoded logic\nif iteration &lt;= 2:\n    return scan_directory_action()\n\n# LLM function calling\n# LLM analyzes: \"I need to explore the codebase structure first, \n# but I should focus on the main directories since this is a \n# FastAPI project based on the question about request routing\"\n</code></pre>"},{"location":"workflows/llm-function-calling/#3-optimal-parameter-selection","title":"3. Optimal Parameter Selection","text":"<ul> <li>LLM chooses appropriate search patterns</li> <li>Adjusts depth and limits based on repository size</li> <li>Selects relevant file types based on context</li> </ul>"},{"location":"workflows/llm-function-calling/#4-robust-fallback","title":"4. Robust Fallback","text":"<pre><code># cf/agents/base.py - Common fallback mechanism\nfrom cf.llm.client import get_llm_client\n\ndef plan_action(self, reasoning: str) -&gt; ReActAction:\n    llm_client = get_llm_client()\n    if not llm_client or not llm_client.is_available():\n        return self._fallback_plan_action(reasoning)\n\n    # Try LLM function calling first\n    try:\n        return self._llm_function_calling(reasoning)\n    except Exception as e:\n        logger.warning(f\"LLM function calling failed: {e}\")\n        return self._fallback_plan_action(reasoning)\n</code></pre>"},{"location":"workflows/llm-function-calling/#performance-characteristics","title":"Performance Characteristics","text":""},{"location":"workflows/llm-function-calling/#llm-function-calling-metrics","title":"LLM Function Calling Metrics","text":"<ul> <li>Decision Time: ~2-5 seconds per tool selection</li> <li>Accuracy: 85-95% appropriate tool selection</li> <li>Context Utilization: Full state awareness</li> <li>Parameter Optimization: Dynamic based on situation</li> </ul>"},{"location":"workflows/llm-function-calling/#comparison-hardcoded-vs-llm-function-calling","title":"Comparison: Hardcoded vs LLM Function Calling","text":"Aspect Hardcoded Logic LLM Function Calling Adaptability Fixed patterns Context-aware decisions Parameter Selection Static defaults Dynamic optimization Goal Awareness Limited heuristics Full goal understanding Learning No learning Learns from observations Decision Quality Rule-based Intelligent analysis"},{"location":"workflows/llm-function-calling/#implementation-details","title":"Implementation Details","text":""},{"location":"workflows/llm-function-calling/#tool-registry-integration","title":"Tool Registry Integration","text":"<p>The clean <code>cf/tools/registry.py</code> provides centralized tool management:</p> <pre><code># cf/tools/registry.py\nfrom cf.tools.repo_tools import scan_directory, read_file, search_files\nfrom cf.tools.llm_tools import analyze_code, llm_reasoning\nfrom cf.tools.web_tools import web_search\n\nclass ToolRegistry:\n    def __init__(self, repo_path: str):\n        self.repo_path = repo_path\n        self.tools = {\n            \"scan_directory\": scan_directory,\n            \"read_file\": read_file,\n            \"search_files\": search_files,\n            \"analyze_code\": analyze_code,\n            \"llm_reasoning\": llm_reasoning,\n            \"web_search\": web_search\n        }\n\n    def execute_tool(self, tool_name: str, arguments: Dict, agent_context):\n        if tool_name not in self.tools:\n            return {\"success\": False, \"error\": f\"Tool '{tool_name}' not found\"}\n\n        try:\n            result = self.tools[tool_name](arguments, agent_context)\n            return {\"success\": True, \"result\": result}\n        except Exception as e:\n            return {\"success\": False, \"error\": str(e)}\n</code></pre>"},{"location":"workflows/llm-function-calling/#llm-provider-compatibility","title":"LLM Provider Compatibility","text":"<ul> <li>OpenAI: Native function calling support</li> <li>Anthropic: Function calling via structured prompts</li> <li>LLaMA: Function calling via JSON schemas</li> </ul>"},{"location":"workflows/llm-function-calling/#error-recovery","title":"Error Recovery","text":"<ol> <li>Parameter Validation Errors: Retry with corrected parameters</li> <li>Tool Execution Errors: Fall back to alternative tools</li> <li>LLM Unavailable: Use hardcoded decision logic</li> <li>JSON Parsing Errors: Extract tool info from text response</li> </ol> <p>This workflow demonstrates how LLM Function Calling transforms static, rule-based tool selection into dynamic, intelligent decision-making that adapts to context and learns from experience.</p>"}]}