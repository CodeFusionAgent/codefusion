{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CodeFusion Documentation","text":"<p>CodeFusion is a powerful code understanding tool designed for senior developers to quickly ramp up on large codebases. It provides agentic exploration capabilities, semantic search, and comprehensive analysis of code repositories.</p>"},{"location":"#key-features","title":"\ud83d\ude80 Key Features","text":"<ul> <li>Agentic Exploration: Intelligent code exploration using ReAct, Plan-then-Act, and Sense-then-Act strategies</li> <li>Multi-Backend Knowledge Base: Support for Neo4j graph database and vector databases for semantic search</li> <li>LLM Integration: Comprehensive reasoning with support for OpenAI, Anthropic, and other LLM providers</li> <li>Advanced Analysis: Deep code relationship detection and architectural pattern analysis</li> <li>Interactive CLI: Intuitive command-line interface for repository exploration and querying</li> <li>Flexible Configuration: Extensive configuration options for different use cases</li> </ul>"},{"location":"#architecture-overview","title":"\ud83c\udfd7\ufe0f Architecture Overview","text":"<p>CodeFusion consists of several key components:</p> <ul> <li>ACI (Agent Computer Interface): System interaction layer for file system, environment, and repository access</li> <li>Knowledge Base: Dual-backend storage supporting both graph (Neo4j) and vector (FAISS) databases</li> <li>Indexer: Code analysis and entity extraction with relationship detection</li> <li>Agents: Reasoning agents for different exploration strategies</li> <li>LLM Integration: Large language model integration for natural language understanding</li> </ul>"},{"location":"#quick-start","title":"\ud83c\udfaf Quick Start","text":"<p>Get started with CodeFusion in just a few commands:</p> <pre><code># Install CodeFusion\npip install codefusion\n\n# Index a repository\ncf index /path/to/your/repo\n\n# Ask questions about the code\ncf query \"How does authentication work in this codebase?\"\n\n# Full exploration workflow\ncf explore /path/to/your/repo\n</code></pre>"},{"location":"#documentation-structure","title":"\ud83d\udcda Documentation Structure","text":"<p>This documentation is organized into several sections:</p> <ul> <li>Installation: Get CodeFusion up and running</li> <li>Usage: Learn how to use CodeFusion effectively</li> <li>Configuration: Customize CodeFusion for your needs</li> <li>Development: Contribute to CodeFusion development</li> <li>Reference: Detailed API and CLI reference</li> </ul>"},{"location":"#supported-languages","title":"\ud83d\udee0\ufe0f Supported Languages","text":"<p>CodeFusion supports analysis of multiple programming languages:</p> <ul> <li>Python - Full AST analysis, import detection, class/function extraction</li> <li>JavaScript/TypeScript - Module analysis, function detection, framework support</li> <li>Java - Package structure analysis, class hierarchy detection</li> <li>C/C++ - Header analysis, function extraction</li> <li>Go - Package analysis, function detection</li> <li>Rust - Crate analysis, module structure</li> </ul>"},{"location":"#integration-options","title":"\ud83d\udd27 Integration Options","text":"<p>CodeFusion integrates with various tools and services:</p> <ul> <li>Neo4j - Graph database for complex relationship analysis</li> <li>Vector Databases - FAISS for semantic similarity search</li> <li>LLM Providers - OpenAI, Anthropic, and other compatible APIs</li> <li>Development Tools - Git integration, testing frameworks, CI/CD pipelines</li> </ul>"},{"location":"#contributing","title":"\ud83e\udd1d Contributing","text":"<p>We welcome contributions to CodeFusion! Please see our Contributing Guide for details on how to get started.</p>"},{"location":"#license","title":"\ud83d\udcc4 License","text":"<p>CodeFusion is released under the Apache License 2.0. See LICENSE for details.</p>"},{"location":"#support","title":"\ud83c\udd98 Support","text":"<ul> <li>\ud83d\udcd6 Documentation</li> <li>\ud83d\udcac GitHub Issues</li> <li>\ud83d\udc1b Bug Reports</li> <li>\ud83d\udca1 Feature Requests</li> </ul>"},{"location":"config/overview/","title":"Configuration Overview","text":"<p>CodeFusion offers flexible configuration options to customize its behavior for different environments, use cases, and project requirements.</p>"},{"location":"config/overview/#configuration-architecture","title":"Configuration Architecture","text":"<p>CodeFusion uses a hierarchical configuration system that allows you to:</p> <ul> <li>Set defaults through built-in configuration</li> <li>Override settings with configuration files</li> <li>Fine-tune with environment variables</li> <li>Adjust specific options via command-line arguments</li> </ul>"},{"location":"config/overview/#configuration-hierarchy","title":"Configuration Hierarchy","text":"<p>Settings are applied in order of precedence (highest to lowest):</p> <ol> <li>Command-line arguments (highest priority)</li> <li>Configuration files (specified with <code>--config</code>)</li> <li>Environment variables</li> <li>Default values (lowest priority)</li> </ol> <p>This hierarchy allows you to maintain base configurations while making environment-specific or task-specific adjustments.</p>"},{"location":"config/overview/#configuration-methods","title":"Configuration Methods","text":""},{"location":"config/overview/#1-configuration-files","title":"1. Configuration Files","text":"<p>The primary configuration method using YAML files:</p> <pre><code>cf --config /path/to/config.yaml index /path/to/repo\n</code></pre>"},{"location":"config/overview/#2-environment-variables","title":"2. Environment Variables","text":"<p>Override specific settings without modifying configuration files:</p> <pre><code>export OPENAI_API_KEY=\"your-api-key\"\nexport NEO4J_PASSWORD=\"password\"\ncf index /path/to/repo\n</code></pre>"},{"location":"config/overview/#3-command-line-options","title":"3. Command-Line Options","text":"<p>Quick adjustments for specific commands:</p> <pre><code>cf --verbose query --strategy plan_act \"How does authentication work?\"\n</code></pre>"},{"location":"config/overview/#core-configuration-areas","title":"Core Configuration Areas","text":""},{"location":"config/overview/#llm-configuration","title":"LLM Configuration","text":"<p>Control which language models to use and how to connect to them:</p> <pre><code>llm_model: \"gpt-4\"\nllm_api_key: null  # Use environment variable\nllm_base_url: null  # Use default provider endpoint\n</code></pre>"},{"location":"config/overview/#knowledge-base-configuration","title":"Knowledge Base Configuration","text":"<p>Choose and configure the storage backend for code analysis:</p> <pre><code>kb_type: \"neo4j\"  # Options: \"vector\", \"neo4j\", \"text\"\nkb_path: \"./kb\"\n</code></pre>"},{"location":"config/overview/#exploration-strategy","title":"Exploration Strategy","text":"<p>Select how CodeFusion analyzes and explores your codebase:</p> <pre><code>exploration_strategy: \"react\"  # Options: \"react\", \"plan_act\", \"sense_act\"\nmax_exploration_depth: 5\n</code></pre>"},{"location":"config/overview/#file-filtering","title":"File Filtering","text":"<p>Control which files and directories to analyze:</p> <pre><code>excluded_dirs:\n  - \".git\"\n  - \"node_modules\"\n  - \"__pycache__\"\n\nexcluded_extensions:\n  - \".pyc\"\n  - \".log\"\n  - \".env\"\n\nmax_file_size: 1048576  # 1MB in bytes\n</code></pre>"},{"location":"config/overview/#configuration-patterns","title":"Configuration Patterns","text":""},{"location":"config/overview/#development-vs-production","title":"Development vs Production","text":"<p>Development Configuration: - Fast analysis with lightweight models - Limited exploration depth - Aggressive file filtering</p> <p>Production Configuration: - Comprehensive analysis with advanced models - Deep exploration - Minimal filtering for thorough coverage</p>"},{"location":"config/overview/#project-specific-configurations","title":"Project-Specific Configurations","text":"<p>Python Projects: <pre><code>excluded_dirs:\n  - \".git\"\n  - \"__pycache__\"\n  - \".pytest_cache\"\n  - \"venv\"\n  - \".venv\"\n\nexcluded_extensions:\n  - \".pyc\"\n  - \".pyo\"\n  - \".pyd\"\n</code></pre></p> <p>JavaScript Projects: <pre><code>excluded_dirs:\n  - \".git\"\n  - \"node_modules\"\n  - \"dist\"\n  - \"build\"\n  - \".next\"\n\nexcluded_extensions:\n  - \".map\"\n  - \".min.js\"\n  - \".bundle.js\"\n</code></pre></p>"},{"location":"config/overview/#configuration-validation","title":"Configuration Validation","text":"<p>CodeFusion validates configuration files at startup:</p> <pre><code># Test configuration validity\ncf --config my-config.yaml stats\n</code></pre> <p>Common validation checks: - YAML syntax correctness - Required fields for selected knowledge base type - Valid strategy names - Numeric ranges for depth and size limits</p>"},{"location":"config/overview/#configuration-templates","title":"Configuration Templates","text":"<p>CodeFusion provides several built-in configuration templates:</p> <ul> <li>Default: Balanced settings for general use</li> <li>Fast: Optimized for quick analysis</li> <li>Thorough: Comprehensive analysis for complex projects</li> <li>Memory-efficient: Minimal resource usage</li> <li>Large-repo: Optimized for repositories with 10k+ files</li> </ul>"},{"location":"config/overview/#environment-specific-settings","title":"Environment-Specific Settings","text":""},{"location":"config/overview/#local-development","title":"Local Development","text":"<pre><code>llm_model: \"gpt-3.5-turbo\"\nkb_type: \"vector\"\nexploration_strategy: \"react\"\nmax_exploration_depth: 3\n</code></pre>"},{"location":"config/overview/#cicd-pipelines","title":"CI/CD Pipelines","text":"<pre><code>llm_model: \"gpt-4\"\nkb_type: \"text\"  # Minimal dependencies\nexploration_strategy: \"plan_act\"\nmax_exploration_depth: 5\n</code></pre>"},{"location":"config/overview/#production-analysis","title":"Production Analysis","text":"<pre><code>llm_model: \"gpt-4\"\nkb_type: \"neo4j\"\nexploration_strategy: \"sense_act\"\nmax_exploration_depth: 10\n</code></pre>"},{"location":"config/overview/#security-considerations","title":"Security Considerations","text":""},{"location":"config/overview/#api-key-management","title":"API Key Management","text":"<ul> <li>Never store API keys in configuration files</li> <li>Use environment variables or secure key management</li> <li>Rotate keys regularly</li> </ul>"},{"location":"config/overview/#database-security","title":"Database Security","text":"<ul> <li>Secure Neo4j instances in production</li> <li>Use proper authentication and network restrictions</li> <li>Enable encryption for sensitive codebases</li> </ul>"},{"location":"config/overview/#performance-tuning","title":"Performance Tuning","text":""},{"location":"config/overview/#memory-optimization","title":"Memory Optimization","text":"<pre><code>max_file_size: 524288  # 512KB\nkb_type: \"text\"        # Minimal memory usage\n</code></pre>"},{"location":"config/overview/#speed-optimization","title":"Speed Optimization","text":"<pre><code>exploration_strategy: \"react\"  # Fastest strategy\nmax_exploration_depth: 3       # Shallow exploration\n</code></pre>"},{"location":"config/overview/#quality-optimization","title":"Quality Optimization","text":"<pre><code>llm_model: \"gpt-4\"           # Best analysis quality\nexploration_strategy: \"sense_act\"  # Most thorough\nmax_exploration_depth: 15    # Deep exploration\n</code></pre>"},{"location":"config/overview/#configuration-best-practices","title":"Configuration Best Practices","text":"<ol> <li>Start with defaults and adjust incrementally</li> <li>Use version control for configuration files</li> <li>Document environment-specific changes</li> <li>Test configurations before production use</li> <li>Monitor resource usage and adjust accordingly</li> <li>Keep sensitive data in environment variables</li> <li>Use meaningful file names for different configurations</li> </ol>"},{"location":"config/overview/#troubleshooting-configuration","title":"Troubleshooting Configuration","text":""},{"location":"config/overview/#common-issues","title":"Common Issues","text":"<p>Configuration not found: <pre><code># Verify file path\nls -la /path/to/config.yaml\n</code></pre></p> <p>YAML syntax errors: <pre><code># Validate YAML syntax\npython3.11 -c \"import yaml; yaml.safe_load(open('config.yaml'))\"\n</code></pre></p> <p>Missing dependencies: <pre><code># Check required packages\npip list | grep -E \"(neo4j|faiss|sentence-transformers)\"\n</code></pre></p>"},{"location":"config/overview/#debug-mode","title":"Debug Mode","text":"<p>Enable verbose configuration loading:</p> <pre><code>cf --verbose --config debug-config.yaml stats\n</code></pre>"},{"location":"config/overview/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about specific configuration options</li> <li>Explore exploration strategies in detail</li> <li>See configuration examples for different scenarios</li> <li>Check the CLI reference for command-line options</li> </ul>"},{"location":"config/reference/","title":"Configuration Reference","text":"<p>This page provides a complete reference for all CodeFusion configuration options.</p>"},{"location":"config/reference/#configuration-file-format","title":"Configuration File Format","text":"<p>Configuration files use YAML format with the following structure:</p> <pre><code># Basic settings\nrepo_path: null\noutput_dir: \"./output\"\n\n# LLM configuration\nllm_model: \"gpt-3.5-turbo\"\nllm_api_key: null\nllm_base_url: null\n\n# Knowledge base settings\nkb_type: \"vector\"\nkb_path: \"./kb\"\n\n# Exploration settings\nexploration_strategy: \"react\"\nmax_exploration_depth: 5\n\n# File filtering\nmax_file_size: 1048576\nexcluded_dirs: []\nexcluded_extensions: []\n\n# Additional options...\n</code></pre>"},{"location":"config/reference/#core-configuration-options","title":"Core Configuration Options","text":""},{"location":"config/reference/#basic-settings","title":"Basic Settings","text":""},{"location":"config/reference/#repo_path","title":"<code>repo_path</code>","text":"<ul> <li>Type: String (path) or null</li> <li>Default: null</li> <li>Description: Default repository path to analyze</li> <li>Example: <code>\"/path/to/my/project\"</code></li> </ul>"},{"location":"config/reference/#output_dir","title":"<code>output_dir</code>","text":"<ul> <li>Type: String (path)</li> <li>Default: <code>\"./output\"</code></li> <li>Description: Directory for output artifacts and logs</li> <li>Example: <code>\"/tmp/codefusion-artifacts\"</code></li> </ul>"},{"location":"config/reference/#llm-configuration","title":"LLM Configuration","text":""},{"location":"config/reference/#llm_model","title":"<code>llm_model</code>","text":"<ul> <li>Type: String</li> <li>Default: <code>\"gpt-3.5-turbo\"</code></li> <li>Description: Language model to use for analysis</li> <li>Valid values:</li> <li>OpenAI: <code>\"gpt-3.5-turbo\"</code>, <code>\"gpt-4\"</code>, <code>\"gpt-4-turbo\"</code></li> <li>Anthropic: <code>\"claude-3-sonnet-20240229\"</code>, <code>\"claude-3-opus-20240229\"</code></li> <li>Local: <code>\"local-model\"</code> (with custom base_url)</li> </ul>"},{"location":"config/reference/#llm_api_key","title":"<code>llm_api_key</code>","text":"<ul> <li>Type: String or null</li> <li>Default: null</li> <li>Description: API key for LLM provider (use environment variable instead)</li> <li>Environment variable: <code>OPENAI_API_KEY</code>, <code>ANTHROPIC_API_KEY</code>, etc.</li> <li>Security note: Never store in configuration files</li> </ul>"},{"location":"config/reference/#llm_base_url","title":"<code>llm_base_url</code>","text":"<ul> <li>Type: String (URL) or null</li> <li>Default: null</li> <li>Description: Custom base URL for LLM API</li> <li>Example: <code>\"https://api.example.com/v1\"</code></li> <li>Use cases: Self-hosted models, Azure OpenAI, custom proxies</li> </ul>"},{"location":"config/reference/#llm_temperature","title":"<code>llm_temperature</code>","text":"<ul> <li>Type: Float</li> <li>Default: 0.0</li> <li>Range: 0.0 to 2.0</li> <li>Description: Controls randomness in LLM responses</li> <li>Usage: Higher values for creativity, lower for consistency</li> </ul>"},{"location":"config/reference/#llm_max_tokens","title":"<code>llm_max_tokens</code>","text":"<ul> <li>Type: Integer</li> <li>Default: 4096</li> <li>Description: Maximum tokens per LLM response</li> <li>Range: 1 to model-specific limit</li> </ul>"},{"location":"config/reference/#knowledge-base-configuration","title":"Knowledge Base Configuration","text":""},{"location":"config/reference/#kb_type","title":"<code>kb_type</code>","text":"<ul> <li>Type: String</li> <li>Default: <code>\"vector\"</code></li> <li>Description: Type of knowledge base to use</li> <li>Valid values:</li> <li><code>\"vector\"</code>: Vector/embedding-based search</li> <li><code>\"neo4j\"</code>: Graph database for relationships</li> <li><code>\"text\"</code>: Simple text-based storage</li> </ul>"},{"location":"config/reference/#kb_path","title":"<code>kb_path</code>","text":"<ul> <li>Type: String (path)</li> <li>Default: <code>\"./kb\"</code></li> <li>Description: Path for knowledge base storage</li> <li>Example: <code>\"/data/codefusion/kb\"</code></li> </ul>"},{"location":"config/reference/#vector-database-options","title":"Vector Database Options","text":""},{"location":"config/reference/#embedding_model","title":"<code>embedding_model</code>","text":"<ul> <li>Type: String</li> <li>Default: <code>\"all-MiniLM-L6-v2\"</code></li> <li>Description: Model for generating text embeddings</li> <li>Options:</li> <li><code>\"all-MiniLM-L6-v2\"</code>: Fast, good quality</li> <li><code>\"all-mpnet-base-v2\"</code>: Higher quality, slower</li> <li><code>\"BAAI/bge-small-en-v1.5\"</code>: Optimized for code</li> </ul>"},{"location":"config/reference/#vector_dimension","title":"<code>vector_dimension</code>","text":"<ul> <li>Type: Integer</li> <li>Default: 384 (for all-MiniLM-L6-v2)</li> <li>Description: Embedding vector dimensions</li> <li>Note: Must match embedding model dimensions</li> </ul>"},{"location":"config/reference/#similarity_threshold","title":"<code>similarity_threshold</code>","text":"<ul> <li>Type: Float</li> <li>Default: 0.7</li> <li>Range: 0.0 to 1.0</li> <li>Description: Minimum similarity score for relevant results</li> </ul>"},{"location":"config/reference/#neo4j-configuration","title":"Neo4j Configuration","text":""},{"location":"config/reference/#neo4j_uri","title":"<code>neo4j_uri</code>","text":"<ul> <li>Type: String (URI)</li> <li>Default: null</li> <li>Description: Neo4j database connection URI</li> <li>Examples:</li> <li>Local: <code>\"bolt://localhost:7687\"</code></li> <li>Cloud: <code>\"neo4j+s://instance.databases.neo4j.io\"</code></li> </ul>"},{"location":"config/reference/#neo4j_user","title":"<code>neo4j_user</code>","text":"<ul> <li>Type: String</li> <li>Default: null</li> <li>Description: Neo4j username</li> <li>Environment variable: <code>NEO4J_USER</code></li> </ul>"},{"location":"config/reference/#neo4j_password","title":"<code>neo4j_password</code>","text":"<ul> <li>Type: String</li> <li>Default: null</li> <li>Description: Neo4j password</li> <li>Environment variable: <code>NEO4J_PASSWORD</code></li> <li>Security note: Use environment variable</li> </ul>"},{"location":"config/reference/#neo4j_database","title":"<code>neo4j_database</code>","text":"<ul> <li>Type: String</li> <li>Default: <code>\"neo4j\"</code></li> <li>Description: Neo4j database name</li> <li>Note: Use default for single-database instances</li> </ul>"},{"location":"config/reference/#exploration-configuration","title":"Exploration Configuration","text":""},{"location":"config/reference/#exploration_strategy","title":"<code>exploration_strategy</code>","text":"<ul> <li>Type: String</li> <li>Default: <code>\"react\"</code></li> <li>Description: Strategy for code exploration</li> <li>Valid values:</li> <li><code>\"react\"</code>: Reasoning + Acting (balanced)</li> <li><code>\"plan_act\"</code>: Plan then Act (systematic)</li> <li><code>\"sense_act\"</code>: Sense then Act (observational)</li> </ul>"},{"location":"config/reference/#max_exploration_depth","title":"<code>max_exploration_depth</code>","text":"<ul> <li>Type: Integer</li> <li>Default: 5</li> <li>Range: 1 to 50</li> <li>Description: Maximum depth for exploration steps</li> <li>Guidelines:</li> <li>1-3: Quick overview</li> <li>5-8: Standard analysis</li> <li>10+: Deep exploration</li> </ul>"},{"location":"config/reference/#strategy-specific-options","title":"Strategy-Specific Options","text":""},{"location":"config/reference/#react-strategy","title":"ReAct Strategy","text":"<pre><code>react_settings:\n  reasoning_steps: 3\n  action_timeout: 30\n  backtrack_on_failure: true\n  max_iterations: 10\n</code></pre>"},{"location":"config/reference/#plan-act-strategy","title":"Plan-Act Strategy","text":"<pre><code>plan_act_settings:\n  planning_depth: 3\n  execution_parallel: false\n  plan_validation: true\n  replanning_threshold: 0.5\n</code></pre>"},{"location":"config/reference/#sense-act-strategy","title":"Sense-Act Strategy","text":"<pre><code>sense_act_settings:\n  observation_cycles: 5\n  adaptation_threshold: 0.7\n  exploration_breadth: 5\n  context_window: 10\n</code></pre>"},{"location":"config/reference/#file-filtering-configuration","title":"File Filtering Configuration","text":""},{"location":"config/reference/#max_file_size","title":"<code>max_file_size</code>","text":"<ul> <li>Type: Integer (bytes)</li> <li>Default: 1048576 (1MB)</li> <li>Description: Maximum size for files to analyze</li> <li>Common values:</li> <li>524288 (512KB): Conservative</li> <li>1048576 (1MB): Default</li> <li>5242880 (5MB): Large files</li> </ul>"},{"location":"config/reference/#excluded_dirs","title":"<code>excluded_dirs</code>","text":"<ul> <li>Type: List of strings</li> <li>Default: <code>[\".git\", \"__pycache__\", \"node_modules\", \".venv\", \"venv\"]</code></li> <li>Description: Directory names to exclude from analysis</li> <li>Examples: <pre><code>excluded_dirs:\n  - \".git\"\n  - \"node_modules\"\n  - \"__pycache__\"\n  - \"dist\"\n  - \"build\"\n  - \"vendor\"\n  - \".pytest_cache\"\n</code></pre></li> </ul>"},{"location":"config/reference/#excluded_extensions","title":"<code>excluded_extensions</code>","text":"<ul> <li>Type: List of strings</li> <li>Default: <code>[\".pyc\", \".pyo\", \".pyd\", \".so\", \".dll\", \".exe\", \".env\"]</code></li> <li>Description: File extensions to exclude</li> <li>Examples: <pre><code>excluded_extensions:\n  - \".pyc\"\n  - \".log\"\n  - \".tmp\"\n  - \".map\"\n  - \".min.js\"\n  - \".bundle.js\"\n</code></pre></li> </ul>"},{"location":"config/reference/#included_extensions","title":"<code>included_extensions</code>","text":"<ul> <li>Type: List of strings</li> <li>Default: null (include all non-excluded)</li> <li>Description: Only analyze files with these extensions</li> <li>Example: <pre><code>included_extensions:\n  - \".py\"\n  - \".js\"\n  - \".ts\"\n  - \".java\"\n</code></pre></li> </ul>"},{"location":"config/reference/#file_patterns","title":"<code>file_patterns</code>","text":"<ul> <li>Type: Object</li> <li>Default: {}</li> <li>Description: Regex patterns for file filtering</li> <li>Example: <pre><code>file_patterns:\n  exclude:\n    - \"test_.*\\\\.py$\"\n    - \".*\\\\.test\\\\.js$\"\n  include:\n    - \".*\\\\.(py|js|ts|java)$\"\n</code></pre></li> </ul>"},{"location":"config/reference/#performance-configuration","title":"Performance Configuration","text":""},{"location":"config/reference/#batch_size","title":"<code>batch_size</code>","text":"<ul> <li>Type: Integer</li> <li>Default: 100</li> <li>Description: Number of files to process in each batch</li> <li>Range: 10 to 1000</li> </ul>"},{"location":"config/reference/#max_workers","title":"<code>max_workers</code>","text":"<ul> <li>Type: Integer</li> <li>Default: 4</li> <li>Description: Maximum number of worker threads</li> <li>Guidelines: Usually CPU count / 2</li> </ul>"},{"location":"config/reference/#memory_limit","title":"<code>memory_limit</code>","text":"<ul> <li>Type: Integer (bytes)</li> <li>Default: null (no limit)</li> <li>Description: Maximum memory usage before optimization</li> <li>Example: 8589934592 (8GB)</li> </ul>"},{"location":"config/reference/#cache_enabled","title":"<code>cache_enabled</code>","text":"<ul> <li>Type: Boolean</li> <li>Default: true</li> <li>Description: Enable caching of analysis results</li> </ul>"},{"location":"config/reference/#cache_size","title":"<code>cache_size</code>","text":"<ul> <li>Type: Integer</li> <li>Default: 1000</li> <li>Description: Maximum number of cached items</li> </ul>"},{"location":"config/reference/#logging-configuration","title":"Logging Configuration","text":""},{"location":"config/reference/#log_level","title":"<code>log_level</code>","text":"<ul> <li>Type: String</li> <li>Default: <code>\"INFO\"</code></li> <li>Valid values: <code>\"DEBUG\"</code>, <code>\"INFO\"</code>, <code>\"WARNING\"</code>, <code>\"ERROR\"</code>, <code>\"CRITICAL\"</code></li> <li>Description: Minimum log level to output</li> </ul>"},{"location":"config/reference/#log_file","title":"<code>log_file</code>","text":"<ul> <li>Type: String (path) or null</li> <li>Default: null</li> <li>Description: File path for log output</li> <li>Example: <code>\"/var/log/codefusion.log\"</code></li> </ul>"},{"location":"config/reference/#verbose","title":"<code>verbose</code>","text":"<ul> <li>Type: Boolean</li> <li>Default: false</li> <li>Description: Enable verbose console output</li> </ul>"},{"location":"config/reference/#debug","title":"<code>debug</code>","text":"<ul> <li>Type: Boolean</li> <li>Default: false</li> <li>Description: Enable debug mode with detailed logging</li> </ul>"},{"location":"config/reference/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"config/reference/#security-settings","title":"Security Settings","text":"<pre><code>security:\n  api_key_validation: true\n  secure_temp_files: true\n  sanitize_outputs: true\n  max_query_length: 10000\n</code></pre>"},{"location":"config/reference/#timeout-settings","title":"Timeout Settings","text":"<pre><code>timeouts:\n  llm_request: 300      # 5 minutes\n  kb_operation: 600     # 10 minutes\n  file_processing: 30   # 30 seconds\n  exploration_step: 120 # 2 minutes\n</code></pre>"},{"location":"config/reference/#retry-settings","title":"Retry Settings","text":"<pre><code>retry:\n  max_attempts: 3\n  backoff_factor: 2.0\n  max_delay: 60\n  retry_on_errors:\n    - \"rate_limit\"\n    - \"timeout\"\n    - \"connection_error\"\n</code></pre>"},{"location":"config/reference/#environment-variables","title":"Environment Variables","text":"<p>All configuration options can be overridden with environment variables using the pattern <code>CF_&lt;OPTION_NAME&gt;</code>:</p> <pre><code>export CF_LLM_MODEL=\"gpt-4\"\nexport CF_KB_TYPE=\"neo4j\"\nexport CF_MAX_EXPLORATION_DEPTH=\"10\"\nexport CF_EXCLUDED_DIRS='[\".git\", \"node_modules\"]'\n</code></pre> <p>Special environment variables: - <code>OPENAI_API_KEY</code>: OpenAI API key - <code>ANTHROPIC_API_KEY</code>: Anthropic API key - <code>NEO4J_URI</code>: Neo4j connection URI - <code>NEO4J_USER</code>: Neo4j username - <code>NEO4J_PASSWORD</code>: Neo4j password</p>"},{"location":"config/reference/#configuration-validation","title":"Configuration Validation","text":""},{"location":"config/reference/#schema-validation","title":"Schema Validation","text":"<p>CodeFusion validates configuration against a schema:</p> <pre><code># Test configuration\ncf --config my-config.yaml --validate-only\n</code></pre>"},{"location":"config/reference/#required-fields-by-kb-type","title":"Required Fields by KB Type","text":"<p>Vector KB: - <code>kb_path</code> - <code>embedding_model</code> (optional, has default)</p> <p>Neo4j KB: - <code>neo4j_uri</code> - <code>neo4j_user</code> - <code>neo4j_password</code></p> <p>Text KB: - <code>kb_path</code></p>"},{"location":"config/reference/#validation-rules","title":"Validation Rules","text":"<ul> <li><code>max_exploration_depth</code> must be positive</li> <li><code>max_file_size</code> must be positive</li> <li><code>llm_temperature</code> must be between 0.0 and 2.0</li> <li>File paths must be valid</li> <li>URLs must be well-formed</li> </ul>"},{"location":"config/reference/#configuration-examples","title":"Configuration Examples","text":""},{"location":"config/reference/#minimal-configuration","title":"Minimal Configuration","text":"<pre><code>llm_model: \"gpt-3.5-turbo\"\nkb_type: \"text\"\nexploration_strategy: \"react\"\n</code></pre>"},{"location":"config/reference/#complete-configuration","title":"Complete Configuration","text":"<pre><code># Repository settings\nrepo_path: \"/path/to/project\"\noutput_dir: \"/tmp/codefusion\"\n\n# LLM settings\nllm_model: \"gpt-4\"\nllm_api_key: null\nllm_temperature: 0.1\nllm_max_tokens: 8192\n\n# Knowledge base\nkb_type: \"neo4j\"\nkb_path: \"./kb\"\nneo4j_uri: \"bolt://localhost:7687\"\nneo4j_user: \"neo4j\"\nneo4j_password: \"password\"\n\n# Exploration\nexploration_strategy: \"sense_act\"\nmax_exploration_depth: 15\n\n# File filtering\nmax_file_size: 2097152\nexcluded_dirs:\n  - \".git\"\n  - \"node_modules\"\n  - \"__pycache__\"\nexcluded_extensions:\n  - \".pyc\"\n  - \".log\"\n\n# Performance\nbatch_size: 200\nmax_workers: 8\ncache_enabled: true\n\n# Logging\nlog_level: \"DEBUG\"\nverbose: true\n</code></pre>"},{"location":"config/reference/#troubleshooting","title":"Troubleshooting","text":""},{"location":"config/reference/#configuration-not-loading","title":"Configuration Not Loading","text":"<pre><code># Check file syntax\npython3.11 -c \"import yaml; print(yaml.safe_load(open('config.yaml')))\"\n\n# Check file permissions\nls -la config.yaml\n</code></pre>"},{"location":"config/reference/#invalid-values","title":"Invalid Values","text":"<pre><code># Validate specific options\ncf --config config.yaml stats --verbose\n</code></pre>"},{"location":"config/reference/#environment-variable-issues","title":"Environment Variable Issues","text":"<pre><code># Check environment variables\nenv | grep -E \"(CF_|OPENAI_|NEO4J_)\"\n</code></pre>"},{"location":"config/reference/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about exploration strategies</li> <li>See configuration examples</li> <li>Check the CLI reference</li> </ul>"},{"location":"config/strategies/","title":"Exploration Strategies","text":"<p>CodeFusion offers three distinct exploration strategies, each optimized for different types of analysis and codebase characteristics.</p>"},{"location":"config/strategies/#strategy-overview","title":"Strategy Overview","text":"Strategy Best For Speed Thoroughness Complexity ReAct General exploration Fast Medium Low Plan-Act Systematic analysis Medium High Medium Sense-Act Complex codebases Slow Very High High"},{"location":"config/strategies/#react-strategy","title":"ReAct Strategy","text":"<p>Reasoning + Acting - The default strategy that balances speed and thoroughness.</p>"},{"location":"config/strategies/#how-it-works","title":"How It Works","text":"<p>ReAct follows a simple cycle: 1. Reason about the current state and goal 2. Act by taking a specific exploration step 3. Observe the results 4. Repeat until the goal is achieved</p>"},{"location":"config/strategies/#configuration","title":"Configuration","text":"<pre><code>exploration_strategy: \"react\"\nmax_exploration_depth: 5\n\nreact_settings:\n  reasoning_steps: 3        # Steps to think before acting\n  action_timeout: 30        # Seconds per action\n  backtrack_on_failure: true  # Retry failed paths\n  max_iterations: 10        # Maximum cycles per query\n</code></pre>"},{"location":"config/strategies/#when-to-use-react","title":"When to Use ReAct","text":"<p>\u2705 Good for: - General code understanding - Quick repository exploration - Interactive development workflow - Unknown codebases - Time-constrained analysis</p> <p>\u274c Not ideal for: - Very complex architectural analysis - Comprehensive security audits - Large-scale refactoring planning</p>"},{"location":"config/strategies/#examples","title":"Examples","text":"<pre><code># General exploration\ncf query --strategy react \"How does the user authentication work?\"\n\n# Quick overview\ncf query --strategy react \"What are the main components of this system?\"\n\n# Development workflow\ncf query --strategy react \"How do I add a new API endpoint?\"\n</code></pre> <p>Typical ReAct Flow: <pre><code>1. Reason: \"I need to understand authentication\"\n2. Act: Search for authentication-related files\n3. Observe: Found auth.py, login.py, middleware/auth.js\n4. Reason: \"Let me examine the main auth module\"\n5. Act: Analyze auth.py contents\n6. Observe: Found JWT token handling and user validation\n7. Reason: \"I should check how this integrates with routes\"\n8. Act: Search for route decorators using auth\n</code></pre></p>"},{"location":"config/strategies/#plan-act-strategy","title":"Plan-Act Strategy","text":"<p>Plan then Act - Systematic approach that creates a comprehensive plan before execution.</p>"},{"location":"config/strategies/#how-it-works_1","title":"How It Works","text":"<p>Plan-Act follows a structured approach: 1. Analyze the query and codebase scope 2. Plan a detailed sequence of exploration steps 3. Validate the plan for completeness 4. Execute each step systematically 5. Adapt the plan if needed</p>"},{"location":"config/strategies/#configuration_1","title":"Configuration","text":"<pre><code>exploration_strategy: \"plan_act\"\nmax_exploration_depth: 8\n\nplan_act_settings:\n  planning_depth: 3           # How detailed the initial plan\n  execution_parallel: false   # Execute steps in parallel\n  plan_validation: true       # Validate plan before execution\n  replanning_threshold: 0.5   # When to replan (0.0-1.0)\n  max_plan_steps: 20         # Maximum steps in a plan\n</code></pre>"},{"location":"config/strategies/#when-to-use-plan-act","title":"When to Use Plan-Act","text":"<p>\u2705 Good for: - Setup and installation guides - Systematic code analysis - Process documentation - Step-by-step procedures - Compliance and audit requirements - Large team onboarding</p> <p>\u274c Not ideal for: - Quick exploratory questions - Highly dynamic or evolving requirements - Real-time development assistance</p>"},{"location":"config/strategies/#examples_1","title":"Examples","text":"<pre><code># Systematic setup guide\ncf query --strategy plan_act \"How do I set up this project locally?\"\n\n# Comprehensive analysis\ncf query --strategy plan_act \"What's the complete CI/CD pipeline?\"\n\n# Process documentation\ncf query --strategy plan_act \"How do I contribute to this project?\"\n</code></pre> <p>Typical Plan-Act Flow: <pre><code>Query: \"How do I deploy this application?\"\n\nPlanning Phase:\n1. Identify deployment-related files\n2. Analyze build process\n3. Examine configuration files\n4. Check environment requirements\n5. Find deployment scripts\n6. Review documentation\n\nExecution Phase:\nStep 1: Search for Dockerfile, docker-compose.yml\nStep 2: Analyze package.json/requirements.txt for dependencies\nStep 3: Examine config/ directory for environment settings\nStep 4: Review scripts/ or deploy/ directories\nStep 5: Check README.md and docs/ for deployment docs\nStep 6: Synthesize complete deployment guide\n</code></pre></p>"},{"location":"config/strategies/#sense-act-strategy","title":"Sense-Act Strategy","text":"<p>Sense then Act - Advanced strategy that observes and adapts to complex codebases.</p>"},{"location":"config/strategies/#how-it-works_2","title":"How It Works","text":"<p>Sense-Act uses an adaptive approach: 1. Sense the codebase structure and patterns 2. Analyze relationships and dependencies 3. Adapt strategy based on observations 4. Act with context-aware exploration 5. Learn from results to improve future actions</p>"},{"location":"config/strategies/#configuration_2","title":"Configuration","text":"<pre><code>exploration_strategy: \"sense_act\"\nmax_exploration_depth: 15\n\nsense_act_settings:\n  observation_cycles: 5      # Initial observation rounds\n  adaptation_threshold: 0.7  # When to adapt strategy\n  exploration_breadth: 5     # Parallel exploration paths\n  context_window: 10         # Context items to maintain\n  pattern_recognition: true  # Enable pattern detection\n</code></pre>"},{"location":"config/strategies/#when-to-use-sense-act","title":"When to Use Sense-Act","text":"<p>\u2705 Good for: - Large, complex codebases (10k+ files) - Pattern and architecture discovery - Security analysis and vulnerability detection - Performance optimization planning - Legacy code understanding - Cross-team dependency analysis</p> <p>\u274c Not ideal for: - Simple repositories - Time-sensitive queries - Resource-constrained environments - Straightforward development tasks</p>"},{"location":"config/strategies/#examples_2","title":"Examples","text":"<pre><code># Complex architecture analysis\ncf query --strategy sense_act \"What architectural patterns are used?\"\n\n# Security analysis\ncf query --strategy sense_act \"What are potential security vulnerabilities?\"\n\n# Performance investigation\ncf query --strategy sense_act \"Where are the performance bottlenecks?\"\n</code></pre> <p>Typical Sense-Act Flow: <pre><code>Query: \"What are the main architectural patterns in this codebase?\"\n\nSensing Phase:\n- Observe: Directory structure suggests MVC pattern\n- Observe: Multiple microservices in services/ directory\n- Observe: Shared libraries in common/ directory\n- Observe: API gateway pattern in gateway/ directory\n- Sense: Dependency injection used throughout\n\nAdaptation Phase:\n- Adapt: Focus on service boundaries and communication\n- Adapt: Prioritize interface definitions and contracts\n- Adapt: Look for cross-cutting concerns\n\nActing Phase:\n- Act: Analyze service interfaces and APIs\n- Act: Map service dependencies and communication patterns\n- Act: Identify shared components and utilities\n- Act: Examine configuration and deployment patterns\n</code></pre></p>"},{"location":"config/strategies/#strategy-comparison","title":"Strategy Comparison","text":""},{"location":"config/strategies/#performance-characteristics","title":"Performance Characteristics","text":"<pre><code># Speed comparison (relative)\nreact: 1.0x      # Baseline\nplan_act: 0.7x   # 30% slower due to planning\nsense_act: 0.4x  # 60% slower due to sensing\n\n# Resource usage\nreact:\n  cpu: Low\n  memory: Low\n  network: Medium\n\nplan_act:\n  cpu: Medium\n  memory: Medium\n  network: Low\n\nsense_act:\n  cpu: High\n  memory: High\n  network: High\n</code></pre>"},{"location":"config/strategies/#accuracy-and-completeness","title":"Accuracy and Completeness","text":"<pre><code># Analysis quality (subjective)\nreact:\n  completeness: 70%\n  accuracy: 85%\n  depth: Medium\n\nplan_act:\n  completeness: 90%\n  accuracy: 90%\n  depth: High\n\nsense_act:\n  completeness: 95%\n  accuracy: 95%\n  depth: Very High\n</code></pre>"},{"location":"config/strategies/#strategy-selection-guide","title":"Strategy Selection Guide","text":""},{"location":"config/strategies/#by-codebase-size","title":"By Codebase Size","text":"<pre><code># Small repositories (&lt; 1,000 files)\nrecommended: \"react\"\nalternative: \"plan_act\"\n\n# Medium repositories (1,000 - 10,000 files)\nrecommended: \"plan_act\"\nalternative: \"react\"\n\n# Large repositories (&gt; 10,000 files)\nrecommended: \"sense_act\"\nalternative: \"plan_act\"\n</code></pre>"},{"location":"config/strategies/#by-query-type","title":"By Query Type","text":"<pre><code># Quick questions\n\"What does this function do?\": \"react\"\n\"How do I run tests?\": \"react\"\n\n# Systematic analysis\n\"How do I deploy this?\": \"plan_act\"\n\"What's the development workflow?\": \"plan_act\"\n\n# Complex analysis\n\"What are the architectural patterns?\": \"sense_act\"\n\"Where are performance bottlenecks?\": \"sense_act\"\n</code></pre>"},{"location":"config/strategies/#by-time-constraints","title":"By Time Constraints","text":"<pre><code># Immediate (&lt; 1 minute)\nstrategy: \"react\"\nmax_exploration_depth: 3\n\n# Standard (1-5 minutes)\nstrategy: \"plan_act\"\nmax_exploration_depth: 5\n\n# Thorough (5+ minutes)\nstrategy: \"sense_act\"\nmax_exploration_depth: 10\n</code></pre>"},{"location":"config/strategies/#mixed-strategy-approaches","title":"Mixed Strategy Approaches","text":""},{"location":"config/strategies/#sequential-strategies","title":"Sequential Strategies","text":"<p>Use different strategies for different phases:</p> <pre><code># Phase 1: Quick overview with ReAct\ncf query --strategy react \"What type of application is this?\"\n\n# Phase 2: Systematic analysis with Plan-Act\ncf query --strategy plan_act \"How is the application structured?\"\n\n# Phase 3: Deep analysis with Sense-Act\ncf query --strategy sense_act \"What are the architectural trade-offs?\"\n</code></pre>"},{"location":"config/strategies/#conditional-strategy-selection","title":"Conditional Strategy Selection","text":"<pre><code># Configuration for automatic strategy selection\nstrategy_selection:\n  auto_select: true\n  rules:\n    - condition: \"file_count &lt; 1000\"\n      strategy: \"react\"\n    - condition: \"file_count &gt; 10000\"\n      strategy: \"sense_act\"\n    - condition: \"query_complexity == 'high'\"\n      strategy: \"sense_act\"\n  default: \"plan_act\"\n</code></pre>"},{"location":"config/strategies/#strategy-optimization","title":"Strategy Optimization","text":""},{"location":"config/strategies/#react-optimization","title":"ReAct Optimization","text":"<pre><code>react_settings:\n  # For faster exploration\n  reasoning_steps: 1\n  max_iterations: 5\n\n  # For more thorough exploration\n  reasoning_steps: 5\n  max_iterations: 15\n  backtrack_on_failure: true\n</code></pre>"},{"location":"config/strategies/#plan-act-optimization","title":"Plan-Act Optimization","text":"<pre><code>plan_act_settings:\n  # For faster execution\n  planning_depth: 2\n  execution_parallel: true\n\n  # For more comprehensive plans\n  planning_depth: 4\n  plan_validation: true\n  max_plan_steps: 30\n</code></pre>"},{"location":"config/strategies/#sense-act-optimization","title":"Sense-Act Optimization","text":"<pre><code>sense_act_settings:\n  # For faster sensing\n  observation_cycles: 3\n  exploration_breadth: 3\n\n  # For deeper understanding\n  observation_cycles: 8\n  exploration_breadth: 8\n  context_window: 15\n</code></pre>"},{"location":"config/strategies/#debugging-strategies","title":"Debugging Strategies","text":""},{"location":"config/strategies/#strategy-performance-monitoring","title":"Strategy Performance Monitoring","text":"<pre><code># Enable strategy debugging\nexport CF_STRATEGY_DEBUG=1\ncf query --strategy sense_act \"Complex query here\"\n</code></pre>"},{"location":"config/strategies/#strategy-metrics","title":"Strategy Metrics","text":"<p>CodeFusion tracks strategy performance:</p> <pre><code>metrics:\n  exploration_time: 45.2s\n  steps_executed: 12\n  accuracy_score: 0.89\n  completeness_score: 0.92\n  efficiency_ratio: 0.76\n</code></pre>"},{"location":"config/strategies/#common-strategy-issues","title":"Common Strategy Issues","text":"<p>ReAct getting stuck in loops: <pre><code>react_settings:\n  max_iterations: 8        # Reduce iterations\n  backtrack_on_failure: false  # Disable backtracking\n</code></pre></p> <p>Plan-Act taking too long: <pre><code>plan_act_settings:\n  planning_depth: 2        # Reduce planning depth\n  execution_parallel: true # Enable parallel execution\n</code></pre></p> <p>Sense-Act using too much memory: <pre><code>sense_act_settings:\n  observation_cycles: 3    # Reduce observation cycles\n  exploration_breadth: 3   # Reduce breadth\n</code></pre></p>"},{"location":"config/strategies/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about configuration options for fine-tuning strategies</li> <li>See usage examples with different strategies</li> <li>Check performance tuning for optimization tips</li> </ul>"},{"location":"dev/architecture/","title":"Architecture","text":"<p>This document provides a comprehensive overview of CodeFusion's architecture, design patterns, and core components based on the actual codebase structure.</p>"},{"location":"dev/architecture/#high-level-architecture","title":"High-Level Architecture","text":"<p>CodeFusion follows a kernel-based design with clear separation of concerns, as shown in the main architecture diagram from the Workflow:</p> <pre><code>%%{init: {'theme':'base', 'themeVariables': {\n    'primaryColor': '#ffffff',\n    'primaryTextColor': '#1a1a1a',\n    'primaryBorderColor': '#333333',\n    'lineColor': '#2d3748',\n    'secondaryColor': '#f7fafc',\n    'tertiaryColor': '#edf2f7',\n    'background': '#ffffff',\n    'mainBkg': '#ffffff',\n    'nodeBorder': '#2d3748',\n    'clusterBkg': '#f8fafc',\n    'clusterBorder': '#4a5568',\n    'edgeLabelBackground': '#ffffff',\n    'fontFamily': 'Arial, sans-serif',\n    'fontSize': '16px',\n    'nodeFontSize': '18px',\n    'edgeLabelFontSize': '14px'\n}}}%%\n\ngraph TB\n    %% User Interfaces - Larger nodes with more padding\n    CLI[\"&lt;b&gt;\ud83d\udda5\ufe0f CLI Interface&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;cf/run/run.py&lt;br/&gt;cf/__main__.py&lt;br/&gt;&lt;br/&gt;Entry Point for&lt;br/&gt;User Commands\"]\n    WEB[\"&lt;b&gt;\ud83c\udf10 Web Interface&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;(Future Enhancement)&lt;br/&gt;&lt;br/&gt;Browser-based&lt;br/&gt;Visual Exploration\"]\n\n    %% CodeFusion Agentic Kernel (Main Container)\n    subgraph KERNEL [\"&lt;b&gt;\ud83e\udde0 CodeFusion Agentic Kernel&lt;/b&gt;\"]\n        direction TB\n\n        %% Core Agentic Components Row\n        subgraph CORE_ROW [\"&lt;b&gt;Core Agentic Components&lt;/b&gt;\"]\n            direction LR\n            EXPLORATION[\"&lt;b&gt;\ud83e\udd16 Agentic Exploration&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;cf/agents/&lt;br/&gt;&lt;br/&gt;\u2022 ReAct Strategy&lt;br/&gt;\u2022 Plan-then-Act&lt;br/&gt;\u2022 Sense-then-Act&lt;br/&gt;&lt;br/&gt;Multi-strategy reasoning&lt;br/&gt;and code exploration\"]\n            INDEXING[\"&lt;b&gt;\ud83d\udcd1 Code Indexing&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;cf/indexer/&lt;br/&gt;&lt;br/&gt;\u2022 File Processing&lt;br/&gt;\u2022 Entity Extraction&lt;br/&gt;\u2022 Batch Operations&lt;br/&gt;&lt;br/&gt;Repository processing&lt;br/&gt;and analysis\"]\n        end\n\n        %% Knowledge Graph System\n        subgraph CKG [\"&lt;b&gt;\ud83d\udcca Code Knowledge Graph - cf/kb/&lt;/b&gt;\"]\n            direction LR\n            VDB[\"&lt;b&gt;\ud83d\udd0d Vector Database&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;FAISS + Embeddings&lt;br/&gt;vector_kb.py&lt;br/&gt;&lt;br/&gt;Semantic similarity&lt;br/&gt;search and retrieval\"]\n            ENTITIES[\"&lt;b&gt;\ud83d\udcdd Code Entities&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;JSON Storage&lt;br/&gt;knowledge_base.py&lt;br/&gt;&lt;br/&gt;Files, classes, functions&lt;br/&gt;with metadata\"]\n            RELATIONS[\"&lt;b&gt;\ud83d\udd17 Relationships&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;AST Analysis&lt;br/&gt;relationship_detector.py&lt;br/&gt;&lt;br/&gt;Dependencies, calls,&lt;br/&gt;inheritance patterns\"]\n        end\n\n        %% LLM and Analysis Row\n        subgraph LLM_ROW [\"&lt;b&gt;Language Model &amp; Analysis&lt;/b&gt;\"]\n            direction LR\n            LLM[\"&lt;b&gt;\ud83e\udde0 LLM Proxy&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;cf/llm/llm_model.py&lt;br/&gt;&lt;br/&gt;\u2022 Multi-Provider Support&lt;br/&gt;\u2022 LiteLLM Integration&lt;br/&gt;&lt;br/&gt;OpenAI, Anthropic,&lt;br/&gt;local models\"]\n            ANALYZER[\"&lt;b&gt;\ud83d\udd2c Content Analyzer&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;cf/kb/content_analyzer.py&lt;br/&gt;&lt;br/&gt;\u2022 Question Answering&lt;br/&gt;\u2022 Context Enrichment&lt;br/&gt;&lt;br/&gt;Intelligent code&lt;br/&gt;understanding\"]\n        end\n\n        %% Support Systems Row\n        subgraph SUPPORT_ROW [\"&lt;b&gt;Support Systems&lt;/b&gt;\"]\n            direction LR\n            CONFIG[\"&lt;b&gt;\u2699\ufe0f Configuration&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;cf/config.py&lt;br/&gt;&lt;br/&gt;\u2022 YAML/JSON Support&lt;br/&gt;\u2022 Environment Override&lt;br/&gt;&lt;br/&gt;System configuration&lt;br/&gt;management\"]\n            TYPES[\"&lt;b&gt;\ud83d\udccb Type System&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;cf/types.py&lt;br/&gt;&lt;br/&gt;\u2022 Entity Types&lt;br/&gt;\u2022 Relationship Types&lt;br/&gt;&lt;br/&gt;Comprehensive type&lt;br/&gt;definitions\"]\n            EXCEPTIONS[\"&lt;b&gt;\u26a0\ufe0f Exception Handling&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;cf/exceptions.py&lt;br/&gt;&lt;br/&gt;\u2022 Error Hierarchy&lt;br/&gt;\u2022 Graceful Recovery&lt;br/&gt;&lt;br/&gt;Robust error&lt;br/&gt;management\"]\n        end\n\n        %% Internal Kernel Connections with proper spacing\n        EXPLORATION -.-&gt;|\"&lt;b&gt;queries&lt;/b&gt;\"| CKG\n        INDEXING -.-&gt;|\"&lt;b&gt;populates&lt;/b&gt;\"| CKG\n        EXPLORATION -.-&gt;|\"&lt;b&gt;reasoning&lt;/b&gt;\"| LLM\n        LLM -.-&gt;|\"&lt;b&gt;responses&lt;/b&gt;\"| ANALYZER\n        ANALYZER -.-&gt;|\"&lt;b&gt;enriched context&lt;/b&gt;\"| CKG\n        CONFIG -.-&gt;|\"&lt;b&gt;configures&lt;/b&gt;\"| EXPLORATION\n        CONFIG -.-&gt;|\"&lt;b&gt;configures&lt;/b&gt;\"| LLM\n        ENTITIES -.-&gt;|\"&lt;b&gt;linked to&lt;/b&gt;\"| RELATIONS\n        VDB -.-&gt;|\"&lt;b&gt;semantic search&lt;/b&gt;\"| ENTITIES\n    end\n\n    %% Agent Computer Interface\n    subgraph ACI [\"&lt;b&gt;\ud83d\udd0c Agent Computer Interface - cf/aci/&lt;/b&gt;\"]\n        direction TB\n\n        subgraph ACI_TOP [\"&lt;b&gt;Repository &amp; Environment Management&lt;/b&gt;\"]\n            direction LR\n            REPO[\"&lt;b&gt;\ud83d\udcc1 Repository Access&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;repo.py&lt;br/&gt;&lt;br/&gt;\u2022 LocalCodeRepo&lt;br/&gt;\u2022 RemoteCodeRepo&lt;br/&gt;&lt;br/&gt;File system abstraction&lt;br/&gt;and repository handling\"]\n            ENVMGR[\"&lt;b&gt;\ud83c\udf0d Environment Manager&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;environment_manager.py&lt;br/&gt;&lt;br/&gt;\u2022 System State&lt;br/&gt;\u2022 Resource Management&lt;br/&gt;&lt;br/&gt;Environment context&lt;br/&gt;and search capabilities\"]\n        end\n\n        subgraph ACI_BOTTOM [\"&lt;b&gt;System Access &amp; Analysis&lt;/b&gt;\"]\n            direction LR\n            SYSACCESS[\"&lt;b&gt;\ud83d\udda5\ufe0f System Access&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;system_access.py&lt;br/&gt;&lt;br/&gt;\u2022 Environment Variables&lt;br/&gt;\u2022 Command Execution&lt;br/&gt;&lt;br/&gt;System interface&lt;br/&gt;and control\"]\n            CODEINSP[\"&lt;b&gt;\ud83d\udd2c Code Inspector&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;code_inspector.py&lt;br/&gt;&lt;br/&gt;\u2022 AST Analysis&lt;br/&gt;\u2022 Pattern Detection&lt;br/&gt;&lt;br/&gt;Code structure&lt;br/&gt;analysis\"]\n        end\n    end\n\n    %% External Sources\n    subgraph EXTERNAL [\"&lt;b&gt;\ud83c\udf10 External Sources&lt;/b&gt;\"]\n        direction LR\n        GITHUB[\"&lt;b&gt;\ud83d\udce6 GitHub&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;Remote Repositories&lt;br/&gt;&lt;br/&gt;Git-based repository&lt;br/&gt;access and cloning\"]\n        REMOTE[\"&lt;b&gt;\u2601\ufe0f Cloud Storage&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;Remote Archives&lt;br/&gt;&lt;br/&gt;Cloud-based repository&lt;br/&gt;and file access\"] \n        LOCAL[\"&lt;b&gt;\ud83d\udcbd Local Filesystem&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;Directory Access&lt;br/&gt;&lt;br/&gt;Local file and&lt;br/&gt;directory operations\"]\n    end\n\n    %% Main Flow Connections with better arrow paths\n    CLI ==&gt;|\"&lt;b&gt;user commands&lt;/b&gt;\"| KERNEL\n    WEB -.-&gt;|\"&lt;b&gt;future web UI&lt;/b&gt;\"| KERNEL\n\n    KERNEL &lt;==&gt;|\"&lt;b&gt;system interface&lt;/b&gt;\"| ACI\n\n    %% ACI to External connections\n    REPO ==&gt;|\"&lt;b&gt;clone/fetch&lt;/b&gt;\"| GITHUB\n    REPO ==&gt;|\"&lt;b&gt;download&lt;/b&gt;\"| REMOTE\n    REPO ==&gt;|\"&lt;b&gt;read files&lt;/b&gt;\"| LOCAL\n\n    %% Detailed Internal Flows with cleaner paths\n    REPO ==&gt;|\"&lt;b&gt;file content&lt;/b&gt;\"| INDEXING\n    ENVMGR ==&gt;|\"&lt;b&gt;context&lt;/b&gt;\"| EXPLORATION\n    CODEINSP ==&gt;|\"&lt;b&gt;analysis&lt;/b&gt;\"| CKG\n    SYSACCESS ==&gt;|\"&lt;b&gt;env vars&lt;/b&gt;\"| CONFIG\n\n    %% High Contrast Professional Color Styling\n    classDef userInterface fill:#1e40af,stroke:#1e3a8a,stroke-width:3px,color:#ffffff\n    classDef kernel fill:#7c3aed,stroke:#6d28d9,stroke-width:4px,color:#ffffff\n    classDef coreComponent fill:#dc2626,stroke:#b91c1c,stroke-width:3px,color:#ffffff\n    classDef knowledge fill:#059669,stroke:#047857,stroke-width:3px,color:#ffffff\n    classDef external fill:#d97706,stroke:#b45309,stroke-width:3px,color:#ffffff\n    classDef aci fill:#0284c7,stroke:#0369a1,stroke-width:3px,color:#ffffff\n    classDef support fill:#4338ca,stroke:#3730a3,stroke-width:3px,color:#ffffff\n    classDef invisible fill:transparent,stroke:transparent\n\n    class CLI,WEB userInterface\n    class KERNEL kernel\n    class EXPLORATION,INDEXING,LLM,ANALYZER coreComponent\n    class CKG,VDB,ENTITIES,RELATIONS knowledge\n    class GITHUB,REMOTE,LOCAL external\n    class ACI,REPO,SYSACCESS,ENVMGR,CODEINSP aci\n    class CONFIG,TYPES,EXCEPTIONS support\n    class CORE_ROW,LLM_ROW,SUPPORT_ROW,ACI_TOP,ACI_BOTTOM,EXTERNAL invisible</code></pre>"},{"location":"dev/architecture/#core-components","title":"Core Components","text":"<p>Based on the actual codebase structure, CodeFusion is organized into the following main components:</p>"},{"location":"dev/architecture/#1-cli-interface-cfrun-and-cf__main__py","title":"1. CLI Interface (<code>cf/run/</code> and <code>cf/__main__.py</code>)","text":"<p>The command-line interface provides user interaction and orchestrates the entire system.</p> <p>Key Files: - <code>cf/__main__.py</code>: CLI entry point for <code>python -m cf</code> - <code>cf/run/run.py</code>: Main CLI implementation with command routing - <code>cf/run/explore_single_repo.py</code>: Single repository exploration - <code>cf/run/explore_batch_repo.py</code>: Batch repository processing - <code>cf/run/setup_neo4j.py</code>: Neo4j setup utilities</p> <p>CLI Commands: - <code>cf index &lt;repo_path&gt;</code>: Index a repository - <code>cf query \"&lt;question&gt;\"</code>: Query the knowledge base - <code>cf explore &lt;repo_path&gt;</code>: Full exploration workflow - <code>cf stats</code>: Show knowledge base statistics - <code>cf demo &lt;repo_path&gt;</code>: Run demonstration</p>"},{"location":"dev/architecture/#2-agent-computer-interface-cfaci","title":"2. Agent Computer Interface (<code>cf/aci/</code>)","text":"<p>The ACI layer provides the interface between agents and computer systems.</p> <p>Key Components: - <code>cf/aci/repo.py</code>: Repository abstractions (LocalCodeRepo, RemoteCodeRepo) - <code>cf/aci/environment_manager.py</code>: Environment and system management - <code>cf/aci/system_access.py</code>: System access utilities and environment variables - <code>cf/aci/code_inspector.py</code>: Code analysis and inspection tools - <code>cf/aci/computer_interface.py</code>: System interface layer</p> <p>Responsibilities: - Repository access and abstraction - Environment variable management - System command execution - File system operations - Code structure analysis</p>"},{"location":"dev/architecture/#3-agentic-exploration-cfagents","title":"3. Agentic Exploration (<code>cf/agents/</code>)","text":"<p>Multi-strategy code exploration using different reasoning approaches.</p> <p>Exploration Strategies: - <code>cf/agents/reasoning_agent.py</code>: ReAct (Reasoning + Acting) strategy - <code>cf/agents/plan_then_act.py</code>: Plan-then-Act systematic strategy - <code>cf/agents/sense_then_act.py</code>: Sense-then-Act adaptive strategy</p> <p>Strategy Features: - ReAct: Fast, iterative exploration with reasoning loops - Plan-Act: Systematic planning followed by execution - Sense-Act: Environmental sensing with adaptive responses</p>"},{"location":"dev/architecture/#4-knowledge-base-cfkb","title":"4. Knowledge Base (<code>cf/kb/</code>)","text":"<p>Pluggable storage backends for code knowledge and relationships.</p> <p>Key Components: - <code>cf/kb/knowledge_base.py</code>: Core knowledge base implementation - <code>cf/kb/vector_kb.py</code>: Vector database backend using FAISS - <code>cf/kb/content_analyzer.py</code>: Content analysis and question answering - <code>cf/kb/relationship_detector.py</code>: Code relationship detection</p> <p>Storage Types: - Vector Database: FAISS-based semantic similarity search - Neo4j Graph: Graph database for complex relationships (optional) - Text Storage: Simple JSON-based storage for entities/relationships</p> <p>Knowledge Representation: - Entities: Files, classes, functions, variables with metadata - Relationships: Import dependencies, function calls, inheritance - Embeddings: Semantic vectors for similarity search</p>"},{"location":"dev/architecture/#5-llm-integration-cfllm","title":"5. LLM Integration (<code>cf/llm/</code>)","text":"<p>Abstraction layer for language model providers.</p> <p>Key Components: - <code>cf/llm/llm_model.py</code>: LLM abstraction layer</p> <p>Features: - Multi-provider support via LiteLLM - OpenAI, Anthropic, Cohere, local models - Token usage tracking - Response caching - Rate limiting and retry logic</p>"},{"location":"dev/architecture/#6-code-indexing-cfindexer","title":"6. Code Indexing (<code>cf/indexer/</code>)","text":"<p>Repository processing and analysis.</p> <p>Key Components: - <code>cf/indexer/code_indexer.py</code>: Main repository indexing orchestrator</p> <p>Capabilities: - File system traversal with filtering - Code entity extraction - Relationship detection - Batch processing - Progress tracking</p>"},{"location":"dev/architecture/#core-supporting-components","title":"Core Supporting Components","text":""},{"location":"dev/architecture/#7-configuration-management-cfconfigpy","title":"7. Configuration Management (<code>cf/config.py</code>)","text":"<p>Centralized configuration system supporting multiple formats and sources.</p> <p>Key Features: - YAML and JSON configuration file support - Environment variable override capability - Configuration validation and type checking - Hierarchical configuration loading</p>"},{"location":"dev/architecture/#8-type-system-cftypespy","title":"8. Type System (<code>cf/types.py</code>)","text":"<p>Comprehensive type definitions for the entire system.</p> <p>Key Type Definitions: - <code>EntityType</code>: File, class, function, variable, import, comment types - <code>RelationshipType</code>: Import, call, inherit, use, contain relationships - <code>LanguageType</code>: Python, JavaScript, TypeScript, Java, etc. - <code>ExplorationStrategy</code>: react, plan_act, sense_act strategies - <code>KnowledgeBaseType</code>: text, vector, neo4j storage types</p>"},{"location":"dev/architecture/#9-exception-handling-cfexceptionspy","title":"9. Exception Handling (<code>cf/exceptions.py</code>)","text":"<p>Custom exception hierarchy for robust error management.</p> <p>Exception Categories: - Configuration errors - Repository access errors - Knowledge base operation errors - LLM provider errors - System access errors</p>"},{"location":"dev/architecture/#design-principles","title":"Design Principles","text":""},{"location":"dev/architecture/#1-kernel-based-architecture","title":"1. Kernel-Based Architecture","text":"<p>CodeFusion follows a kernel-based design where all core functionality is contained within the \"CodeFusion Agentic Kernel\" that coordinates:</p> <ul> <li>Agentic exploration strategies</li> <li>Knowledge base management</li> <li>LLM integration with multiple providers</li> <li>Configuration and type management</li> </ul>"},{"location":"dev/architecture/#2-agent-computer-interface-aci","title":"2. Agent Computer Interface (ACI)","text":"<p>The ACI provides a clean abstraction layer between AI agents and computer systems:</p> <ul> <li>Repository abstraction: Local and remote repository access</li> <li>System interface: Environment variables, file operations</li> <li>Code inspection: AST-based analysis and pattern detection</li> <li>Environment management: Search capabilities and resource management</li> </ul>"},{"location":"dev/architecture/#3-multi-strategy-exploration","title":"3. Multi-Strategy Exploration","text":"<p>Three distinct exploration strategies for different use cases:</p> <ul> <li>ReAct: Fast iterative reasoning and acting for general exploration</li> <li>Plan-then-Act: Systematic planning for thorough analysis</li> <li>Sense-then-Act: Adaptive sensing for complex codebases</li> </ul>"},{"location":"dev/architecture/#4-pluggable-storage-backends","title":"4. Pluggable Storage Backends","text":"<p>Support for multiple knowledge base types:</p> <ul> <li>Vector Database: FAISS-based semantic similarity search</li> <li>Neo4j Graph: Complex relationship analysis (optional)</li> <li>Text Storage: Simple JSON-based storage for minimal dependencies</li> </ul>"},{"location":"dev/architecture/#5-configuration-driven-behavior","title":"5. Configuration-Driven Behavior","text":"<p>All system behavior controlled through YAML configuration:</p> <pre><code># Example: Complete configuration\nllm_model: \"gpt-4o\"\nkb_type: \"vector\"\nexploration_strategy: \"react\"\nmax_exploration_depth: 5\nembedding_model: \"all-MiniLM-L6-v2\"\n</code></pre>"},{"location":"dev/architecture/#data-flow-and-workflows","title":"Data Flow and Workflows","text":"<p>CodeFusion follows two main workflow patterns as detailed in the Workflow Diagrams:</p>"},{"location":"dev/architecture/#1-repository-exploration-and-indexing-workflow","title":"1. Repository Exploration and Indexing Workflow","text":"<p>The indexing workflow involves systematic repository processing:</p> <ol> <li>Configuration Loading: System loads user settings and preferences from <code>config/default/config.yaml</code></li> <li>Repository Access: <code>cf/aci/repo.py</code> scans and analyzes repository structure</li> <li>Knowledge Base Setup: <code>cf/kb/knowledge_base.py</code> initializes storage layer (Neo4j or Vector DB)</li> <li>Content Analysis: <code>cf/indexer/code_indexer.py</code> extracts code entities and relationships</li> <li>Persistent Storage: Saves structured knowledge in JSON files and FAISS indexes</li> </ol> <p>Key Files Involved: - <code>cf/run/run.py</code>: CLI command orchestration - <code>cf/aci/repo.py</code>: Repository abstraction and file access - <code>cf/indexer/code_indexer.py</code>: Main indexing logic - <code>cf/kb/knowledge_base.py</code>: Storage coordination - <code>cf/kb/vector_kb.py</code>: Vector database operations</p>"},{"location":"dev/architecture/#2-query-processing-workflow","title":"2. Query Processing Workflow","text":"<p>The query workflow handles natural language questions:</p> <ol> <li>Query Analysis: <code>cf/agents/</code> strategies process natural language questions</li> <li>Multi-Strategy Search: Uses vector similarity (<code>cf/kb/vector_kb.py</code>) and relationship traversal</li> <li>Context Enrichment: <code>cf/kb/content_analyzer.py</code> gathers related entities and relationships</li> <li>LLM Integration: <code>cf/llm/llm_model.py</code> generates comprehensive answers with context</li> <li>Response Delivery: Returns structured answers with supporting evidence</li> </ol> <p>Key Files Involved: - <code>cf/run/run.py</code>: Query command handling - <code>cf/agents/reasoning_agent.py</code>: ReAct strategy implementation - <code>cf/kb/content_analyzer.py</code>: Question answering logic - <code>cf/llm/llm_model.py</code>: LLM provider abstraction - <code>cf/kb/relationship_detector.py</code>: Context enrichment</p>"},{"location":"dev/architecture/#component-details","title":"Component Details","text":""},{"location":"dev/architecture/#cli-layer-cfrun-and-cf__main__py","title":"CLI Layer (<code>cf/run/</code> and <code>cf/__main__.py</code>)","text":"<p>The CLI layer uses a modular command architecture:</p> <p>Main Entry Points: - <code>cf/__main__.py</code>: Primary CLI entry point for <code>python -m cf</code> - <code>cf/run/run.py</code>: Main command implementation and routing - <code>cf/run/explore_single_repo.py</code>: Single repository exploration workflow - <code>cf/run/explore_batch_repo.py</code>: Batch processing for multiple repositories</p> <p>Command Structure: <pre><code># From cf/run/run.py\ndef main():\n    \"\"\"Main CLI entry point with command routing\"\"\"\n    parser = create_argument_parser()\n    args = parser.parse_args()\n\n    # Route to appropriate command handler\n    if args.command == \"index\":\n        return handle_index_command(args)\n    elif args.command == \"query\":\n        return handle_query_command(args)\n    # ... other commands\n</code></pre></p> <p>Key Features: - Argument parsing with <code>argparse</code> - Configuration loading from YAML files - Progress reporting and user feedback - Error handling and graceful failures</p>"},{"location":"dev/architecture/#aci-layer-cfaci","title":"ACI Layer (<code>cf/aci/</code>)","text":"<p>The Agent Computer Interface provides system abstraction:</p> <p>Repository Abstraction (<code>cf/aci/repo.py</code>): <pre><code>class LocalCodeRepo:\n    \"\"\"Local repository access and file operations\"\"\"\n    def get_file_content(self, file_path: str) -&gt; str\n    def list_files(self, pattern: str = None) -&gt; List[str]\n    def get_repository_structure(self) -&gt; Dict\n</code></pre></p> <p>Environment Management (<code>cf/aci/environment_manager.py</code>): - System environment access - Search capabilities - Resource management - Repository overview generation</p> <p>System Access (<code>cf/aci/system_access.py</code>): - Environment variable management - Command execution - File system operations</p>"},{"location":"dev/architecture/#knowledge-base-layer-cfkb","title":"Knowledge Base Layer (<code>cf/kb/</code>)","text":"<p>Core Implementation (<code>cf/kb/knowledge_base.py</code>): The main knowledge base provides unified access to different storage backends:</p> <pre><code>class CodeKnowledgeBase:\n    \"\"\"Main knowledge base coordinator\"\"\"\n    def __init__(self, kb_type: str, config: Config)\n    def store_entities(self, entities: List[Entity]) -&gt; None\n    def query_entities(self, query: str) -&gt; List[Entity]\n    def get_relationships(self, entity_id: str) -&gt; List[Relationship]\n</code></pre> <p>Vector Storage (<code>cf/kb/vector_kb.py</code>): - FAISS-based vector database - Sentence-transformers for embeddings - Semantic similarity search - Fast content discovery</p> <p>Content Analysis (<code>cf/kb/content_analyzer.py</code>): - Intelligent question answering - Context-aware responses - Entity relationship analysis</p> <p>Relationship Detection (<code>cf/kb/relationship_detector.py</code>): - AST-based code analysis - Import dependency tracking - Function call graph construction - Class inheritance detection</p>"},{"location":"dev/architecture/#llm-integration-layer-cfllm","title":"LLM Integration Layer (<code>cf/llm/</code>)","text":"<p>Provider Abstraction (<code>cf/llm/llm_model.py</code>): <pre><code>class LlmModel:\n    \"\"\"LLM provider abstraction using LiteLLM\"\"\"\n    def __init__(self, model: str, config: Config)\n    def generate_response(self, prompt: str, **kwargs) -&gt; str\n    def get_embeddings(self, text: str) -&gt; List[float]\n</code></pre></p> <p>Features: - Multi-provider support via LiteLLM - OpenAI, Anthropic, Cohere integration - Token usage tracking - Response caching - Rate limiting and error handling</p>"},{"location":"dev/architecture/#agentic-exploration-cfagents","title":"Agentic Exploration (<code>cf/agents/</code>)","text":"<p>ReAct Strategy (<code>cf/agents/reasoning_agent.py</code>): - Reasoning + Acting cycles - Fast iterative exploration - Context-aware decision making</p> <p>Plan-then-Act (<code>cf/agents/plan_then_act.py</code>): - Strategic planning phase - Systematic execution - Goal-oriented exploration</p> <p>Sense-then-Act (<code>cf/agents/sense_then_act.py</code>): - Environmental observation - Adaptive strategy adjustment - Complex codebase handling</p>"},{"location":"dev/architecture/#configuration-architecture","title":"Configuration Architecture","text":""},{"location":"dev/architecture/#configuration-system-cfconfigpy","title":"Configuration System (<code>cf/config.py</code>)","text":"<p>CodeFusion uses a centralized configuration system that supports:</p> <p>Configuration Sources (in order of precedence): 1. Command-line arguments (highest priority) 2. Configuration files (YAML/JSON) 3. Environment variables 4. Default values (lowest priority)</p> <p>Key Features: - YAML and JSON file support - Environment variable override capability - Type validation and checking - Default configuration in <code>config/default/config.yaml</code></p> <p>Configuration Loading: <pre><code># From cf/config.py\nclass CfConfig:\n    \"\"\"Main configuration class\"\"\"\n    @classmethod\n    def from_file(cls, config_path: str) -&gt; 'CfConfig'\n    @classmethod\n    def from_dict(cls, config_dict: Dict) -&gt; 'CfConfig'\n\n    def validate(self) -&gt; None\n    def to_dict(self) -&gt; Dict\n</code></pre></p>"},{"location":"dev/architecture/#error-handling-cfexceptionspy","title":"Error Handling (<code>cf/exceptions.py</code>)","text":"<p>CodeFusion implements a comprehensive exception hierarchy for robust error management:</p>"},{"location":"dev/architecture/#exception-categories","title":"Exception Categories","text":"<p>Custom Exception Types: - Configuration Errors: Invalid settings, missing required fields - Repository Access Errors: File system issues, permission problems - Knowledge Base Errors: Storage operation failures - LLM Provider Errors: API failures, rate limits, authentication issues - System Access Errors: Environment variable or command execution issues</p>"},{"location":"dev/architecture/#error-recovery-strategies","title":"Error Recovery Strategies","text":"<p>Graceful Degradation: - Neo4j fallback to vector storage - LLM provider failover - Partial indexing continuation - Configuration validation with helpful messages</p> <p>User-Friendly Error Messages: - Clear error descriptions - Suggested fixes and solutions - Configuration validation feedback - Progress preservation during failures</p>"},{"location":"dev/architecture/#performance-considerations","title":"Performance Considerations","text":""},{"location":"dev/architecture/#batch-processing","title":"Batch Processing","text":"<p>CodeFusion implements efficient batch processing for large repositories:</p> <p>File Processing: - Configurable batch sizes for memory management - Parallel processing with worker threads - Progress tracking and user feedback - Incremental processing with checkpoints</p> <p>Vector Operations: - FAISS-based similarity search for fast queries - Optimized embedding generation - Cached embeddings to avoid recomputation - Memory-efficient vector storage</p>"},{"location":"dev/architecture/#caching-strategy","title":"Caching Strategy","text":"<p>Knowledge Base Caching: - Entity and relationship caching - Embedding cache for repeated content - LLM response caching for similar queries - Artifact reuse across sessions</p> <p>File System Optimization: - Timestamped artifact directories (<code>artifacts_{repo_name}_{timestamp}/</code>) - Incremental indexing for modified files - Configuration-based file filtering - Efficient repository traversal</p>"},{"location":"dev/architecture/#memory-management","title":"Memory Management","text":"<p>Storage Optimization: - Configurable maximum file sizes - Aggressive directory exclusion (node_modules, .git, etc.) - Streaming file processing - Garbage collection for large repositories</p> <p>Resource Monitoring: - Memory usage tracking - Configurable worker limits - Automatic cleanup mechanisms - Performance metrics collection</p>"},{"location":"dev/architecture/#testing-architecture-tests","title":"Testing Architecture (<code>tests/</code>)","text":""},{"location":"dev/architecture/#current-test-structure","title":"Current Test Structure","text":"<p>Based on the actual test directory:</p> <pre><code>tests/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 test_config.py              # Configuration testing\n\u251c\u2500\u2500 test_knowledge_base.py      # Knowledge base functionality\n\u251c\u2500\u2500 test_neo4j.py              # Neo4j backend testing\n\u2514\u2500\u2500 test_kb/                   # Additional KB-specific tests\n</code></pre>"},{"location":"dev/architecture/#test-framework","title":"Test Framework","text":"<p>Testing Tools: - pytest: Main testing framework - pytest-cov: Coverage reporting - pytest-mock: Mocking and fixtures - Pre-commit hooks: Code quality enforcement</p> <p>Test Categories: - Unit Tests: Individual component testing - Integration Tests: Knowledge base and LLM integration - Configuration Tests: YAML parsing and validation - Backend Tests: Vector and Neo4j storage testing</p>"},{"location":"dev/architecture/#extension-points","title":"Extension Points","text":"<p>CodeFusion's modular architecture supports several extension points:</p>"},{"location":"dev/architecture/#custom-knowledge-base-backends","title":"Custom Knowledge Base Backends","text":"<p>Extend <code>cf/kb/knowledge_base.py</code> to add new storage backends: - Implement vector database alternatives (Pinecone, Weaviate) - Add graph database options (ArangoDB, Amazon Neptune) - Create cloud-based storage integrations</p>"},{"location":"dev/architecture/#custom-exploration-strategies","title":"Custom Exploration Strategies","text":"<p>Add new reasoning strategies in <code>cf/agents/</code>: - Implement domain-specific exploration patterns - Create hybrid strategies combining existing approaches - Add specialized strategies for different programming languages</p>"},{"location":"dev/architecture/#custom-llm-providers","title":"Custom LLM Providers","text":"<p>Extend <code>cf/llm/llm_model.py</code> for new LLM integrations: - Local model deployments - Enterprise LLM services - Specialized code-understanding models</p>"},{"location":"dev/architecture/#repository-adapters","title":"Repository Adapters","text":"<p>Extend <code>cf/aci/repo.py</code> for different repository types: - Git repository analysis - Cloud repository access (GitHub, GitLab) - Archive and snapshot processing</p>"},{"location":"dev/architecture/#directory-structure-summary","title":"Directory Structure Summary","text":"<p>Based on the repository scan, here's the complete CodeFusion structure:</p> <pre><code>codefusion/\n\u251c\u2500\u2500 cf/                           # Main package\n\u2502   \u251c\u2500\u2500 __init__.py              # Package exports (version 0.0.1)\n\u2502   \u251c\u2500\u2500 __main__.py              # CLI entry point\n\u2502   \u251c\u2500\u2500 config.py                # Configuration management\n\u2502   \u251c\u2500\u2500 types.py                 # Type definitions and enums\n\u2502   \u251c\u2500\u2500 exceptions.py            # Exception hierarchy\n\u2502   \u251c\u2500\u2500 aci/                     # Agent Computer Interface\n\u2502   \u2502   \u251c\u2500\u2500 repo.py              # Repository abstractions\n\u2502   \u2502   \u251c\u2500\u2500 environment_manager.py\n\u2502   \u2502   \u251c\u2500\u2500 system_access.py\n\u2502   \u2502   \u251c\u2500\u2500 code_inspector.py\n\u2502   \u2502   \u2514\u2500\u2500 computer_interface.py\n\u2502   \u251c\u2500\u2500 agents/                  # Exploration strategies\n\u2502   \u2502   \u251c\u2500\u2500 reasoning_agent.py   # ReAct strategy\n\u2502   \u2502   \u251c\u2500\u2500 plan_then_act.py     # Plan-then-Act\n\u2502   \u2502   \u2514\u2500\u2500 sense_then_act.py    # Sense-then-Act\n\u2502   \u251c\u2500\u2500 indexer/                 # Code indexing\n\u2502   \u2502   \u2514\u2500\u2500 code_indexer.py\n\u2502   \u251c\u2500\u2500 kb/                      # Knowledge base\n\u2502   \u2502   \u251c\u2500\u2500 knowledge_base.py    # Core KB implementation\n\u2502   \u2502   \u251c\u2500\u2500 vector_kb.py         # FAISS backend\n\u2502   \u2502   \u251c\u2500\u2500 content_analyzer.py  # Q&amp;A system\n\u2502   \u2502   \u2514\u2500\u2500 relationship_detector.py\n\u2502   \u251c\u2500\u2500 llm/                     # LLM integration\n\u2502   \u2502   \u2514\u2500\u2500 llm_model.py         # Provider abstraction\n\u2502   \u2514\u2500\u2500 run/                     # CLI implementations\n\u2502       \u251c\u2500\u2500 run.py               # Main CLI\n\u2502       \u251c\u2500\u2500 explore_single_repo.py\n\u2502       \u251c\u2500\u2500 explore_batch_repo.py\n\u2502       \u2514\u2500\u2500 setup_neo4j.py\n\u251c\u2500\u2500 config/default/              # Configuration\n\u2502   \u2514\u2500\u2500 config.yaml             # Default settings\n\u251c\u2500\u2500 docs/                       # Documentation\n\u251c\u2500\u2500 tests/                      # Test suite\n\u251c\u2500\u2500 kb/                         # Knowledge base storage\n\u251c\u2500\u2500 trace/                      # LLM tracing\n\u251c\u2500\u2500 artifacts_*/                # Timestamped analysis results\n\u251c\u2500\u2500 pyproject.toml              # Python project config\n\u251c\u2500\u2500 mkdocs.yml                  # Documentation config\n\u2514\u2500\u2500 README.md                   # Project overview\n</code></pre>"},{"location":"dev/architecture/#key-architectural-insights","title":"Key Architectural Insights","text":"<ol> <li>Kernel-based Design: Central \"CodeFusion Agentic Kernel\" coordinates all operations</li> <li>ACI Layer: Clean abstraction between agents and computer systems</li> <li>Multi-strategy Exploration: ReAct, Plan-then-Act, Sense-then-Act approaches</li> <li>Pluggable Storage: Vector (FAISS), Neo4j, and text-based backends</li> <li>LLM Abstraction: Multi-provider support via LiteLLM</li> <li>Configuration-driven: YAML-based configuration with environment override</li> <li>Artifact Management: Timestamped directories for analysis persistence</li> </ol>"},{"location":"dev/architecture/#next-steps","title":"Next Steps","text":"<ul> <li>Review the development setup guide</li> <li>Explore testing strategies</li> <li>Check the API reference for implementation details</li> </ul>"},{"location":"dev/contributing/","title":"Contributing to CodeFusion","text":"<p>Thank you for your interest in contributing to CodeFusion! This document provides guidelines and information for contributors.</p>"},{"location":"dev/contributing/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Code of Conduct</li> <li>Getting Started</li> <li>Development Setup</li> <li>Making Changes</li> <li>Testing</li> <li>Submitting Changes</li> <li>Coding Standards</li> </ul>"},{"location":"dev/contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>This project adheres to a Code of Conduct. By participating, you are expected to uphold this code.</p>"},{"location":"dev/contributing/#getting-started","title":"Getting Started","text":"<ol> <li>Fork the repository</li> <li>Clone your fork: <code>git clone https://github.com/CodeFusionAgent/codefusion.git</code></li> <li>Add the upstream remote: <code>git remote add upstream https://github.com/CodeFusionAgent/codefusion.git</code></li> </ol>"},{"location":"dev/contributing/#development-setup","title":"Development Setup","text":"<ol> <li> <p>Install Python 3.8 or higher</p> </li> <li> <p>Create a virtual environment: <pre><code>python -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n</code></pre></p> </li> <li> <p>Install development dependencies: <pre><code>pip install -e \".[dev]\"\n</code></pre></p> </li> <li> <p>Install pre-commit hooks: <pre><code>pre-commit install\n</code></pre></p> </li> <li> <p>Verify installation: <pre><code>python -m cf demo .\n</code></pre></p> </li> </ol>"},{"location":"dev/contributing/#making-changes","title":"Making Changes","text":"<ol> <li> <p>Create a feature branch: <pre><code>git checkout -b feature/your-feature-name\n</code></pre></p> </li> <li> <p>Make your changes following our coding standards</p> </li> <li> <p>Write or update tests as needed</p> </li> <li> <p>Run the test suite: <pre><code>pytest\n</code></pre></p> </li> <li> <p>Run code quality checks: <pre><code>pre-commit run --all-files\n</code></pre></p> </li> </ol>"},{"location":"dev/contributing/#testing","title":"Testing","text":"<p>We use pytest for testing. Please ensure:</p> <ul> <li>All new code has appropriate tests</li> <li>All tests pass before submitting</li> <li>Test coverage remains high</li> </ul> <p>Run tests with: <pre><code># Run all tests\npytest\n\n# Run with coverage\npytest --cov=cf\n\n# Run specific test file\npytest tests/test_config.py\n</code></pre></p>"},{"location":"dev/contributing/#submitting-changes","title":"Submitting Changes","text":"<ol> <li> <p>Commit your changes: <pre><code>git add .\ngit commit -m \"feat: add new exploration strategy\"\n</code></pre></p> </li> <li> <p>Push to your fork: <pre><code>git push origin feature/your-feature-name\n</code></pre></p> </li> <li> <p>Create a Pull Request:</p> </li> <li>Use the provided PR template</li> <li>Include a clear description of changes</li> <li>Reference any related issues</li> <li>Ensure CI checks pass</li> </ol>"},{"location":"dev/contributing/#coding-standards","title":"Coding Standards","text":""},{"location":"dev/contributing/#python-code-style","title":"Python Code Style","text":"<ul> <li>Follow PEP 8 guidelines</li> <li>Use Black for code formatting (line length: 88)</li> <li>Use isort for import sorting</li> <li>Use type hints throughout</li> <li>Follow Google-style docstrings</li> </ul>"},{"location":"dev/contributing/#commit-messages","title":"Commit Messages","text":"<p>Use conventional commit format: - <code>feat:</code> for new features - <code>fix:</code> for bug fixes - <code>docs:</code> for documentation changes - <code>test:</code> for test additions/changes - <code>refactor:</code> for code refactoring - <code>style:</code> for formatting changes</p>"},{"location":"dev/contributing/#documentation","title":"Documentation","text":"<ul> <li>Update documentation for any user-facing changes</li> <li>Include docstrings for all public functions/classes</li> <li>Update the README if needed</li> </ul>"},{"location":"dev/contributing/#architecture-guidelines","title":"Architecture Guidelines","text":"<p>When contributing to CodeFusion:</p> <ol> <li>Respect the kernel-based architecture</li> <li>Follow the agentic exploration patterns</li> <li>Maintain separation of concerns</li> <li>Use the established type system</li> <li>Handle exceptions appropriately</li> </ol>"},{"location":"dev/contributing/#issue-reporting","title":"Issue Reporting","text":"<p>When reporting issues: - Use the provided issue templates - Include steps to reproduce - Provide system information - Include relevant logs/error messages</p>"},{"location":"dev/contributing/#questions","title":"Questions?","text":"<ul> <li>Check existing issues and discussions</li> <li>Create a new issue for questions</li> <li>Join our community discussions</li> </ul> <p>Thank you for contributing to CodeFusion!</p>"},{"location":"dev/workflow/","title":"CodeFusion Workflow Diagrams","text":""},{"location":"dev/workflow/#1-repository-exploration-and-indexing-workflow","title":"1. Repository Exploration and Indexing Workflow","text":"<pre><code>sequenceDiagram\n    participant U as User\n    participant CLI as CLI Interface\n    participant Config as Configuration\n    participant Repo as Repository\n    participant KB as Knowledge Base\n    participant Indexer as Code Indexer\n    participant Analyzer as Content Analyzer\n    participant Storage as Storage Layer\n\n    U-&gt;&gt;CLI: 1. Start repository exploration\n    CLI-&gt;&gt;Config: 2. Load configuration\n    Config--&gt;&gt;CLI: 3. Configuration ready\n\n    CLI-&gt;&gt;Repo: 4. Initialize repository access\n    Repo--&gt;&gt;CLI: 5. Repository structure scanned\n\n    CLI-&gt;&gt;KB: 6. Initialize knowledge base\n    KB-&gt;&gt;Storage: 7. Connect to storage (Neo4j/Vector)\n    Storage--&gt;&gt;KB: 8. Storage ready\n    KB--&gt;&gt;CLI: 9. Knowledge base ready\n\n    CLI-&gt;&gt;Indexer: 10. Start indexing process\n\n    loop For each file\n        Indexer-&gt;&gt;Repo: 11. Read file content\n        Repo--&gt;&gt;Indexer: 12. File content\n\n        Indexer-&gt;&gt;Analyzer: 13. Analyze code structure\n        Analyzer--&gt;&gt;Indexer: 14. Code entities extracted\n\n        Indexer-&gt;&gt;KB: 15. Store entities\n        KB-&gt;&gt;Storage: 16. Persist entities\n        Storage--&gt;&gt;KB: 17. Entities stored\n    end\n\n    Indexer-&gt;&gt;Analyzer: 18. Detect relationships\n    Analyzer--&gt;&gt;Indexer: 19. Relationships found\n\n    Indexer-&gt;&gt;KB: 20. Store relationships\n    KB-&gt;&gt;Storage: 21. Persist relationships\n    Storage--&gt;&gt;KB: 22. Relationships stored\n\n    Indexer--&gt;&gt;CLI: 23. Indexing complete\n    CLI--&gt;&gt;U: 24. Display results\n\n    %% Professional color styling\n    %%{init: {'theme':'base', 'themeVariables': {\n        'primaryColor': '#4A90E2',\n        'primaryTextColor': '#ffffff',\n        'primaryBorderColor': '#357ABD',\n        'lineColor': '#666666',\n        'secondaryColor': '#E8F4FD',\n        'tertiaryColor': '#F8FBFF',\n        'background': '#ffffff',\n        'mainBkg': '#4A90E2',\n        'secondBkg': '#7FB069',\n        'tertiaryBkg': '#E67E22',\n        'actor0': '#4A90E2',\n        'actor1': '#7FB069',\n        'actor2': '#E67E22',\n        'actor3': '#9B59B6',\n        'actor4': '#34495E',\n        'actor5': '#E74C3C',\n        'actor6': '#F39C12',\n        'actor7': '#16A085',\n        'actorTextColor': '#ffffff',\n        'actorLineColor': '#666666',\n        'signalColor': '#FFFFFF',\n        'signalTextColor': '#FFFFFF',\n        'messageFontSize': '18px',\n        'noteFontSize': '18px',\n        'actorFontSize': '20px',\n        'c0': '#E8F4FD',\n        'c1': '#E8F6E8',\n        'c2': '#FDF2E8',\n        'c3': '#F3E8F6',\n        'c4': '#E8EDF3',\n        'c5': '#FDEBEB',\n        'c6': '#FDF6E8',\n        'c7': '#E8F6F3'\n    }}}%%</code></pre>"},{"location":"dev/workflow/#2-query-processing-workflow","title":"2. Query Processing Workflow","text":"<pre><code>sequenceDiagram\n    participant U as User\n    participant CLI as CLI Interface\n    participant Config as Configuration\n    participant KB as Knowledge Base\n    participant LLM as LLM Service\n    participant Agent as Reasoning Agent\n    participant Storage as Storage Layer\n\n    U-&gt;&gt;CLI: 1. Submit query\n    CLI-&gt;&gt;Config: 2. Load configuration\n    Config--&gt;&gt;CLI: 3. Configuration ready\n\n    CLI-&gt;&gt;KB: 4. Initialize knowledge base\n    KB-&gt;&gt;Storage: 5. Connect to storage\n    Storage--&gt;&gt;KB: 6. Storage ready\n\n    CLI-&gt;&gt;LLM: 7. Initialize LLM service\n    LLM--&gt;&gt;CLI: 8. LLM ready\n\n    CLI-&gt;&gt;Agent: 9. Create reasoning agent\n    Agent--&gt;&gt;CLI: 10. Agent ready\n\n    CLI-&gt;&gt;Agent: 11. Process query\n    Agent-&gt;&gt;Agent: 12. Analyze query\n\n    alt Vector Search\n        Agent-&gt;&gt;KB: 13a. Semantic search\n        KB-&gt;&gt;Storage: 14a. Query vectors\n        Storage--&gt;&gt;KB: 15a. Similar entities\n        KB--&gt;&gt;Agent: 16a. Search results\n    else Graph Search\n        Agent-&gt;&gt;KB: 13b. Graph traversal\n        KB-&gt;&gt;Storage: 14b. Query graph\n        Storage--&gt;&gt;KB: 15b. Related entities\n        KB--&gt;&gt;Agent: 16b. Graph results\n    end\n\n    Agent-&gt;&gt;KB: 17. Get entity context\n    KB-&gt;&gt;Storage: 18. Retrieve relationships\n    Storage--&gt;&gt;KB: 19. Context data\n    KB--&gt;&gt;Agent: 20. Rich context\n\n    Agent-&gt;&gt;LLM: 21. Generate response\n    LLM--&gt;&gt;Agent: 22. Response generated\n\n    Agent-&gt;&gt;Agent: 23. Post-process answer\n    Agent--&gt;&gt;CLI: 24. Final answer\n    CLI--&gt;&gt;U: 25. Display response\n\n    %% Professional color styling\n    %%{init: {'theme':'base', 'themeVariables': {\n        'primaryColor': '#4A90E2',\n        'primaryTextColor': '#ffffff',\n        'primaryBorderColor': '#357ABD',\n        'lineColor': '#666666',\n        'secondaryColor': '#E8F4FD',\n        'tertiaryColor': '#F8FBFF',\n        'background': '#ffffff',\n        'mainBkg': '#4A90E2',\n        'secondBkg': '#7FB069',\n        'tertiaryBkg': '#E67E22',\n        'actor0': '#4A90E2',\n        'actor1': '#7FB069',\n        'actor2': '#E67E22',\n        'actor3': '#9B59B6',\n        'actor4': '#34495E',\n        'actor5': '#E74C3C',\n        'actor6': '#F39C12',\n        'actor7': '#16A085',\n        'actorTextColor': '#ffffff',\n        'actorLineColor': '#666666',\n        'signalColor': '#FFFFFF',\n        'signalTextColor': '#FFFFFF',\n        'messageFontSize': '18px',\n        'noteFontSize': '18px',\n        'actorFontSize': '20px',\n        'c0': '#E8F4FD',\n        'c1': '#E8F6E8',\n        'c2': '#FDF2E8',\n        'c3': '#F3E8F6',\n        'c4': '#E8EDF3',\n        'c5': '#FDEBEB',\n        'c6': '#FDF6E8',\n        'c7': '#E8F6F3'\n    }}}%%</code></pre>"},{"location":"dev/workflow/#key-components-interaction-summary","title":"Key Components Interaction Summary","text":""},{"location":"dev/workflow/#exploration-workflow-key-points","title":"Exploration Workflow Key Points:","text":"<ol> <li>Configuration Loading: System loads user settings and preferences</li> <li>Repository Access: Scans and analyzes repository structure</li> <li>Knowledge Base Setup: Initializes storage layer (Neo4j or Vector DB)</li> <li>Content Analysis: Extracts code entities and relationships</li> <li>Persistent Storage: Saves structured knowledge for future queries</li> </ol>"},{"location":"dev/workflow/#query-workflow-key-points","title":"Query Workflow Key Points:","text":"<ol> <li>Query Analysis: Processes natural language questions</li> <li>Multi-Strategy Search: Uses vector similarity and graph traversal</li> <li>Context Enrichment: Gathers related entities and relationships</li> <li>LLM Integration: Generates comprehensive answers with context</li> <li>Response Delivery: Returns structured answers with supporting evidence</li> </ol> <p>Both workflows support dual storage backends (Neo4j for graph analytics, Vector DB for semantic search) with automatic fallback capabilities.</p>"},{"location":"installation/dependencies/","title":"Dependencies","text":"<p>This page details all dependencies required for CodeFusion and optional components.</p>"},{"location":"installation/dependencies/#core-dependencies","title":"Core Dependencies","text":""},{"location":"installation/dependencies/#required-python-packages","title":"Required Python Packages","text":"<p>These are automatically installed with CodeFusion:</p> <pre><code>pyyaml&gt;=6.0          # Configuration file parsing\npathlib              # File path handling (Python 3.4+)\ndataclasses          # Data structures (Python 3.7+)\ntyping-extensions    # Type hints compatibility\n</code></pre>"},{"location":"installation/dependencies/#python-version","title":"Python Version","text":"<ul> <li>Minimum: Python 3.10</li> <li>Recommended: Python 3.11+</li> <li>Tested: Python 3.10, 3.11, 3.12</li> </ul>"},{"location":"installation/dependencies/#optional-dependencies","title":"Optional Dependencies","text":""},{"location":"installation/dependencies/#llm-integration","title":"LLM Integration","text":"<p>For enhanced natural language processing capabilities:</p> <pre><code># For OpenAI models\npip install openai&gt;=1.0.0\n\n# For comprehensive LLM support via LiteLLM\npip install litellm&gt;=1.0.0\n\n# For local/offline models\npip install transformers torch\n</code></pre>"},{"location":"installation/dependencies/#neo4j-graph-database","title":"Neo4j Graph Database","text":"<p>For advanced graph-based code relationship analysis:</p> <pre><code># Neo4j Python driver\npip install neo4j&gt;=5.0.0\n\n# Neo4j database server (choose one):\n\n# Option 1: Local installation (macOS)\nbrew install neo4j\n\n# Option 2: Docker\ndocker pull neo4j:latest\n\n# Option 3: Neo4j Desktop\n# Download from https://neo4j.com/download/\n</code></pre>"},{"location":"installation/dependencies/#vector-database-support","title":"Vector Database Support","text":"<p>For semantic search and similarity matching:</p> <pre><code># FAISS for fast similarity search\npip install faiss-cpu&gt;=1.7.0\n# Or for GPU support:\n# pip install faiss-gpu&gt;=1.7.0\n\n# Sentence transformers for embeddings\npip install sentence-transformers&gt;=2.0.0\n\n# Alternative vector databases\npip install chromadb&gt;=0.4.0    # ChromaDB\npip install weaviate-client    # Weaviate\npip install pinecone-client    # Pinecone\n</code></pre>"},{"location":"installation/dependencies/#development-dependencies","title":"Development Dependencies","text":"<p>For contributing to CodeFusion development:</p> <pre><code># Testing framework\npip install pytest&gt;=7.0.0\npip install pytest-cov&gt;=4.0.0\npip install pytest-mock&gt;=3.10.0\n\n# Code quality tools\npip install black&gt;=23.0.0      # Code formatting\npip install flake8&gt;=6.0.0     # Linting\npip install mypy&gt;=1.0.0       # Type checking\npip install isort&gt;=5.12.0     # Import sorting\n\n# Pre-commit hooks\npip install pre-commit&gt;=3.0.0\n\n# Documentation\npip install mkdocs&gt;=1.5.0\npip install mkdocs-material&gt;=9.0.0\npip install mkdocstrings[python]&gt;=0.20.0\npip install pymdown-extensions&gt;=10.0.0\n</code></pre>"},{"location":"installation/dependencies/#system-dependencies","title":"System Dependencies","text":""},{"location":"installation/dependencies/#operating-system-support","title":"Operating System Support","text":"<ul> <li>Linux: Ubuntu 18.04+, CentOS 7+, Debian 10+</li> <li>macOS: 10.15+ (Catalina or later)</li> <li>Windows: Windows 10+ (with WSL recommended)</li> </ul>"},{"location":"installation/dependencies/#memory-requirements","title":"Memory Requirements","text":"<ul> <li>Minimum: 4GB RAM</li> <li>Recommended: 8GB+ RAM for large repositories</li> <li>Large codebases: 16GB+ RAM recommended</li> </ul>"},{"location":"installation/dependencies/#storage-requirements","title":"Storage Requirements","text":"<ul> <li>Installation: ~100MB</li> <li>Knowledge base: Varies by repository size</li> <li>Small repo (~1,000 files): ~10MB</li> <li>Medium repo (~10,000 files): ~100MB</li> <li>Large repo (~100,000 files): ~1GB+</li> </ul>"},{"location":"installation/dependencies/#environment-setup","title":"Environment Setup","text":""},{"location":"installation/dependencies/#virtual-environment-recommended","title":"Virtual Environment (Recommended)","text":"<pre><code># Using venv (built-in)\npython3.11 -m venv codefusion-env\nsource codefusion-env/bin/activate  # On Windows: codefusion-env\\Scripts\\activate\n\n# Using conda\nconda create -n codefusion python=3.11\nconda activate codefusion\n\n# Using poetry\npoetry install\npoetry shell\n</code></pre>"},{"location":"installation/dependencies/#environment-variables","title":"Environment Variables","text":"<p>Set these for full functionality:</p> <pre><code># LLM API keys\nexport OPENAI_API_KEY=\"your-openai-key\"\nexport ANTHROPIC_API_KEY=\"your-anthropic-key\"\n\n# Neo4j configuration\nexport NEO4J_URI=\"bolt://localhost:7687\"\nexport NEO4J_USER=\"neo4j\"\nexport NEO4J_PASSWORD=\"password\"\n\n# Optional: Custom model configurations\nexport LLM_MODEL=\"gpt-4\"\nexport EMBEDDING_MODEL=\"all-MiniLM-L6-v2\"\n</code></pre>"},{"location":"installation/dependencies/#dependency-groups","title":"Dependency Groups","text":""},{"location":"installation/dependencies/#complete-installation","title":"Complete Installation","text":"<p>Install all optional dependencies:</p> <pre><code>pip install codefusion[all]\n</code></pre>"},{"location":"installation/dependencies/#specific-feature-sets","title":"Specific Feature Sets","text":"<pre><code># Graph database support\npip install codefusion[neo4j]\n\n# Vector database support  \npip install codefusion[vector]\n\n# LLM integration\npip install codefusion[llm]\n\n# Development tools\npip install codefusion[dev]\n</code></pre>"},{"location":"installation/dependencies/#compatibility-matrix","title":"Compatibility Matrix","text":"Component Python 3.10 Python 3.11 Python 3.12 Core \u2705 \u2705 \u2705 Neo4j \u2705 \u2705 \u2705 FAISS \u2705 \u2705 \u26a0\ufe0f* LiteLLM \u2705 \u2705 \u2705 <p>*\u26a0\ufe0f Limited FAISS wheel availability for Python 3.12</p>"},{"location":"installation/dependencies/#troubleshooting-dependencies","title":"Troubleshooting Dependencies","text":""},{"location":"installation/dependencies/#common-issues","title":"Common Issues","text":"<p>Conflicting Dependencies: <pre><code># Check for conflicts\npip check\n\n# Resolve with pip-tools\npip install pip-tools\npip-compile requirements.in\n</code></pre></p> <p>FAISS Installation Issues: <pre><code># For macOS with Apple Silicon\npip install faiss-cpu --no-cache-dir\n\n# Alternative for ARM64\nconda install -c conda-forge faiss-cpu\n</code></pre></p> <p>Neo4j Driver Issues: <pre><code># Update to latest version\npip install --upgrade neo4j\n\n# Test connection\npython -c \"import neo4j; print(neo4j.__version__)\"\n</code></pre></p>"},{"location":"installation/dependencies/#dependency-updates","title":"Dependency Updates","text":"<p>Stay updated with compatible versions:</p> <pre><code># Check outdated packages\npip list --outdated\n\n# Update CodeFusion\npip install --upgrade codefusion\n\n# Update all dependencies\npip install --upgrade -r requirements.txt\n</code></pre>"},{"location":"installation/dependencies/#security-considerations","title":"Security Considerations","text":""},{"location":"installation/dependencies/#api-key-management","title":"API Key Management","text":"<ul> <li>Store API keys in environment variables, not code</li> <li>Use <code>.env</code> files for local development</li> <li>Consider using secrets management for production</li> </ul>"},{"location":"installation/dependencies/#network-security","title":"Network Security","text":"<ul> <li>Neo4j should be secured in production environments</li> <li>Use TLS/SSL for Neo4j connections</li> <li>Restrict network access to database ports</li> </ul>"},{"location":"installation/dependencies/#dependency-security","title":"Dependency Security","text":"<pre><code># Check for security vulnerabilities\npython3.11 -m pip install safety\nsafety check\n\n# Audit dependencies\npip-audit\n</code></pre>"},{"location":"installation/dependencies/#performance-optimization","title":"Performance Optimization","text":""},{"location":"installation/dependencies/#vector-operations","title":"Vector Operations","text":"<pre><code># Install optimized BLAS\npip install numpy[blas]\n\n# For Intel CPUs\npip install intel-extension-for-pytorch\n</code></pre>"},{"location":"installation/dependencies/#memory-usage","title":"Memory Usage","text":"<pre><code># Monitor memory during indexing\npython3.11 -m pip install psutil\npython3.11 -c \"\nimport psutil\nprint(f'Available memory: {psutil.virtual_memory().available / 1e9:.1f} GB')\n\"\n</code></pre>"},{"location":"installation/dependencies/#next-steps","title":"Next Steps","text":"<ul> <li>Complete the Quick Start guide</li> <li>Learn about Configuration</li> <li>Explore Usage Examples</li> </ul>"},{"location":"installation/from-source/","title":"Installing from Source","text":"<p>This guide covers installing CodeFusion from source code for development or when you need the latest features.</p>"},{"location":"installation/from-source/#prerequisites","title":"Prerequisites","text":""},{"location":"installation/from-source/#system-requirements","title":"System Requirements","text":"<ul> <li>Python: 3.10 or higher</li> <li>Git: For cloning the repository</li> <li>pip: Python package manager</li> </ul>"},{"location":"installation/from-source/#optional-dependencies","title":"Optional Dependencies","text":"<ul> <li>Neo4j: For graph database functionality</li> <li>Docker: For containerized Neo4j deployment</li> </ul>"},{"location":"installation/from-source/#step-by-step-installation","title":"Step-by-Step Installation","text":""},{"location":"installation/from-source/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/CodeFusionAgent/codefusion.git\ncd codefusion\n</code></pre>"},{"location":"installation/from-source/#2-create-virtual-environment-recommended","title":"2. Create Virtual Environment (Recommended)","text":"<pre><code># Create virtual environment\npython3.11 -m venv venv\n\n# Activate it\n# On macOS/Linux:\nsource venv/bin/activate\n# On Windows:\n# venv\\Scripts\\activate\n</code></pre>"},{"location":"installation/from-source/#3-install-dependencies","title":"3. Install Dependencies","text":"<pre><code># Install in development mode\npip install -e .\n\n# Or install with all optional dependencies\npip install -e \".[all]\"\n</code></pre>"},{"location":"installation/from-source/#4-install-optional-dependencies","title":"4. Install Optional Dependencies","text":""},{"location":"installation/from-source/#for-neo4j-support","title":"For Neo4j Support","text":"<pre><code>pip install neo4j\n</code></pre>"},{"location":"installation/from-source/#for-vector-database-support","title":"For Vector Database Support","text":"<pre><code>pip install faiss-cpu sentence-transformers\n# Or for GPU support:\n# pip install faiss-gpu sentence-transformers\n</code></pre>"},{"location":"installation/from-source/#for-development","title":"For Development","text":"<pre><code>pip install -e \".[dev]\"\n</code></pre> <p>This includes testing, linting, and documentation dependencies.</p>"},{"location":"installation/from-source/#setting-up-neo4j","title":"Setting Up Neo4j","text":""},{"location":"installation/from-source/#option-1-local-installation-macos","title":"Option 1: Local Installation (macOS)","text":"<pre><code># Install via Homebrew\nbrew install neo4j\n\n# Start the service\nbrew services start neo4j\n\n# Access Neo4j Browser at http://localhost:7474\n# Default credentials: neo4j/neo4j (change on first login)\n</code></pre>"},{"location":"installation/from-source/#option-2-docker","title":"Option 2: Docker","text":"<pre><code># Run Neo4j in Docker\ndocker run \\\n    --name neo4j \\\n    -p 7474:7474 -p 7687:7687 \\\n    -d \\\n    -v $HOME/neo4j/data:/data \\\n    -v $HOME/neo4j/logs:/logs \\\n    -v $HOME/neo4j/import:/var/lib/neo4j/import \\\n    -v $HOME/neo4j/plugins:/plugins \\\n    --env NEO4J_AUTH=neo4j/password \\\n    neo4j:latest\n</code></pre>"},{"location":"installation/from-source/#option-3-neo4j-desktop","title":"Option 3: Neo4j Desktop","text":"<ol> <li>Download from Neo4j Desktop</li> <li>Install and create a new project</li> <li>Create a new database instance</li> <li>Start the database</li> </ol>"},{"location":"installation/from-source/#configuration","title":"Configuration","text":""},{"location":"installation/from-source/#environment-variables","title":"Environment Variables","text":"<p>Create a <code>.env</code> file in the project root:</p> <pre><code># .env\nOPENAI_API_KEY=your-openai-api-key\nANTHROPIC_API_KEY=your-anthropic-api-key\nNEO4J_URI=bolt://localhost:7687\nNEO4J_USER=neo4j\nNEO4J_PASSWORD=password\n</code></pre>"},{"location":"installation/from-source/#configuration-file","title":"Configuration File","text":"<p>Copy the default configuration:</p> <pre><code>cp config/default/config.yaml config/local.yaml\n</code></pre> <p>Edit <code>config/local.yaml</code> for your setup:</p> <pre><code># config/local.yaml\nllm_model: \"gpt-4\"\nllm_api_key: null  # Will use environment variable\nkb_type: \"neo4j\"\nneo4j_uri: \"bolt://localhost:7687\"\nneo4j_user: \"neo4j\"\nneo4j_password: \"password\"\nexploration_strategy: \"react\"\nmax_exploration_depth: 5\n</code></pre>"},{"location":"installation/from-source/#verification","title":"Verification","text":""},{"location":"installation/from-source/#test-the-installation","title":"Test the Installation","text":"<pre><code># Test basic functionality\npython3.11 -m cf --help\n\n# Test with a sample repository\npython3.11 -m cf demo /path/to/small/repo\n</code></pre>"},{"location":"installation/from-source/#run-tests","title":"Run Tests","text":"<pre><code># Run all tests\npytest\n\n# Run specific test categories\npytest tests/test_config.py\npytest tests/test_knowledge_base.py\n\n# Run with coverage\npytest --cov=cf tests/\n</code></pre>"},{"location":"installation/from-source/#test-neo4j-connection","title":"Test Neo4j Connection","text":"<pre><code># Test Neo4j connectivity\npython3.11 -c \"\nfrom cf.kb.knowledge_base import create_knowledge_base\nkb = create_knowledge_base('neo4j', './test_kb', \n    uri='bolt://localhost:7687', user='neo4j', password='password')\nprint('Neo4j connection successful!')\n\"\n</code></pre>"},{"location":"installation/from-source/#development-setup","title":"Development Setup","text":""},{"location":"installation/from-source/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>Set up pre-commit hooks for code quality:</p> <pre><code>pip install pre-commit\npre-commit install\n</code></pre>"},{"location":"installation/from-source/#ide-configuration","title":"IDE Configuration","text":""},{"location":"installation/from-source/#vs-code","title":"VS Code","text":"<p>Install recommended extensions: - Python - Pylance - Python Docstring Generator</p>"},{"location":"installation/from-source/#pycharm","title":"PyCharm","text":"<p>Configure interpreter to use your virtual environment.</p>"},{"location":"installation/from-source/#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/from-source/#common-build-issues","title":"Common Build Issues","text":"<p>Missing Dependencies: <pre><code># Update pip and setuptools\npip install --upgrade pip setuptools wheel\n</code></pre></p> <p>Neo4j Connection Issues: <pre><code># Check if Neo4j is running\ncurl http://localhost:7474\n\n# Check Neo4j logs\ntail -f ~/neo4j/logs/neo4j.log\n</code></pre></p> <p>Import Errors: <pre><code># Verify installation\npip list | grep codefusion\npython3.11 -c \"import cf; print(cf.__version__)\"\n</code></pre></p>"},{"location":"installation/from-source/#performance-issues","title":"Performance Issues","text":"<p>Slow Vector Operations: <pre><code># Install optimized BLAS libraries\npip install numpy[blas]\n</code></pre></p> <p>Memory Issues: <pre><code># Monitor memory usage during indexing\npython3.11 -m cf index --verbose /path/to/repo\n</code></pre></p>"},{"location":"installation/from-source/#next-steps","title":"Next Steps","text":"<ul> <li>Set up your development environment</li> <li>Learn about testing</li> <li>Explore the architecture</li> <li>Start contributing</li> </ul>"},{"location":"installation/quickstart/","title":"Quick Start Guide","text":"<p>Get CodeFusion up and running in minutes with this quick start guide.</p>"},{"location":"installation/quickstart/#installation","title":"Installation","text":""},{"location":"installation/quickstart/#option-1-install-from-pypi-recommended","title":"Option 1: Install from PyPI (Recommended)","text":"<pre><code>pip install codefusion\n</code></pre>"},{"location":"installation/quickstart/#option-2-install-from-source","title":"Option 2: Install from Source","text":"<pre><code># Clone the repository\ngit clone https://github.com/CodeFusionAgent/codefusion.git\ncd codefusion\n\n# Install in development mode\npip install -e .\n</code></pre>"},{"location":"installation/quickstart/#basic-usage","title":"Basic Usage","text":""},{"location":"installation/quickstart/#1-index-a-repository","title":"1. Index a Repository","text":"<p>Start by indexing a code repository to build the knowledge base:</p> <pre><code>cf index /path/to/your/repository\n</code></pre> <p>This will: - Scan all files in the repository - Extract code entities (classes, functions, modules) - Detect relationships between entities - Store everything in a knowledge base</p>"},{"location":"installation/quickstart/#2-query-the-code","title":"2. Query the Code","text":"<p>Ask natural language questions about your codebase:</p> <pre><code>cf query \"How does authentication work?\"\ncf query \"What are the main API endpoints?\"\ncf query \"Where is the database configuration?\"\n</code></pre>"},{"location":"installation/quickstart/#3-full-exploration","title":"3. Full Exploration","text":"<p>Run a complete exploration workflow:</p> <pre><code>cf explore /path/to/your/repository\n</code></pre> <p>This combines indexing with automatic insights and analysis.</p>"},{"location":"installation/quickstart/#configuration","title":"Configuration","text":""},{"location":"installation/quickstart/#environment-variables","title":"Environment Variables","text":"<p>Set up your LLM API key for enhanced analysis:</p> <pre><code># For OpenAI\nexport OPENAI_API_KEY=\"your-api-key-here\"\n\n# Or for Anthropic\nexport ANTHROPIC_API_KEY=\"your-api-key-here\"\n</code></pre>"},{"location":"installation/quickstart/#configuration-file","title":"Configuration File","text":"<p>Create a configuration file for custom settings:</p> <pre><code># config.yaml\nllm_model: \"gpt-4\"\nkb_type: \"neo4j\"  # or \"vector\"\nexploration_strategy: \"react\"  # or \"plan_act\", \"sense_act\"\n</code></pre> <p>Use it with:</p> <pre><code>cf --config config.yaml index /path/to/repo\n</code></pre>"},{"location":"installation/quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about CLI Commands</li> <li>Explore Configuration Options</li> <li>Check out Examples</li> <li>Read the Architecture Guide</li> </ul>"},{"location":"installation/quickstart/#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/quickstart/#common-issues","title":"Common Issues","text":"<p>Import Error: If you get import errors, make sure you're in the correct Python environment:</p> <pre><code>which python\npip list | grep codefusion\n</code></pre> <p>Neo4j Connection: If using Neo4j, ensure the database is running:</p> <pre><code># Start Neo4j (if installed via Homebrew on macOS)\nbrew services start neo4j\n\n# Or via Docker\ndocker run -p 7474:7474 -p 7687:7687 neo4j:latest\n</code></pre> <p>API Key Issues: Verify your API key is set correctly:</p> <pre><code>echo $OPENAI_API_KEY\n# Should output your API key (not empty)\n</code></pre>"},{"location":"installation/quickstart/#getting-help","title":"Getting Help","text":"<ul> <li>Check the full documentation</li> <li>Search GitHub Issues</li> <li>Create a new issue if needed</li> </ul>"},{"location":"installation/setup/","title":"Installation and Setup Guide","text":"<p>This guide covers setting up CodeFusion for development and usage.</p>"},{"location":"installation/setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8+: Required for all functionality</li> <li>Git: For cloning repositories and version control</li> <li>Virtual Environment: Highly recommended to avoid dependency conflicts</li> </ul>"},{"location":"installation/setup/#virtual-environment-setup","title":"Virtual Environment Setup","text":""},{"location":"installation/setup/#create-virtual-environment","title":"Create Virtual Environment","text":"<pre><code># Navigate to project directory\ncd codefusion\n\n# Create virtual environment\npython -m venv venv\n\n# Activate virtual environment\n# On macOS/Linux:\nsource venv/bin/activate\n\n# On Windows:\nvenv\\Scripts\\activate\n</code></pre>"},{"location":"installation/setup/#verify-activation","title":"Verify Activation","text":"<p>Your terminal prompt should show <code>(venv)</code> when the virtual environment is active:</p> <pre><code>(venv) $ python --version\nPython 3.12.x\n</code></pre>"},{"location":"installation/setup/#installation-options","title":"Installation Options","text":""},{"location":"installation/setup/#basic-installation","title":"Basic Installation","text":"<p>Install core functionality with text-based knowledge base:</p> <pre><code>pip install -e .\n</code></pre> <p>This includes: - Core system architecture - Text-based knowledge base - CLI interface - Configuration management</p>"},{"location":"installation/setup/#vector-database-support","title":"Vector Database Support","text":"<p>For semantic search and code embeddings:</p> <pre><code>pip install -e \".[vector]\"\n</code></pre> <p>Adds: - FAISS vector database - Sentence transformers for embeddings - Semantic code search capabilities</p>"},{"location":"installation/setup/#llm-integration","title":"LLM Integration","text":"<p>For AI-powered code analysis:</p> <pre><code>pip install -e \".[llm]\"\n</code></pre> <p>Adds: - LiteLLM for multiple AI providers - OpenAI, Anthropic, Cohere support - LLM tracing and monitoring</p>"},{"location":"installation/setup/#graph-database","title":"Graph Database","text":"<p>For complex relationship analysis:</p> <pre><code>pip install -e \".[neo4j]\"\n</code></pre> <p>Adds: - Neo4j driver - Graph-based knowledge storage - Advanced relationship queries</p>"},{"location":"installation/setup/#development-tools","title":"Development Tools","text":"<p>For contributing to CodeFusion:</p> <pre><code>pip install -e \".[dev]\"\n</code></pre> <p>Adds: - pytest testing framework - Code formatting (black, isort) - Type checking (mypy) - Linting (flake8) - Pre-commit hooks</p>"},{"location":"installation/setup/#complete-installation","title":"Complete Installation","text":"<p>Install everything:</p> <pre><code>pip install -e \".[all]\"\n</code></pre>"},{"location":"installation/setup/#verification","title":"Verification","text":"<p>Test your installation:</p> <pre><code># Check CLI is working\ncf --help\n\n# Run a quick demo\ncf demo\n\n# Test vector database (if installed)\npython -c \"from cf.kb.vector_kb import VectorKB; print('Vector DB available!')\"\n</code></pre>"},{"location":"installation/setup/#configuration","title":"Configuration","text":""},{"location":"installation/setup/#default-configuration","title":"Default Configuration","text":"<p>CodeFusion looks for configuration in these locations (in order): 1. Command line <code>--config</code> parameter 2. Current directory <code>config.yaml</code> 3. Default built-in configuration</p>"},{"location":"installation/setup/#basic-configuration-file","title":"Basic Configuration File","text":"<p>Create <code>config.yaml</code>:</p> <pre><code># Basic text-based setup\nkb_type: \"text\"\nkb_path: \"./kb\"\nexploration_strategy: \"react\"\nmax_file_size: 1048576  # 1MB\nexcluded_dirs: [\".git\", \"__pycache__\", \"node_modules\", \".venv\"]\n</code></pre>"},{"location":"installation/setup/#vector-database-configuration","title":"Vector Database Configuration","text":"<p>For semantic search capabilities:</p> <pre><code># Vector database setup\nkb_type: \"vector\"\nkb_path: \"./kb_vector\"\nembedding_model: \"all-MiniLM-L6-v2\"\nexploration_strategy: \"react\"\nmax_file_size: 1048576\nexcluded_dirs: [\".git\", \"__pycache__\", \"node_modules\", \".venv\"]\n</code></pre>"},{"location":"installation/setup/#llm-configuration","title":"LLM Configuration","text":"<p>For AI-powered analysis:</p> <pre><code># LLM integration\nkb_type: \"vector\"\nkb_path: \"./kb_vector\"\nllm_model: \"gpt-3.5-turbo\"\nllm_api_key: \"your-api-key-here\"  # Optional, can use env var\nembedding_model: \"all-MiniLM-L6-v2\"\nexploration_strategy: \"react\"\n</code></pre>"},{"location":"installation/setup/#environment-variables","title":"Environment Variables","text":"<p>Set these environment variables for convenience:</p> <pre><code># API keys (optional)\nexport OPENAI_API_KEY=\"your-openai-key\"\nexport ANTHROPIC_API_KEY=\"your-anthropic-key\"\n\n# Default config file\nexport CF_CONFIG=\"./config.yaml\"\n</code></pre>"},{"location":"installation/setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/setup/#common-issues","title":"Common Issues","text":"<p>ImportError: No module named 'faiss' <pre><code>pip install -e \".[vector]\"\n</code></pre></p> <p>sentence-transformers not found <pre><code>pip install sentence-transformers\n</code></pre></p> <p>Virtual environment not activated <pre><code>source venv/bin/activate  # macOS/Linux\nvenv\\Scripts\\activate     # Windows\n</code></pre></p>"},{"location":"installation/setup/#dependency-conflicts","title":"Dependency Conflicts","text":"<p>If you encounter dependency conflicts:</p> <pre><code># Create fresh virtual environment\nrm -rf venv\npython -m venv venv\nsource venv/bin/activate\n\n# Reinstall with specific versions\npip install -e \".[all]\"\n</code></pre>"},{"location":"installation/setup/#performance-issues","title":"Performance Issues","text":"<p>For large codebases:</p> <ol> <li>Increase <code>max_file_size</code> in config</li> <li>Add more directories to <code>excluded_dirs</code></li> <li>Use vector database for faster search</li> <li>Consider using smaller embedding models</li> </ol>"},{"location":"installation/setup/#next-steps","title":"Next Steps","text":"<ol> <li>Quick Start: Try <code>cf demo</code> to see CodeFusion in action</li> <li>Explore a Codebase: Run <code>cf explore /path/to/your/project</code></li> <li>Configuration: Customize <code>config.yaml</code> for your needs</li> <li>Documentation: Read the usage guides in <code>docs/usage/</code></li> </ol>"},{"location":"reference/api/","title":"API Reference","text":"<p>This document provides a complete reference for CodeFusion's Python API, allowing you to integrate CodeFusion directly into your Python applications.</p>"},{"location":"reference/api/#installation","title":"Installation","text":"<pre><code>pip install codefusion\n</code></pre>"},{"location":"reference/api/#basic-usage","title":"Basic Usage","text":"<pre><code>from cf.config import CfConfig\nfrom cf.aci import LocalCodeRepo, EnvironmentManager\n\n# Create configuration\nconfig = CfConfig.from_file(\"config.yaml\")\n# Or create from dictionary\nconfig = CfConfig.from_dict({\n    \"llm_model\": \"gpt-4\",\n    \"kb_type\": \"vector\",\n    \"exploration_strategy\": \"react\"\n})\n\n# Initialize repository\nrepo = LocalCodeRepo(\"/path/to/repository\")\n\n# Create environment manager\nenv = EnvironmentManager(repo, config)\n\n# Get repository overview\noverview = env.get_repository_overview()\nprint(f\"Primary language: {overview['primary_language']}\")\n\n# Use CLI for full functionality\n# cf index /path/to/repository\n# cf query \"How does authentication work?\"\n</code></pre>"},{"location":"reference/api/#core-classes","title":"Core Classes","text":""},{"location":"reference/api/#cfconfig","title":"CfConfig","text":"<p>Configuration management class from <code>cf.config</code>.</p> <pre><code>class CfConfig:\n    @classmethod\n    def from_file(cls, config_path: str) -&gt; 'CfConfig'\n    @classmethod\n    def from_dict(cls, config_dict: Dict) -&gt; 'CfConfig'\n    def validate(self) -&gt; None\n    def to_dict(self) -&gt; Dict\n</code></pre>"},{"location":"reference/api/#methods","title":"Methods","text":""},{"location":"reference/api/#from_fileconfig_path-str-cfconfig","title":"<code>from_file(config_path: str) -&gt; CfConfig</code>","text":"<p>Load configuration from a YAML or JSON file.</p> <p>Parameters: - <code>config_path</code> (str): Path to configuration file</p> <p>Returns: - <code>CfConfig</code>: Configuration instance</p> <p>Example: <pre><code>config = CfConfig.from_file(\"config/default/config.yaml\")\n</code></pre></p>"},{"location":"reference/api/#from_dictconfig_dict-dict-cfconfig","title":"<code>from_dict(config_dict: Dict) -&gt; CfConfig</code>","text":"<p>Create configuration from a dictionary.</p> <p>Parameters: - <code>config_dict</code> (Dict): Configuration dictionary</p> <p>Returns: - <code>CfConfig</code>: Configuration instance</p> <p>Example: <pre><code>config = CfConfig.from_dict({\n    \"llm_model\": \"gpt-4\",\n    \"kb_type\": \"vector\",\n    \"exploration_strategy\": \"react\"\n})\n</code></pre></p>"},{"location":"reference/api/#localcoderepo","title":"LocalCodeRepo","text":"<p>Repository abstraction class from <code>cf.aci.repo</code>.</p> <pre><code>class LocalCodeRepo:\n    def __init__(self, repo_path: str)\n    def get_file_content(self, file_path: str) -&gt; str\n    def list_files(self, pattern: str = None) -&gt; List[str]\n    def get_repository_structure(self) -&gt; Dict\n</code></pre>"},{"location":"reference/api/#environmentmanager","title":"EnvironmentManager","text":"<p>Environment management class from <code>cf.aci.environment_manager</code>.</p> <pre><code>class EnvironmentManager:\n    def __init__(self, repo: LocalCodeRepo, config: CfConfig)\n    def get_repository_overview(self) -&gt; Dict\n    def suggest_exploration_strategy(self) -&gt; List[str]\n</code></pre>"},{"location":"reference/api/#knowledge-base-classes","title":"Knowledge Base Classes","text":""},{"location":"reference/api/#codeknowledgebase","title":"CodeKnowledgeBase","text":"<p>Core knowledge base from <code>cf.kb.knowledge_base</code>.</p> <pre><code>class CodeKnowledgeBase:\n    def __init__(self, kb_type: str, config: CfConfig)\n    def store_entities(self, entities: List[Entity]) -&gt; None\n    def query_entities(self, query: str) -&gt; List[Entity]\n    def get_relationships(self, entity_id: str) -&gt; List[Relationship]\n</code></pre>"},{"location":"reference/api/#vectorkb","title":"VectorKB","text":"<p>Vector database implementation from <code>cf.kb.vector_kb</code>.</p> <pre><code>class VectorKB:\n    def __init__(self, kb_path: str, embedding_model: str)\n    def add_documents(self, documents: List[str]) -&gt; None\n    def search(self, query: str, k: int = 5) -&gt; List[Tuple[str, float]]\n</code></pre>"},{"location":"reference/api/#configuration","title":"Configuration","text":""},{"location":"reference/api/#config","title":"Config","text":"<p>Configuration class for CodeFusion settings.</p> <pre><code>class Config:\n    def __init__(self, **kwargs)\n    def load_from_file(self, file_path: str) -&gt; None\n    def save_to_file(self, file_path: str) -&gt; None\n    def validate(self) -&gt; List[ValidationError]\n</code></pre>"},{"location":"reference/api/#constructor-parameters","title":"Constructor Parameters","text":"<pre><code>Config(\n    # Basic settings\n    repo_path: str = None,\n    output_dir: str = \"./output\",\n\n    # LLM settings\n    llm_model: str = \"gpt-3.5-turbo\",\n    llm_api_key: str = None,\n    llm_base_url: str = None,\n    llm_temperature: float = 0.0,\n    llm_max_tokens: int = 4096,\n\n    # Knowledge base settings\n    kb_type: str = \"vector\",\n    kb_path: str = \"./kb\",\n\n    # Vector DB settings\n    embedding_model: str = \"all-MiniLM-L6-v2\",\n    similarity_threshold: float = 0.7,\n\n    # Neo4j settings\n    neo4j_uri: str = None,\n    neo4j_user: str = None,\n    neo4j_password: str = None,\n    neo4j_database: str = \"neo4j\",\n\n    # Exploration settings\n    exploration_strategy: str = \"react\",\n    max_exploration_depth: int = 5,\n\n    # File filtering\n    max_file_size: int = 1048576,\n    excluded_dirs: List[str] = None,\n    excluded_extensions: List[str] = None,\n\n    # Performance settings\n    batch_size: int = 100,\n    max_workers: int = 4,\n    cache_enabled: bool = True,\n\n    # Logging settings\n    log_level: str = \"INFO\",\n    verbose: bool = False,\n    debug: bool = False\n)\n</code></pre>"},{"location":"reference/api/#methods_1","title":"Methods","text":""},{"location":"reference/api/#load_from_filefile_path-str-none","title":"<code>load_from_file(file_path: str) -&gt; None</code>","text":"<p>Load configuration from a YAML file.</p> <p>Parameters: - <code>file_path</code> (str): Path to YAML configuration file</p> <p>Raises: - <code>FileNotFoundError</code>: If configuration file doesn't exist - <code>yaml.YAMLError</code>: If file contains invalid YAML</p> <p>Example: <pre><code>config = Config()\nconfig.load_from_file(\"my-config.yaml\")\n</code></pre></p>"},{"location":"reference/api/#save_to_filefile_path-str-none","title":"<code>save_to_file(file_path: str) -&gt; None</code>","text":"<p>Save configuration to a YAML file.</p> <p>Parameters: - <code>file_path</code> (str): Path where to save configuration</p> <p>Example: <pre><code>config = Config(llm_model=\"gpt-4\", kb_type=\"neo4j\")\nconfig.save_to_file(\"saved-config.yaml\")\n</code></pre></p>"},{"location":"reference/api/#validate-listvalidationerror","title":"<code>validate() -&gt; List[ValidationError]</code>","text":"<p>Validate configuration settings.</p> <p>Returns: - <code>List[ValidationError]</code>: List of validation errors, empty if valid</p> <p>Example: <pre><code>config = Config(kb_type=\"neo4j\")  # Missing neo4j_uri\nerrors = config.validate()\nfor error in errors:\n    print(f\"Error: {error.message}\")\n</code></pre></p>"},{"location":"reference/api/#result-objects","title":"Result Objects","text":""},{"location":"reference/api/#indexresult","title":"IndexResult","text":"<p>Result object from repository indexing.</p> <pre><code>class IndexResult:\n    success: bool\n    file_count: int\n    entity_count: int\n    relationship_count: int\n    duration_seconds: float\n    errors: List[str]\n    warnings: List[str]\n</code></pre> <p>Example: <pre><code>result = cf.index(\"/path/to/repo\")\nif result.success:\n    print(f\"Successfully indexed {result.file_count} files\")\nelse:\n    print(f\"Indexing failed: {result.errors}\")\n</code></pre></p>"},{"location":"reference/api/#queryresult","title":"QueryResult","text":"<p>Result object from querying the knowledge base.</p> <pre><code>class QueryResult:\n    question: str\n    answer: str\n    confidence: float\n    sources: List[Source]\n    exploration_steps: List[ExplorationStep]\n    duration_seconds: float\n    token_usage: TokenUsage\n</code></pre> <p>Example: <pre><code>result = cf.query(\"How does caching work?\")\nprint(f\"Q: {result.question}\")\nprint(f\"A: {result.answer}\")\nprint(f\"Confidence: {result.confidence:.2f}\")\n\nfor source in result.sources:\n    print(f\"Source: {source.file_path}:{source.line_number}\")\n</code></pre></p>"},{"location":"reference/api/#explorationresult","title":"ExplorationResult","text":"<p>Result object from repository exploration.</p> <pre><code>class ExplorationResult:\n    repo_path: str\n    summary: str\n    insights: List[str]\n    architecture_overview: str\n    technology_stack: List[str]\n    complexity_metrics: ComplexityMetrics\n    recommendations: List[str]\n    duration_seconds: float\n</code></pre>"},{"location":"reference/api/#statsresult","title":"StatsResult","text":"<p>Result object containing knowledge base statistics.</p> <pre><code>class StatsResult:\n    kb_type: str\n    file_count: int\n    entity_count: int\n    relationship_count: int\n    kb_size_mb: float\n    last_updated: datetime\n    index_status: str\n</code></pre>"},{"location":"reference/api/#knowledge-base-api","title":"Knowledge Base API","text":""},{"location":"reference/api/#knowledgebase","title":"KnowledgeBase","text":"<p>Abstract base class for knowledge base implementations.</p> <pre><code>from cf.kb import KnowledgeBase\n\nclass KnowledgeBase(ABC):\n    @abstractmethod\n    def store(self, entities: List[Entity]) -&gt; None: ...\n\n    @abstractmethod\n    def query(self, query: str) -&gt; List[Result]: ...\n\n    @abstractmethod\n    def get_relationships(self, entity_id: str) -&gt; List[Relationship]: ...\n\n    @abstractmethod\n    def stats(self) -&gt; Dict[str, Any]: ...\n</code></pre>"},{"location":"reference/api/#creating-knowledge-bases","title":"Creating Knowledge Bases","text":"<pre><code>from cf.kb import create_knowledge_base\n\n# Vector knowledge base\nvector_kb = create_knowledge_base(\n    kb_type=\"vector\",\n    kb_path=\"./vector_kb\",\n    embedding_model=\"all-MiniLM-L6-v2\"\n)\n\n# Neo4j knowledge base\nneo4j_kb = create_knowledge_base(\n    kb_type=\"neo4j\",\n    kb_path=\"./neo4j_kb\",\n    uri=\"bolt://localhost:7687\",\n    user=\"neo4j\",\n    password=\"password\"\n)\n\n# Text knowledge base\ntext_kb = create_knowledge_base(\n    kb_type=\"text\",\n    kb_path=\"./text_kb\"\n)\n</code></pre>"},{"location":"reference/api/#entity-and-relationship-classes","title":"Entity and Relationship Classes","text":"<pre><code>class Entity:\n    id: str\n    type: str\n    name: str\n    content: str\n    file_path: str\n    line_number: int\n    metadata: Dict[str, Any]\n\nclass Relationship:\n    id: str\n    source_id: str\n    target_id: str\n    type: str\n    properties: Dict[str, Any]\n\nclass Source:\n    file_path: str\n    line_number: int\n    column_number: int\n    content: str\n</code></pre>"},{"location":"reference/api/#llm-integration-api","title":"LLM Integration API","text":""},{"location":"reference/api/#llmprovider","title":"LLMProvider","text":"<p>Abstract base class for language model providers.</p> <pre><code>from cf.llm import LLMProvider\n\nclass LLMProvider(ABC):\n    @abstractmethod\n    def complete(self, prompt: str, **kwargs) -&gt; str: ...\n\n    @abstractmethod\n    def chat(self, messages: List[Message], **kwargs) -&gt; str: ...\n\n    @abstractmethod\n    def embed(self, text: str) -&gt; List[float]: ...\n</code></pre>"},{"location":"reference/api/#creating-llm-providers","title":"Creating LLM Providers","text":"<pre><code>from cf.llm import create_llm_provider\n\n# OpenAI provider\nopenai_llm = create_llm_provider(\n    provider_type=\"openai\",\n    model=\"gpt-4\",\n    api_key=\"your-api-key\"\n)\n\n# Anthropic provider\nanthropic_llm = create_llm_provider(\n    provider_type=\"anthropic\",\n    model=\"claude-3-sonnet-20240229\",\n    api_key=\"your-api-key\"\n)\n\n# Local provider\nlocal_llm = create_llm_provider(\n    provider_type=\"local\",\n    base_url=\"http://localhost:8000/v1\",\n    model=\"local-model\"\n)\n</code></pre>"},{"location":"reference/api/#exploration-strategies-api","title":"Exploration Strategies API","text":""},{"location":"reference/api/#explorationstrategy","title":"ExplorationStrategy","text":"<p>Abstract base class for exploration strategies.</p> <pre><code>from cf.aci import ExplorationStrategy\n\nclass ExplorationStrategy(ABC):\n    @abstractmethod\n    def explore(self, query: str, context: Context) -&gt; ExplorationResult: ...\n</code></pre>"},{"location":"reference/api/#available-strategies","title":"Available Strategies","text":"<pre><code>from cf.aci import ReActStrategy, PlanActStrategy, SenseActStrategy\n\n# ReAct strategy\nreact = ReActStrategy(\n    reasoning_steps=3,\n    max_iterations=10,\n    backtrack_on_failure=True\n)\n\n# Plan-Act strategy\nplan_act = PlanActStrategy(\n    planning_depth=3,\n    execution_parallel=False,\n    plan_validation=True\n)\n\n# Sense-Act strategy\nsense_act = SenseActStrategy(\n    observation_cycles=5,\n    adaptation_threshold=0.7,\n    exploration_breadth=5\n)\n</code></pre>"},{"location":"reference/api/#error-handling","title":"Error Handling","text":""},{"location":"reference/api/#exception-hierarchy","title":"Exception Hierarchy","text":"<pre><code>class CodeFusionError(Exception):\n    \"\"\"Base exception for CodeFusion\"\"\"\n    pass\n\nclass ConfigurationError(CodeFusionError):\n    \"\"\"Configuration-related errors\"\"\"\n    pass\n\nclass KnowledgeBaseError(CodeFusionError):\n    \"\"\"Knowledge base operation errors\"\"\"\n    pass\n\nclass LLMError(CodeFusionError):\n    \"\"\"Language model request errors\"\"\"\n    pass\n\nclass ValidationError(CodeFusionError):\n    \"\"\"Input validation errors\"\"\"\n    pass\n\nclass ResourceError(CodeFusionError):\n    \"\"\"Resource access errors (files, network, etc.)\"\"\"\n    pass\n</code></pre>"},{"location":"reference/api/#exception-handling-example","title":"Exception Handling Example","text":"<pre><code>from cf import CodeFusion\nfrom cf.exceptions import ConfigurationError, LLMError, KnowledgeBaseError\n\ntry:\n    cf = CodeFusion()\n    result = cf.query(\"How does authentication work?\")\n    print(result.answer)\n\nexcept ConfigurationError as e:\n    print(f\"Configuration error: {e}\")\nexcept LLMError as e:\n    print(f\"LLM error: {e}\")\nexcept KnowledgeBaseError as e:\n    print(f\"Knowledge base error: {e}\")\nexcept Exception as e:\n    print(f\"Unexpected error: {e}\")\n</code></pre>"},{"location":"reference/api/#async-api","title":"Async API","text":"<p>For high-performance applications, CodeFusion provides async variants:</p> <pre><code>from cf import AsyncCodeFusion\n\nasync def main():\n    cf = AsyncCodeFusion()\n\n    # Async indexing\n    result = await cf.index_async(\"/path/to/repo\")\n\n    # Async querying\n    result = await cf.query_async(\"How does caching work?\")\n\n    # Parallel queries\n    questions = [\n        \"How does authentication work?\",\n        \"What are the main API endpoints?\",\n        \"How is the database configured?\"\n    ]\n\n    results = await asyncio.gather(*[\n        cf.query_async(q) for q in questions\n    ])\n\n    for result in results:\n        print(f\"Q: {result.question}\")\n        print(f\"A: {result.answer}\\n\")\n\n# Run async code\nimport asyncio\nasyncio.run(main())\n</code></pre>"},{"location":"reference/api/#integration-examples","title":"Integration Examples","text":""},{"location":"reference/api/#flask-integration","title":"Flask Integration","text":"<pre><code>from flask import Flask, request, jsonify\nfrom cf import CodeFusion\n\napp = Flask(__name__)\ncf = CodeFusion()\n\n@app.route('/index', methods=['POST'])\ndef index_repo():\n    repo_path = request.json['repo_path']\n    result = cf.index(repo_path)\n    return jsonify({\n        'success': result.success,\n        'file_count': result.file_count,\n        'entity_count': result.entity_count\n    })\n\n@app.route('/query', methods=['POST'])\ndef query_code():\n    question = request.json['question']\n    result = cf.query(question)\n    return jsonify({\n        'answer': result.answer,\n        'confidence': result.confidence,\n        'sources': [{'file': s.file_path, 'line': s.line_number} for s in result.sources]\n    })\n</code></pre>"},{"location":"reference/api/#django-integration","title":"Django Integration","text":"<pre><code>from django.http import JsonResponse\nfrom django.views.decorators.csrf import csrf_exempt\nfrom cf import CodeFusion\nimport json\n\ncf = CodeFusion()\n\n@csrf_exempt\ndef query_view(request):\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        result = cf.query(data['question'])\n        return JsonResponse({\n            'answer': result.answer,\n            'confidence': result.confidence\n        })\n</code></pre>"},{"location":"reference/api/#jupyter-notebook-integration","title":"Jupyter Notebook Integration","text":"<pre><code># In a Jupyter notebook\nfrom cf import CodeFusion\nimport pandas as pd\n\ncf = CodeFusion()\n\n# Index repository\ncf.index(\"/path/to/repo\")\n\n# Query and display results\nquestions = [\n    \"What is the main architecture?\",\n    \"How many API endpoints exist?\",\n    \"What testing frameworks are used?\"\n]\n\nresults = []\nfor q in questions:\n    result = cf.query(q)\n    results.append({\n        'question': q,\n        'answer': result.answer,\n        'confidence': result.confidence\n    })\n\ndf = pd.DataFrame(results)\ndisplay(df)\n</code></pre>"},{"location":"reference/api/#performance-optimization","title":"Performance Optimization","text":""},{"location":"reference/api/#batch-processing","title":"Batch Processing","text":"<pre><code>from cf import CodeFusion\nfrom concurrent.futures import ThreadPoolExecutor\n\ncf = CodeFusion()\n\ndef process_repository(repo_path):\n    return cf.index(repo_path)\n\n# Process multiple repositories in parallel\nrepo_paths = [\"/path/to/repo1\", \"/path/to/repo2\", \"/path/to/repo3\"]\n\nwith ThreadPoolExecutor(max_workers=4) as executor:\n    results = list(executor.map(process_repository, repo_paths))\n\nfor result in results:\n    print(f\"Processed {result.file_count} files\")\n</code></pre>"},{"location":"reference/api/#memory-management","title":"Memory Management","text":"<pre><code>from cf import CodeFusion\nfrom cf.config import Config\n\n# Configure for large repositories\nconfig = Config(\n    max_file_size=524288,  # 512KB limit\n    batch_size=50,         # Smaller batches\n    cache_enabled=False,   # Disable caching\n    max_workers=2          # Reduce workers\n)\n\ncf = CodeFusion(config)\n</code></pre>"},{"location":"reference/api/#testing-support","title":"Testing Support","text":""},{"location":"reference/api/#mock-providers","title":"Mock Providers","text":"<pre><code>from cf.testing import MockLLMProvider, MockKnowledgeBase\n\n# Mock LLM for testing\nmock_llm = MockLLMProvider()\nmock_llm.add_response(\"How does auth work?\", \"Authentication uses JWT tokens\")\n\n# Mock knowledge base for testing\nmock_kb = MockKnowledgeBase()\nmock_kb.add_entity(Entity(id=\"1\", type=\"function\", name=\"login\"))\n\n# Use mocks in tests\nconfig = Config(llm_provider=mock_llm, knowledge_base=mock_kb)\ncf = CodeFusion(config)\n</code></pre>"},{"location":"reference/api/#next-steps","title":"Next Steps","text":"<ul> <li>Check the CLI reference for command-line usage</li> <li>Review configuration options</li> <li>See usage examples for practical applications</li> </ul>"},{"location":"reference/cli/","title":"CLI Reference","text":"<p>Complete reference for CodeFusion's command-line interface.</p>"},{"location":"reference/cli/#global-options","title":"Global Options","text":"<p>These options are available for all commands:</p> <pre><code>cf [GLOBAL_OPTIONS] COMMAND [COMMAND_OPTIONS] [ARGS]\n</code></pre>"},{"location":"reference/cli/#-config-c-path","title":"<code>--config, -c PATH</code>","text":"<p>Specify a custom configuration file.</p> <p>Default: <code>config/default/config.yaml</code></p> <p>Examples: <pre><code>cf --config my-config.yaml index /path/to/repo\ncf -c production.yaml query \"How does auth work?\"\n</code></pre></p>"},{"location":"reference/cli/#-verbose-v","title":"<code>--verbose, -v</code>","text":"<p>Enable verbose output with detailed logging.</p> <p>Examples: <pre><code>cf --verbose index /path/to/repo\ncf -v query \"What are the API endpoints?\"\n</code></pre></p>"},{"location":"reference/cli/#-help","title":"<code>--help</code>","text":"<p>Show help message for the command or subcommand.</p> <p>Examples: <pre><code>cf --help                    # Global help\ncf index --help              # Command-specific help\n</code></pre></p>"},{"location":"reference/cli/#-version","title":"<code>--version</code>","text":"<p>Show CodeFusion version information.</p> <p>Example: <pre><code>cf --version\n</code></pre></p>"},{"location":"reference/cli/#commands","title":"Commands","text":""},{"location":"reference/cli/#index-index-repository","title":"<code>index</code> - Index Repository","text":"<p>Index a repository to build the knowledge base for analysis.</p> <pre><code>cf index [OPTIONS] REPO_PATH\n</code></pre>"},{"location":"reference/cli/#arguments","title":"Arguments","text":"<p><code>REPO_PATH</code> (required) - Type: Path - Description: Path to the repository to index - Example: <code>/path/to/my-project</code></p>"},{"location":"reference/cli/#options","title":"Options","text":"<p><code>--strategy {react,plan_act,sense_act}</code> - Default: <code>react</code> - Description: Exploration strategy to use during indexing - Examples: <pre><code>cf index --strategy react /path/to/repo\ncf index --strategy plan_act /path/to/repo\ncf index --strategy sense_act /path/to/repo\n</code></pre></p> <p><code>--force, -f</code> - Description: Force re-indexing even if knowledge base exists - Example: <pre><code>cf index --force /path/to/repo\n</code></pre></p> <p><code>--exclude DIR</code> (repeatable) - Description: Additional directories to exclude from indexing - Examples: <pre><code>cf index --exclude build --exclude dist /path/to/repo\ncf index --exclude \"test_*\" /path/to/repo\n</code></pre></p> <p><code>--max-files NUMBER</code> - Description: Maximum number of files to index - Default: No limit - Example: <pre><code>cf index --max-files 1000 /path/to/repo\n</code></pre></p>"},{"location":"reference/cli/#output","title":"Output","text":"<pre><code>\ud83d\udd0d Indexing repository: /path/to/repo\n\ud83d\udcc1 Found 1,247 files (342 after filtering)\n\u26a1 Processing files...\n  \u251c\u2500 Python files: 156 processed\n  \u251c\u2500 JavaScript files: 89 processed\n  \u251c\u2500 Configuration files: 23 processed\n  \u2514\u2500 Documentation files: 74 processed\n\n\ud83d\udcca Indexing completed in 45.2s\n  \u251c\u2500 Files processed: 342\n  \u251c\u2500 Entities extracted: 2,845\n  \u251c\u2500 Relationships found: 1,236\n  \u2514\u2500 Knowledge base size: 12.4 MB\n\n\u2705 Repository successfully indexed!\n</code></pre>"},{"location":"reference/cli/#examples","title":"Examples","text":"<pre><code># Basic indexing\ncf index /home/user/my-project\n\n# Index with specific strategy\ncf index --strategy plan_act /path/to/complex-project\n\n# Force re-indexing with exclusions\ncf index --force --exclude node_modules --exclude .git /path/to/repo\n\n# Index with file limit and verbose output\ncf --verbose index --max-files 500 /path/to/repo\n</code></pre>"},{"location":"reference/cli/#query-query-knowledge-base","title":"<code>query</code> - Query Knowledge Base","text":"<p>Ask natural language questions about the indexed codebase.</p> <pre><code>cf query [OPTIONS] QUESTION\n</code></pre>"},{"location":"reference/cli/#arguments_1","title":"Arguments","text":"<p><code>QUESTION</code> (required) - Type: String (quoted if contains spaces) - Description: Natural language question about the code - Examples:   - <code>\"How does authentication work?\"</code>   - <code>\"What are the main API endpoints?\"</code>   - <code>\"How is the database configured?\"</code></p>"},{"location":"reference/cli/#options_1","title":"Options","text":"<p><code>--repo-path PATH</code> - Description: Repository path (if not using saved knowledge base) - Example: <pre><code>cf query --repo-path /path/to/repo \"How does caching work?\"\n</code></pre></p> <p><code>--strategy {react,plan_act,sense_act}</code> - Default: <code>react</code> - Description: Exploration strategy for answering the question - Examples: <pre><code>cf query --strategy plan_act \"How do I set up this project?\"\ncf query --strategy sense_act \"What architectural patterns are used?\"\n</code></pre></p> <p><code>--max-depth NUMBER</code> - Description: Maximum exploration depth (overrides config) - Default: From configuration - Example: <pre><code>cf query --max-depth 10 \"Complex architectural question\"\n</code></pre></p> <p><code>--format {text,json,markdown}</code> - Default: <code>text</code> - Description: Output format for the answer - Examples: <pre><code>cf query --format json \"How does auth work?\"\ncf query --format markdown \"Project structure overview\"\n</code></pre></p> <p><code>--save-exploration PATH</code> - Description: Save detailed exploration steps to file - Example: <pre><code>cf query --save-exploration exploration.json \"Complex question\"\n</code></pre></p>"},{"location":"reference/cli/#output_1","title":"Output","text":"<p>Text Format (default): <pre><code>\ud83d\udd0d Query: How does user authentication work?\n\n\ud83d\udcdd Answer:\nThe application uses JWT-based authentication with the following components:\n\n1. Login endpoint (/api/auth/login) validates credentials\n2. JWT tokens are generated using the jsonwebtoken library\n3. Middleware (auth.js) validates tokens on protected routes\n4. User sessions are managed in Redis for quick lookup\n\n\ud83d\udd17 Key Files:\n  \u251c\u2500 src/auth/auth.js:45 - JWT token generation\n  \u251c\u2500 src/middleware/auth.js:12 - Token validation\n  \u251c\u2500 src/routes/auth.js:23 - Login endpoint\n  \u2514\u2500 config/auth.yaml:8 - Authentication configuration\n\n\ud83d\udca1 Confidence: 92%\n\u23f1\ufe0f  Query completed in 3.4s\n</code></pre></p> <p>JSON Format: <pre><code>{\n  \"question\": \"How does user authentication work?\",\n  \"answer\": \"The application uses JWT-based authentication...\",\n  \"confidence\": 0.92,\n  \"sources\": [\n    {\n      \"file_path\": \"src/auth/auth.js\",\n      \"line_number\": 45,\n      \"content\": \"function generateToken(user) { ... }\"\n    }\n  ],\n  \"exploration_steps\": [...],\n  \"duration_seconds\": 3.4,\n  \"token_usage\": {\n    \"prompt_tokens\": 1250,\n    \"completion_tokens\": 380,\n    \"total_tokens\": 1630\n  }\n}\n</code></pre></p>"},{"location":"reference/cli/#examples_1","title":"Examples","text":"<pre><code># Simple query\ncf query \"What testing frameworks are used?\"\n\n# Query with specific strategy\ncf query --strategy plan_act \"How do I deploy this application?\"\n\n# Query with repository path\ncf query --repo-path /path/to/repo \"How does error handling work?\"\n\n# Get JSON output\ncf query --format json \"What are the main components?\" &gt; output.json\n\n# Deep exploration\ncf query --strategy sense_act --max-depth 15 \"What architectural patterns are used?\"\n</code></pre>"},{"location":"reference/cli/#explore-full-repository-exploration","title":"<code>explore</code> - Full Repository Exploration","text":"<p>Perform comprehensive exploration and analysis of a repository.</p> <pre><code>cf explore [OPTIONS] REPO_PATH\n</code></pre>"},{"location":"reference/cli/#arguments_2","title":"Arguments","text":"<p><code>REPO_PATH</code> (required) - Type: Path - Description: Path to repository to explore - Example: <code>/path/to/project</code></p>"},{"location":"reference/cli/#options_2","title":"Options","text":"<p><code>--strategy {react,plan_act,sense_act}</code> - Default: <code>react</code> - Description: Exploration strategy to use - Example: <pre><code>cf explore --strategy sense_act /path/to/complex-project\n</code></pre></p> <p><code>--output-dir PATH</code> - Description: Directory to save exploration artifacts - Default: <code>./exploration_output</code> - Example: <pre><code>cf explore --output-dir /tmp/exploration /path/to/repo\n</code></pre></p> <p><code>--focus AREA</code> (repeatable) - Description: Focus exploration on specific areas - Options: <code>architecture</code>, <code>security</code>, <code>performance</code>, <code>testing</code>, <code>dependencies</code> - Examples: <pre><code>cf explore --focus architecture --focus security /path/to/repo\ncf explore --focus performance /path/to/repo\n</code></pre></p> <p><code>--generate-report</code> - Description: Generate comprehensive HTML report - Example: <pre><code>cf explore --generate-report /path/to/repo\n</code></pre></p>"},{"location":"reference/cli/#output_2","title":"Output","text":"<pre><code>\ud83d\ude80 Exploring repository: /path/to/project\n\n\ud83d\udcca Repository Overview:\n  \u251c\u2500 Type: Web Application (Node.js + React)\n  \u251c\u2500 Size: 1,247 files, 156,789 lines of code\n  \u251c\u2500 Primary languages: JavaScript (68%), Python (22%), CSS (10%)\n  \u2514\u2500 Last updated: 2024-03-15\n\n\ud83c\udfd7\ufe0f  Architecture Analysis:\n  \u251c\u2500 Pattern: Microservices with API Gateway\n  \u251c\u2500 Frontend: React SPA with Redux state management\n  \u251c\u2500 Backend: Express.js REST API\n  \u251c\u2500 Database: PostgreSQL with Redis caching\n  \u2514\u2500 Authentication: JWT with OAuth2 integration\n\n\ud83d\udd27 Technology Stack:\n  \u251c\u2500 Frontend: React 18, Redux Toolkit, Material-UI\n  \u251c\u2500 Backend: Node.js 18, Express.js, Passport.js\n  \u251c\u2500 Database: PostgreSQL 14, Redis 7\n  \u251c\u2500 Testing: Jest, Cypress, Supertest\n  \u2514\u2500 Build: Webpack 5, Babel, ESLint\n\n\ud83d\udd12 Security Features:\n  \u251c\u2500 Authentication: JWT + OAuth2 (Google, GitHub)\n  \u251c\u2500 Authorization: Role-based access control (RBAC)\n  \u251c\u2500 Input validation: Joi schema validation\n  \u251c\u2500 Security headers: Helmet.js middleware\n  \u2514\u2500 Rate limiting: Express rate limiter\n\n\ud83d\udcc8 Code Quality Metrics:\n  \u251c\u2500 Test coverage: 87% (target: 90%)\n  \u251c\u2500 Code complexity: Low-Medium\n  \u251c\u2500 Dependencies: 156 (12 with known vulnerabilities)\n  \u2514\u2500 Technical debt: Moderate\n\n\ud83d\udca1 Key Insights:\n  \u251c\u2500 Well-structured codebase with clear separation of concerns\n  \u251c\u2500 Good test coverage but missing integration tests\n  \u251c\u2500 Some dependencies need security updates\n  \u2514\u2500 Documentation could be improved\n\n\ud83c\udfaf Recommendations:\n  \u251c\u2500 Update vulnerable dependencies (express, lodash)\n  \u251c\u2500 Add integration tests for critical user flows\n  \u251c\u2500 Implement API documentation with OpenAPI\n  \u2514\u2500 Consider adding monitoring and observability\n\n\u2705 Exploration completed in 2m 34s\n\ud83d\udcc1 Report saved to: exploration_output/report.html\n</code></pre>"},{"location":"reference/cli/#examples_2","title":"Examples","text":"<pre><code># Basic exploration\ncf explore /path/to/project\n\n# Focused exploration\ncf explore --focus security --focus performance /path/to/repo\n\n# Generate detailed report\ncf explore --generate-report --output-dir ./reports /path/to/repo\n\n# Deep exploration with sense-act\ncf explore --strategy sense_act /path/to/complex-project\n</code></pre>"},{"location":"reference/cli/#stats-knowledge-base-statistics","title":"<code>stats</code> - Knowledge Base Statistics","text":"<p>Display statistics and information about the knowledge base.</p> <pre><code>cf stats [OPTIONS]\n</code></pre>"},{"location":"reference/cli/#options_3","title":"Options","text":"<p><code>--repo-path PATH</code> - Description: Repository path to show stats for - Example: <pre><code>cf stats --repo-path /path/to/repo\n</code></pre></p> <p><code>--format {text,json,table}</code> - Default: <code>text</code> - Description: Output format for statistics - Example: <pre><code>cf stats --format json\n</code></pre></p> <p><code>--detailed, -d</code> - Description: Show detailed breakdown by file type - Example: <pre><code>cf stats --detailed\n</code></pre></p>"},{"location":"reference/cli/#output_3","title":"Output","text":"<p>Text Format: <pre><code>\ud83d\udcca Knowledge Base Statistics\n\n\ud83d\uddc2\ufe0f  General:\n  \u251c\u2500 Repository: /path/to/my-project\n  \u251c\u2500 Knowledge base type: Vector (FAISS)\n  \u251c\u2500 Last indexed: 2024-03-15 14:32:18\n  \u2514\u2500 Index status: Up to date\n\n\ud83d\udcc1 Files:\n  \u251c\u2500 Total files: 1,247\n  \u251c\u2500 Indexed files: 342\n  \u251c\u2500 Excluded files: 905\n  \u2514\u2500 Average file size: 2.4 KB\n\n\ud83d\udd0d Entities:\n  \u251c\u2500 Total entities: 2,845\n  \u251c\u2500 Functions: 1,234 (43%)\n  \u251c\u2500 Classes: 456 (16%)\n  \u251c\u2500 Variables: 789 (28%)\n  \u251c\u2500 Imports: 234 (8%)\n  \u2514\u2500 Comments: 132 (5%)\n\n\ud83d\udd17 Relationships:\n  \u251c\u2500 Total relationships: 1,236\n  \u251c\u2500 Function calls: 567 (46%)\n  \u251c\u2500 Class inheritance: 89 (7%)\n  \u251c\u2500 Variable usage: 345 (28%)\n  \u2514\u2500 Import dependencies: 235 (19%)\n\n\ud83d\udcbe Storage:\n  \u251c\u2500 Knowledge base size: 12.4 MB\n  \u251c\u2500 Vector embeddings: 8.9 MB\n  \u251c\u2500 Metadata: 2.1 MB\n  \u2514\u2500 Index files: 1.4 MB\n\n\u26a1 Performance:\n  \u251c\u2500 Average query time: 1.2s\n  \u251c\u2500 Cache hit rate: 78%\n  \u2514\u2500 Memory usage: 156 MB\n</code></pre></p> <p>JSON Format: <pre><code>{\n  \"repository\": \"/path/to/my-project\",\n  \"kb_type\": \"vector\",\n  \"last_indexed\": \"2024-03-15T14:32:18Z\",\n  \"status\": \"up_to_date\",\n  \"files\": {\n    \"total\": 1247,\n    \"indexed\": 342,\n    \"excluded\": 905,\n    \"average_size_kb\": 2.4\n  },\n  \"entities\": {\n    \"total\": 2845,\n    \"by_type\": {\n      \"functions\": 1234,\n      \"classes\": 456,\n      \"variables\": 789,\n      \"imports\": 234,\n      \"comments\": 132\n    }\n  },\n  \"relationships\": {\n    \"total\": 1236,\n    \"by_type\": {\n      \"function_calls\": 567,\n      \"class_inheritance\": 89,\n      \"variable_usage\": 345,\n      \"import_dependencies\": 235\n    }\n  },\n  \"storage\": {\n    \"total_size_mb\": 12.4,\n    \"embeddings_mb\": 8.9,\n    \"metadata_mb\": 2.1,\n    \"index_mb\": 1.4\n  },\n  \"performance\": {\n    \"avg_query_time_s\": 1.2,\n    \"cache_hit_rate\": 0.78,\n    \"memory_usage_mb\": 156\n  }\n}\n</code></pre></p>"},{"location":"reference/cli/#examples_3","title":"Examples","text":"<pre><code># Basic stats\ncf stats\n\n# Stats for specific repository\ncf stats --repo-path /path/to/repo\n\n# Detailed breakdown\ncf stats --detailed\n\n# JSON output for processing\ncf stats --format json &gt; stats.json\n</code></pre>"},{"location":"reference/cli/#demo-run-demonstration","title":"<code>demo</code> - Run Demonstration","text":"<p>Run a demonstration of CodeFusion capabilities on a sample repository.</p> <pre><code>cf demo [OPTIONS] REPO_PATH\n</code></pre>"},{"location":"reference/cli/#arguments_3","title":"Arguments","text":"<p><code>REPO_PATH</code> (required) - Type: Path - Description: Path to repository for demonstration - Example: <code>/path/to/demo/project</code></p>"},{"location":"reference/cli/#options_4","title":"Options","text":"<p><code>--interactive, -i</code> - Description: Run interactive demo with user prompts - Example: <pre><code>cf demo --interactive /path/to/repo\n</code></pre></p> <p><code>--scenario SCENARIO</code> - Description: Run specific demo scenario - Options: <code>onboarding</code>, <code>code_review</code>, <code>architecture</code>, <code>debugging</code> - Example: <pre><code>cf demo --scenario onboarding /path/to/repo\n</code></pre></p>"},{"location":"reference/cli/#output_4","title":"Output","text":"<pre><code>\ud83c\udfad CodeFusion Demo\n\n\ud83d\ude80 Welcome to CodeFusion! Let's explore what this tool can do.\n\nRepository: /path/to/demo/project\nDemo scenario: General overview\n\nStep 1: Repository Indexing\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100%\n\u2705 Indexed 89 files in 8.2 seconds\n\nStep 2: Basic Code Understanding\n\u2753 Question: \"What type of application is this?\"\n\ud83d\udca1 Answer: This is a Flask web application with a React frontend...\n\nStep 3: Architecture Analysis  \n\u2753 Question: \"What is the overall architecture?\"\n\ud83d\udca1 Answer: The application follows a client-server architecture...\n\nStep 4: Development Workflow\n\u2753 Question: \"How do I run this application locally?\"\n\ud83d\udca1 Answer: To run this application locally, follow these steps...\n\n\ud83c\udf89 Demo completed! CodeFusion has successfully:\n  \u251c\u2500 Analyzed your codebase structure\n  \u251c\u2500 Understood the technology stack\n  \u251c\u2500 Provided insights about the architecture\n  \u2514\u2500 Explained the development workflow\n\nNext steps:\n  \u2022 Try asking your own questions with: cf query \"your question\"\n  \u2022 Explore the full repository with: cf explore /path/to/repo\n  \u2022 Check configuration options with: cf --help\n</code></pre>"},{"location":"reference/cli/#examples_4","title":"Examples","text":"<pre><code># Basic demo\ncf demo /path/to/sample/repo\n\n# Interactive demo\ncf demo --interactive /path/to/repo\n\n# Specific scenario\ncf demo --scenario architecture /path/to/complex/project\n</code></pre>"},{"location":"reference/cli/#environment-variables","title":"Environment Variables","text":"<p>These environment variables can override configuration settings:</p>"},{"location":"reference/cli/#api-keys","title":"API Keys","text":"<pre><code>export OPENAI_API_KEY=\"your-openai-key\"\nexport ANTHROPIC_API_KEY=\"your-anthropic-key\"\nexport AZURE_OPENAI_API_KEY=\"your-azure-key\"\n</code></pre>"},{"location":"reference/cli/#neo4j-configuration","title":"Neo4j Configuration","text":"<pre><code>export NEO4J_URI=\"bolt://localhost:7687\"\nexport NEO4J_USER=\"neo4j\"\nexport NEO4J_PASSWORD=\"password\"\n</code></pre>"},{"location":"reference/cli/#codefusion-settings","title":"CodeFusion Settings","text":"<pre><code>export CF_LLM_MODEL=\"gpt-4\"\nexport CF_KB_TYPE=\"neo4j\"\nexport CF_MAX_EXPLORATION_DEPTH=\"10\"\nexport CF_VERBOSE=\"true\"\nexport CF_DEBUG=\"true\"\n</code></pre>"},{"location":"reference/cli/#exit-codes","title":"Exit Codes","text":"<p>CodeFusion uses standard exit codes:</p> <ul> <li>0: Success</li> <li>1: General error</li> <li>2: Misuse of shell command (invalid arguments)</li> <li>3: Configuration error</li> <li>4: Resource error (file not found, permission denied)</li> <li>5: LLM provider error</li> <li>6: Knowledge base error</li> </ul>"},{"location":"reference/cli/#shell-completion","title":"Shell Completion","text":"<p>Enable shell completion for better CLI experience:</p>"},{"location":"reference/cli/#bash","title":"Bash","text":"<pre><code># Add to ~/.bashrc\neval \"$(_CF_COMPLETE=bash_source cf)\"\n</code></pre>"},{"location":"reference/cli/#zsh","title":"Zsh","text":"<pre><code># Add to ~/.zshrc\neval \"$(_CF_COMPLETE=zsh_source cf)\"\n</code></pre>"},{"location":"reference/cli/#fish","title":"Fish","text":"<pre><code># Add to ~/.config/fish/config.fish\neval (env _CF_COMPLETE=fish_source cf)\n</code></pre>"},{"location":"reference/cli/#configuration-file-integration","title":"Configuration File Integration","text":"<p>All CLI commands respect the configuration hierarchy:</p> <ol> <li>Command-line options (highest priority)</li> <li>Configuration file (--config)</li> <li>Environment variables</li> <li>Default values (lowest priority)</li> </ol>"},{"location":"reference/cli/#example-with-configuration","title":"Example with Configuration","text":"<pre><code># Use custom config\ncf --config production.yaml query \"How does deployment work?\"\n\n# Override specific settings\ncf --config base.yaml --verbose query \"Complex question\"\n</code></pre>"},{"location":"reference/cli/#debugging-and-troubleshooting","title":"Debugging and Troubleshooting","text":""},{"location":"reference/cli/#verbose-mode","title":"Verbose Mode","text":"<pre><code># Enable detailed output\ncf --verbose index /path/to/repo\ncf -v query \"debug question\"\n</code></pre>"},{"location":"reference/cli/#debug-mode","title":"Debug Mode","text":"<pre><code># Enable debug logging\nexport CF_DEBUG=1\ncf query \"question\"\n</code></pre>"},{"location":"reference/cli/#configuration-validation","title":"Configuration Validation","text":"<pre><code># Test configuration\ncf --config my-config.yaml stats\n</code></pre>"},{"location":"reference/cli/#performance-profiling","title":"Performance Profiling","text":"<pre><code># Time command execution\ntime cf index /path/to/large/repo\n\n# Monitor memory usage\n/usr/bin/time -v cf index /path/to/repo\n</code></pre>"},{"location":"reference/cli/#examples-by-use-case","title":"Examples by Use Case","text":""},{"location":"reference/cli/#development-workflow","title":"Development Workflow","text":"<pre><code># Quick project understanding\ncf explore /path/to/new/project\ncf query \"How do I run tests?\"\ncf query \"What's the deployment process?\"\n</code></pre>"},{"location":"reference/cli/#code-review","title":"Code Review","text":"<pre><code># Analyze changes\ncf index /path/to/updated/repo\ncf query \"What are potential security issues?\"\ncf query \"Are there any code quality concerns?\"\n</code></pre>"},{"location":"reference/cli/#onboarding","title":"Onboarding","text":"<pre><code># New team member workflow\ncf demo --scenario onboarding /path/to/project\ncf query \"What technologies are used?\"\ncf query \"How is the codebase structured?\"\n</code></pre>"},{"location":"reference/cli/#architecture-analysis","title":"Architecture Analysis","text":"<pre><code># Deep architectural exploration\ncf explore --strategy sense_act --focus architecture /path/to/repo\ncf query --strategy sense_act \"What design patterns are used?\"\n</code></pre>"},{"location":"reference/cli/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about configuration options</li> <li>See the Python API reference</li> <li>Check usage examples</li> </ul>"},{"location":"reference/config-schema/","title":"Configuration Schema","text":"<p>This document provides a complete schema reference for CodeFusion configuration files, including validation rules and examples.</p>"},{"location":"reference/config-schema/#schema-overview","title":"Schema Overview","text":"<p>CodeFusion configuration uses YAML format with the following top-level structure:</p> <pre><code># Basic settings\nrepo_path: string | null\noutput_dir: string\n\n# LLM configuration\nllm_model: string\nllm_api_key: string | null\nllm_base_url: string | null\nllm_temperature: number\nllm_max_tokens: integer\n\n# Knowledge base configuration  \nkb_type: enum\nkb_path: string\n\n# Vector database settings\nembedding_model: string\nsimilarity_threshold: number\n\n# Neo4j settings\nneo4j_uri: string | null\nneo4j_user: string | null\nneo4j_password: string | null\nneo4j_database: string\n\n# Exploration settings\nexploration_strategy: enum\nmax_exploration_depth: integer\n\n# File filtering\nmax_file_size: integer\nexcluded_dirs: array[string]\nexcluded_extensions: array[string]\n\n# Performance settings\nbatch_size: integer\nmax_workers: integer\ncache_enabled: boolean\n\n# Logging settings\nlog_level: enum\nverbose: boolean\ndebug: boolean\n</code></pre>"},{"location":"reference/config-schema/#json-schema","title":"JSON Schema","text":"<p>Complete JSON Schema for validation:</p> <pre><code>{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"CodeFusion Configuration\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"repo_path\": {\n      \"type\": [\"string\", \"null\"],\n      \"description\": \"Default repository path to analyze\"\n    },\n    \"output_dir\": {\n      \"type\": \"string\",\n      \"default\": \"./output\",\n      \"description\": \"Directory for output artifacts\"\n    },\n    \"llm_model\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"gpt-3.5-turbo\",\n        \"gpt-4\",\n        \"gpt-4-turbo\",\n        \"claude-3-sonnet-20240229\",\n        \"claude-3-opus-20240229\",\n        \"claude-3-haiku-20240307\",\n        \"local-model\"\n      ],\n      \"default\": \"gpt-3.5-turbo\",\n      \"description\": \"Language model to use\"\n    },\n    \"llm_api_key\": {\n      \"type\": [\"string\", \"null\"],\n      \"description\": \"API key for LLM provider\"\n    },\n    \"llm_base_url\": {\n      \"type\": [\"string\", \"null\"],\n      \"format\": \"uri\",\n      \"description\": \"Custom base URL for LLM API\"\n    },\n    \"llm_temperature\": {\n      \"type\": \"number\",\n      \"minimum\": 0.0,\n      \"maximum\": 2.0,\n      \"default\": 0.0,\n      \"description\": \"Temperature for LLM responses\"\n    },\n    \"llm_max_tokens\": {\n      \"type\": \"integer\",\n      \"minimum\": 1,\n      \"maximum\": 32768,\n      \"default\": 4096,\n      \"description\": \"Maximum tokens per LLM response\"\n    },\n    \"kb_type\": {\n      \"type\": \"string\",\n      \"enum\": [\"vector\", \"neo4j\", \"text\"],\n      \"default\": \"vector\",\n      \"description\": \"Knowledge base type\"\n    },\n    \"kb_path\": {\n      \"type\": \"string\",\n      \"default\": \"./kb\",\n      \"description\": \"Knowledge base storage path\"\n    },\n    \"embedding_model\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"all-MiniLM-L6-v2\",\n        \"all-mpnet-base-v2\",\n        \"BAAI/bge-small-en-v1.5\",\n        \"sentence-transformers/all-MiniLM-L12-v2\"\n      ],\n      \"default\": \"all-MiniLM-L6-v2\",\n      \"description\": \"Embedding model for vector database\"\n    },\n    \"similarity_threshold\": {\n      \"type\": \"number\",\n      \"minimum\": 0.0,\n      \"maximum\": 1.0,\n      \"default\": 0.7,\n      \"description\": \"Minimum similarity threshold\"\n    },\n    \"neo4j_uri\": {\n      \"type\": [\"string\", \"null\"],\n      \"format\": \"uri\",\n      \"description\": \"Neo4j database URI\"\n    },\n    \"neo4j_user\": {\n      \"type\": [\"string\", \"null\"],\n      \"description\": \"Neo4j username\"\n    },\n    \"neo4j_password\": {\n      \"type\": [\"string\", \"null\"],\n      \"description\": \"Neo4j password\"\n    },\n    \"neo4j_database\": {\n      \"type\": \"string\",\n      \"default\": \"neo4j\",\n      \"description\": \"Neo4j database name\"\n    },\n    \"exploration_strategy\": {\n      \"type\": \"string\",\n      \"enum\": [\"react\", \"plan_act\", \"sense_act\"],\n      \"default\": \"react\",\n      \"description\": \"Exploration strategy\"\n    },\n    \"max_exploration_depth\": {\n      \"type\": \"integer\",\n      \"minimum\": 1,\n      \"maximum\": 50,\n      \"default\": 5,\n      \"description\": \"Maximum exploration depth\"\n    },\n    \"max_file_size\": {\n      \"type\": \"integer\",\n      \"minimum\": 1024,\n      \"maximum\": 104857600,\n      \"default\": 1048576,\n      \"description\": \"Maximum file size in bytes\"\n    },\n    \"excluded_dirs\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"default\": [\".git\", \"__pycache__\", \"node_modules\", \".venv\", \"venv\"],\n      \"description\": \"Directories to exclude\"\n    },\n    \"excluded_extensions\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"default\": [\".pyc\", \".pyo\", \".pyd\", \".so\", \".dll\", \".exe\", \".env\"],\n      \"description\": \"File extensions to exclude\"\n    },\n    \"batch_size\": {\n      \"type\": \"integer\",\n      \"minimum\": 1,\n      \"maximum\": 1000,\n      \"default\": 100,\n      \"description\": \"Batch size for processing\"\n    },\n    \"max_workers\": {\n      \"type\": \"integer\",\n      \"minimum\": 1,\n      \"maximum\": 16,\n      \"default\": 4,\n      \"description\": \"Maximum worker threads\"\n    },\n    \"cache_enabled\": {\n      \"type\": \"boolean\",\n      \"default\": true,\n      \"description\": \"Enable result caching\"\n    },\n    \"log_level\": {\n      \"type\": \"string\",\n      \"enum\": [\"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\", \"CRITICAL\"],\n      \"default\": \"INFO\",\n      \"description\": \"Logging level\"\n    },\n    \"verbose\": {\n      \"type\": \"boolean\",\n      \"default\": false,\n      \"description\": \"Enable verbose output\"\n    },\n    \"debug\": {\n      \"type\": \"boolean\",\n      \"default\": false,\n      \"description\": \"Enable debug mode\"\n    }\n  },\n  \"required\": [],\n  \"additionalProperties\": false,\n  \"if\": {\n    \"properties\": {\n      \"kb_type\": {\n        \"const\": \"neo4j\"\n      }\n    }\n  },\n  \"then\": {\n    \"required\": [\"neo4j_uri\", \"neo4j_user\", \"neo4j_password\"]\n  }\n}\n</code></pre>"},{"location":"reference/config-schema/#field-definitions","title":"Field Definitions","text":""},{"location":"reference/config-schema/#basic-settings","title":"Basic Settings","text":""},{"location":"reference/config-schema/#repo_path","title":"<code>repo_path</code>","text":"<ul> <li>Type: String or null</li> <li>Default: null</li> <li>Description: Default repository path for analysis</li> <li>Validation: Must be a valid directory path if specified</li> <li>Example: <code>\"/path/to/my/project\"</code></li> </ul>"},{"location":"reference/config-schema/#output_dir","title":"<code>output_dir</code>","text":"<ul> <li>Type: String</li> <li>Default: <code>\"./output\"</code></li> <li>Description: Directory for storing output artifacts</li> <li>Validation: Must be a valid path</li> <li>Example: <code>\"/tmp/codefusion-output\"</code></li> </ul>"},{"location":"reference/config-schema/#llm-configuration","title":"LLM Configuration","text":""},{"location":"reference/config-schema/#llm_model","title":"<code>llm_model</code>","text":"<ul> <li>Type: String (enum)</li> <li>Default: <code>\"gpt-3.5-turbo\"</code></li> <li>Valid Values:</li> <li><code>\"gpt-3.5-turbo\"</code> - OpenAI GPT-3.5 Turbo</li> <li><code>\"gpt-4\"</code> - OpenAI GPT-4</li> <li><code>\"gpt-4-turbo\"</code> - OpenAI GPT-4 Turbo</li> <li><code>\"claude-3-sonnet-20240229\"</code> - Anthropic Claude 3 Sonnet</li> <li><code>\"claude-3-opus-20240229\"</code> - Anthropic Claude 3 Opus</li> <li><code>\"claude-3-haiku-20240307\"</code> - Anthropic Claude 3 Haiku</li> <li><code>\"local-model\"</code> - Custom local model</li> <li>Description: Language model for code analysis</li> </ul>"},{"location":"reference/config-schema/#llm_api_key","title":"<code>llm_api_key</code>","text":"<ul> <li>Type: String or null</li> <li>Default: null</li> <li>Description: API key for LLM provider</li> <li>Security: Should be set via environment variables</li> <li>Environment Variables: <code>OPENAI_API_KEY</code>, <code>ANTHROPIC_API_KEY</code></li> </ul>"},{"location":"reference/config-schema/#llm_base_url","title":"<code>llm_base_url</code>","text":"<ul> <li>Type: String (URI) or null</li> <li>Default: null</li> <li>Description: Custom base URL for LLM API</li> <li>Validation: Must be a valid URI if specified</li> <li>Examples:</li> <li><code>\"https://api.openai.com/v1\"</code></li> <li><code>\"https://your-instance.openai.azure.com/\"</code></li> <li><code>\"http://localhost:8000/v1\"</code></li> </ul>"},{"location":"reference/config-schema/#llm_temperature","title":"<code>llm_temperature</code>","text":"<ul> <li>Type: Number</li> <li>Default: 0.0</li> <li>Range: 0.0 to 2.0</li> <li>Description: Controls randomness in LLM responses</li> <li>Guidelines:</li> <li><code>0.0</code>: Deterministic responses</li> <li><code>0.3</code>: Slight creativity</li> <li><code>0.7</code>: Balanced creativity</li> <li><code>1.0+</code>: High creativity</li> </ul>"},{"location":"reference/config-schema/#llm_max_tokens","title":"<code>llm_max_tokens</code>","text":"<ul> <li>Type: Integer</li> <li>Default: 4096</li> <li>Range: 1 to 32768 (model dependent)</li> <li>Description: Maximum tokens per LLM response</li> <li>Guidelines:</li> <li><code>1024</code>: Short responses</li> <li><code>4096</code>: Standard responses</li> <li><code>8192+</code>: Long, detailed responses</li> </ul>"},{"location":"reference/config-schema/#knowledge-base-configuration","title":"Knowledge Base Configuration","text":""},{"location":"reference/config-schema/#kb_type","title":"<code>kb_type</code>","text":"<ul> <li>Type: String (enum)</li> <li>Default: <code>\"vector\"</code></li> <li>Valid Values:</li> <li><code>\"vector\"</code>: Vector database for semantic search</li> <li><code>\"neo4j\"</code>: Graph database for relationships</li> <li><code>\"text\"</code>: Simple text-based storage</li> <li>Description: Type of knowledge base storage</li> </ul>"},{"location":"reference/config-schema/#kb_path","title":"<code>kb_path</code>","text":"<ul> <li>Type: String</li> <li>Default: <code>\"./kb\"</code></li> <li>Description: Path for knowledge base storage</li> <li>Validation: Must be a valid directory path</li> <li>Example: <code>\"/data/codefusion/kb\"</code></li> </ul>"},{"location":"reference/config-schema/#vector-database-settings","title":"Vector Database Settings","text":""},{"location":"reference/config-schema/#embedding_model","title":"<code>embedding_model</code>","text":"<ul> <li>Type: String (enum)</li> <li>Default: <code>\"all-MiniLM-L6-v2\"</code></li> <li>Valid Values:</li> <li><code>\"all-MiniLM-L6-v2\"</code>: Fast, good quality (384 dimensions)</li> <li><code>\"all-mpnet-base-v2\"</code>: Higher quality, slower (768 dimensions)</li> <li><code>\"BAAI/bge-small-en-v1.5\"</code>: Optimized for code (384 dimensions)</li> <li><code>\"sentence-transformers/all-MiniLM-L12-v2\"</code>: Balanced (384 dimensions)</li> <li>Description: Model for generating text embeddings</li> </ul>"},{"location":"reference/config-schema/#similarity_threshold","title":"<code>similarity_threshold</code>","text":"<ul> <li>Type: Number</li> <li>Default: 0.7</li> <li>Range: 0.0 to 1.0</li> <li>Description: Minimum similarity score for relevant results</li> <li>Guidelines:</li> <li><code>0.5</code>: Very loose matching</li> <li><code>0.7</code>: Balanced matching</li> <li><code>0.9</code>: Very strict matching</li> </ul>"},{"location":"reference/config-schema/#neo4j-configuration","title":"Neo4j Configuration","text":""},{"location":"reference/config-schema/#neo4j_uri","title":"<code>neo4j_uri</code>","text":"<ul> <li>Type: String (URI) or null</li> <li>Default: null</li> <li>Description: Neo4j database connection URI</li> <li>Required: When <code>kb_type</code> is <code>\"neo4j\"</code></li> <li>Examples:</li> <li><code>\"bolt://localhost:7687\"</code> - Local instance</li> <li><code>\"neo4j+s://instance.databases.neo4j.io\"</code> - Neo4j AuraDB</li> </ul>"},{"location":"reference/config-schema/#neo4j_user","title":"<code>neo4j_user</code>","text":"<ul> <li>Type: String or null</li> <li>Default: null</li> <li>Description: Neo4j username</li> <li>Required: When <code>kb_type</code> is <code>\"neo4j\"</code></li> <li>Environment Variable: <code>NEO4J_USER</code></li> </ul>"},{"location":"reference/config-schema/#neo4j_password","title":"<code>neo4j_password</code>","text":"<ul> <li>Type: String or null</li> <li>Default: null</li> <li>Description: Neo4j password</li> <li>Required: When <code>kb_type</code> is <code>\"neo4j\"</code></li> <li>Security: Should be set via environment variables</li> <li>Environment Variable: <code>NEO4J_PASSWORD</code></li> </ul>"},{"location":"reference/config-schema/#neo4j_database","title":"<code>neo4j_database</code>","text":"<ul> <li>Type: String</li> <li>Default: <code>\"neo4j\"</code></li> <li>Description: Neo4j database name</li> <li>Note: Use default for single-database instances</li> </ul>"},{"location":"reference/config-schema/#exploration-settings","title":"Exploration Settings","text":""},{"location":"reference/config-schema/#exploration_strategy","title":"<code>exploration_strategy</code>","text":"<ul> <li>Type: String (enum)</li> <li>Default: <code>\"react\"</code></li> <li>Valid Values:</li> <li><code>\"react\"</code>: Reasoning + Acting (fast, balanced)</li> <li><code>\"plan_act\"</code>: Plan then Act (systematic, thorough)</li> <li><code>\"sense_act\"</code>: Sense then Act (adaptive, comprehensive)</li> <li>Description: Strategy for code exploration</li> </ul>"},{"location":"reference/config-schema/#max_exploration_depth","title":"<code>max_exploration_depth</code>","text":"<ul> <li>Type: Integer</li> <li>Default: 5</li> <li>Range: 1 to 50</li> <li>Description: Maximum number of exploration steps</li> <li>Guidelines:</li> <li><code>1-3</code>: Quick overview</li> <li><code>5-8</code>: Standard analysis</li> <li><code>10+</code>: Deep exploration</li> </ul>"},{"location":"reference/config-schema/#file-filtering","title":"File Filtering","text":""},{"location":"reference/config-schema/#max_file_size","title":"<code>max_file_size</code>","text":"<ul> <li>Type: Integer</li> <li>Default: 1048576 (1MB)</li> <li>Range: 1024 (1KB) to 104857600 (100MB)</li> <li>Description: Maximum file size in bytes</li> <li>Common Values:</li> <li><code>524288</code>: 512KB (conservative)</li> <li><code>1048576</code>: 1MB (default)</li> <li><code>5242880</code>: 5MB (large files)</li> </ul>"},{"location":"reference/config-schema/#excluded_dirs","title":"<code>excluded_dirs</code>","text":"<ul> <li>Type: Array of strings</li> <li>Default: <code>[\".git\", \"__pycache__\", \"node_modules\", \".venv\", \"venv\"]</code></li> <li>Description: Directory names to exclude from analysis</li> <li>Pattern Support: Supports glob patterns</li> <li>Examples:   <pre><code>excluded_dirs:\n  - \".git\"\n  - \"node_modules\"\n  - \"build\"\n  - \"dist\"\n  - \"*.egg-info\"\n</code></pre></li> </ul>"},{"location":"reference/config-schema/#excluded_extensions","title":"<code>excluded_extensions</code>","text":"<ul> <li>Type: Array of strings</li> <li>Default: <code>[\".pyc\", \".pyo\", \".pyd\", \".so\", \".dll\", \".exe\", \".env\"]</code></li> <li>Description: File extensions to exclude</li> <li>Format: Must include leading dot</li> <li>Examples:   <pre><code>excluded_extensions:\n  - \".pyc\"\n  - \".log\"\n  - \".tmp\"\n  - \".map\"\n  - \".min.js\"\n</code></pre></li> </ul>"},{"location":"reference/config-schema/#performance-settings","title":"Performance Settings","text":""},{"location":"reference/config-schema/#batch_size","title":"<code>batch_size</code>","text":"<ul> <li>Type: Integer</li> <li>Default: 100</li> <li>Range: 1 to 1000</li> <li>Description: Number of files to process in each batch</li> <li>Guidelines:</li> <li><code>50</code>: Conservative (low memory)</li> <li><code>100</code>: Default (balanced)</li> <li><code>200+</code>: Aggressive (high memory)</li> </ul>"},{"location":"reference/config-schema/#max_workers","title":"<code>max_workers</code>","text":"<ul> <li>Type: Integer</li> <li>Default: 4</li> <li>Range: 1 to 16</li> <li>Description: Maximum number of worker threads</li> <li>Guidelines: Usually CPU count / 2</li> </ul>"},{"location":"reference/config-schema/#cache_enabled","title":"<code>cache_enabled</code>","text":"<ul> <li>Type: Boolean</li> <li>Default: true</li> <li>Description: Enable caching of analysis results</li> <li>Note: Improves performance for repeated queries</li> </ul>"},{"location":"reference/config-schema/#logging-settings","title":"Logging Settings","text":""},{"location":"reference/config-schema/#log_level","title":"<code>log_level</code>","text":"<ul> <li>Type: String (enum)</li> <li>Default: <code>\"INFO\"</code></li> <li>Valid Values:</li> <li><code>\"DEBUG\"</code>: Very detailed logging</li> <li><code>\"INFO\"</code>: Standard logging</li> <li><code>\"WARNING\"</code>: Warnings and errors only</li> <li><code>\"ERROR\"</code>: Errors only</li> <li><code>\"CRITICAL\"</code>: Critical errors only</li> <li>Description: Minimum log level to output</li> </ul>"},{"location":"reference/config-schema/#verbose","title":"<code>verbose</code>","text":"<ul> <li>Type: Boolean</li> <li>Default: false</li> <li>Description: Enable verbose console output</li> <li>Note: Can be overridden with <code>--verbose</code> CLI flag</li> </ul>"},{"location":"reference/config-schema/#debug","title":"<code>debug</code>","text":"<ul> <li>Type: Boolean</li> <li>Default: false</li> <li>Description: Enable debug mode with detailed logging</li> <li>Note: Automatically sets <code>log_level</code> to <code>\"DEBUG\"</code></li> </ul>"},{"location":"reference/config-schema/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"reference/config-schema/#strategy-specific-settings","title":"Strategy-Specific Settings","text":""},{"location":"reference/config-schema/#react-strategy","title":"ReAct Strategy","text":"<pre><code>react_settings:\n  reasoning_steps: 3          # integer, 1-10, default: 3\n  action_timeout: 30          # integer, 10-300, default: 30\n  backtrack_on_failure: true  # boolean, default: true\n  max_iterations: 10          # integer, 1-50, default: 10\n</code></pre>"},{"location":"reference/config-schema/#plan-act-strategy","title":"Plan-Act Strategy","text":"<pre><code>plan_act_settings:\n  planning_depth: 3           # integer, 1-10, default: 3\n  execution_parallel: false   # boolean, default: false\n  plan_validation: true       # boolean, default: true\n  replanning_threshold: 0.5   # number, 0.0-1.0, default: 0.5\n  max_plan_steps: 20         # integer, 5-100, default: 20\n</code></pre>"},{"location":"reference/config-schema/#sense-act-strategy","title":"Sense-Act Strategy","text":"<pre><code>sense_act_settings:\n  observation_cycles: 5      # integer, 1-20, default: 5\n  adaptation_threshold: 0.7  # number, 0.0-1.0, default: 0.7\n  exploration_breadth: 5     # integer, 1-20, default: 5\n  context_window: 10         # integer, 5-50, default: 10\n  pattern_recognition: true  # boolean, default: true\n</code></pre>"},{"location":"reference/config-schema/#security-settings","title":"Security Settings","text":"<pre><code>security:\n  api_key_validation: true    # boolean, default: true\n  secure_temp_files: true     # boolean, default: true\n  sanitize_outputs: true      # boolean, default: true\n  max_query_length: 10000     # integer, 100-50000, default: 10000\n</code></pre>"},{"location":"reference/config-schema/#timeout-settings","title":"Timeout Settings","text":"<pre><code>timeouts:\n  llm_request: 300      # integer, 30-1800, default: 300\n  kb_operation: 600     # integer, 60-3600, default: 600\n  file_processing: 30   # integer, 5-300, default: 30\n  exploration_step: 120 # integer, 30-600, default: 120\n</code></pre>"},{"location":"reference/config-schema/#validation-rules","title":"Validation Rules","text":""},{"location":"reference/config-schema/#conditional-requirements","title":"Conditional Requirements","text":"<ol> <li>Neo4j Configuration: When <code>kb_type</code> is <code>\"neo4j\"</code>, the following fields are required:</li> <li><code>neo4j_uri</code></li> <li><code>neo4j_user</code></li> <li> <p><code>neo4j_password</code></p> </li> <li> <p>Custom LLM: When <code>llm_model</code> is <code>\"local-model\"</code>, <code>llm_base_url</code> is required.</p> </li> </ol>"},{"location":"reference/config-schema/#cross-field-validation","title":"Cross-Field Validation","text":"<ol> <li>File Size Limits: <code>max_file_size</code> should be reasonable for the chosen <code>batch_size</code></li> <li>Worker Limits: <code>max_workers</code> should not exceed available CPU cores</li> <li>Depth Limits: <code>max_exploration_depth</code> should be appropriate for the chosen strategy</li> </ol>"},{"location":"reference/config-schema/#format-validation","title":"Format Validation","text":"<ol> <li>URLs: <code>llm_base_url</code> and <code>neo4j_uri</code> must be valid URIs</li> <li>Paths: Directory paths must be valid for the operating system</li> <li>Extensions: File extensions must start with a dot (<code>.</code>)</li> </ol>"},{"location":"reference/config-schema/#environment-variable-mapping","title":"Environment Variable Mapping","text":"<p>Configuration fields can be overridden with environment variables:</p> <pre><code># Basic mapping pattern: CF_&lt;FIELD_NAME&gt;\nexport CF_LLM_MODEL=\"gpt-4\"\nexport CF_KB_TYPE=\"neo4j\"\nexport CF_MAX_EXPLORATION_DEPTH=\"10\"\n\n# Nested fields use underscores\nexport CF_REACT_SETTINGS_REASONING_STEPS=\"5\"\nexport CF_NEO4J_SETTINGS_MAX_CONNECTIONS=\"10\"\n\n# Array values use JSON format\nexport CF_EXCLUDED_DIRS='[\".git\", \"node_modules\", \"build\"]'\nexport CF_EXCLUDED_EXTENSIONS='[\".pyc\", \".log\", \".tmp\"]'\n</code></pre>"},{"location":"reference/config-schema/#configuration-examples","title":"Configuration Examples","text":""},{"location":"reference/config-schema/#minimal-configuration","title":"Minimal Configuration","text":"<pre><code>llm_model: \"gpt-3.5-turbo\"\nkb_type: \"text\"\n</code></pre>"},{"location":"reference/config-schema/#development-configuration","title":"Development Configuration","text":"<pre><code>llm_model: \"gpt-3.5-turbo\"\nkb_type: \"vector\"\nexploration_strategy: \"react\"\nmax_exploration_depth: 3\nverbose: true\n\nexcluded_dirs:\n  - \".git\"\n  - \"node_modules\"\n  - \"__pycache__\"\n</code></pre>"},{"location":"reference/config-schema/#production-configuration","title":"Production Configuration","text":"<pre><code>llm_model: \"gpt-4\"\nllm_temperature: 0.1\nkb_type: \"neo4j\"\nneo4j_uri: \"bolt://neo4j-cluster:7687\"\nneo4j_user: \"production_user\"\nneo4j_password: null  # Set via environment\n\nexploration_strategy: \"plan_act\"\nmax_exploration_depth: 10\nbatch_size: 200\nmax_workers: 8\n\nlog_level: \"WARNING\"\ncache_enabled: true\n</code></pre>"},{"location":"reference/config-schema/#memory-optimized-configuration","title":"Memory-Optimized Configuration","text":"<pre><code>kb_type: \"text\"\nmax_file_size: 524288  # 512KB\nbatch_size: 25\nmax_workers: 2\ncache_enabled: false\n\nexcluded_dirs:\n  - \".git\"\n  - \"node_modules\"\n  - \"vendor\"\n  - \"build\"\n  - \"dist\"\n  - \"logs\"\n</code></pre>"},{"location":"reference/config-schema/#validation-tools","title":"Validation Tools","text":""},{"location":"reference/config-schema/#schema-validation","title":"Schema Validation","text":"<pre><code>import yaml\nimport jsonschema\n\n# Load configuration\nwith open('config.yaml') as f:\n    config = yaml.safe_load(f)\n\n# Load schema\nwith open('config-schema.json') as f:\n    schema = json.load(f)\n\n# Validate\ntry:\n    jsonschema.validate(config, schema)\n    print(\"Configuration is valid\")\nexcept jsonschema.ValidationError as e:\n    print(f\"Validation error: {e.message}\")\n</code></pre>"},{"location":"reference/config-schema/#cli-validation","title":"CLI Validation","text":"<pre><code># Test configuration with CodeFusion\ncf --config my-config.yaml stats\n\n# Use yamllint for syntax checking\nyamllint my-config.yaml\n</code></pre>"},{"location":"reference/config-schema/#next-steps","title":"Next Steps","text":"<ul> <li>See configuration examples for practical use cases</li> <li>Check the CLI reference for command-line options</li> <li>Review configuration best practices</li> </ul>"},{"location":"usage/cli/","title":"CLI Commands","text":"<p>CodeFusion provides a comprehensive command-line interface for repository exploration and code analysis.</p>"},{"location":"usage/cli/#overview","title":"Overview","text":"<p>The main CLI entry point is the <code>cf</code> command:</p> <pre><code>cf --help\n</code></pre>"},{"location":"usage/cli/#global-options","title":"Global Options","text":"<p>These options are available for all commands:</p> <pre><code>cf [OPTIONS] COMMAND [ARGS]...\n\nGlobal Options:\n  --config, -c PATH    Configuration file path [default: config/default/config.yaml]\n  --verbose, -v        Enable verbose output\n  --help               Show help message\n</code></pre>"},{"location":"usage/cli/#commands","title":"Commands","text":""},{"location":"usage/cli/#index-index-a-repository","title":"<code>index</code> - Index a Repository","text":"<p>Index a repository to build the knowledge base.</p> <pre><code>cf index [OPTIONS] REPO_PATH\n</code></pre> <p>Arguments: - <code>REPO_PATH</code>: Path to the repository to index</p> <p>Options: - <code>--strategy {react,plan_act,sense_act}</code>: Exploration strategy [default: react]</p> <p>Examples: <pre><code># Basic indexing\ncf index /path/to/repository\n\n# Use specific strategy\ncf index --strategy plan_act /path/to/repository\n\n# With custom config\ncf --config my-config.yaml index /path/to/repository\n</code></pre></p>"},{"location":"usage/cli/#query-query-the-knowledge-base","title":"<code>query</code> - Query the Knowledge Base","text":"<p>Ask natural language questions about the indexed codebase.</p> <pre><code>cf query [OPTIONS] QUESTION\n</code></pre> <p>Arguments: - <code>QUESTION</code>: Question to ask about the code</p> <p>Options: - <code>--repo-path PATH</code>: Repository path (if not using saved KB) - <code>--strategy {react,plan_act,sense_act}</code>: Exploration strategy [default: react]</p> <p>Examples: <pre><code># Basic query\ncf query \"How does authentication work?\"\n\n# Query with specific repository\ncf query --repo-path /path/to/repo \"What are the main API endpoints?\"\n\n# Use different reasoning strategy\ncf query --strategy plan_act \"How is the database configured?\"\n</code></pre></p>"},{"location":"usage/cli/#explore-full-exploration-workflow","title":"<code>explore</code> - Full Exploration Workflow","text":"<p>Run complete exploration including indexing and automatic insights.</p> <pre><code>cf explore [OPTIONS] REPO_PATH\n</code></pre> <p>Arguments: - <code>REPO_PATH</code>: Path to repository to explore</p> <p>Options: - <code>--strategy {react,plan_act,sense_act}</code>: Exploration strategy [default: react]</p> <p>Examples: <pre><code># Full exploration\ncf explore /path/to/repository\n\n# With specific strategy\ncf explore --strategy sense_act /path/to/repository\n</code></pre></p>"},{"location":"usage/cli/#stats-show-knowledge-base-statistics","title":"<code>stats</code> - Show Knowledge Base Statistics","text":"<p>Display statistics about the knowledge base.</p> <pre><code>cf stats [OPTIONS]\n</code></pre> <p>Options: - <code>--repo-path PATH</code>: Repository path</p> <p>Examples: <pre><code># Show stats for current KB\ncf stats\n\n# Show stats for specific repository\ncf stats --repo-path /path/to/repository\n</code></pre></p>"},{"location":"usage/cli/#demo-run-demo","title":"<code>demo</code> - Run Demo","text":"<p>Run a demonstration of CodeFusion capabilities.</p> <pre><code>cf demo REPO_PATH\n</code></pre> <p>Arguments: - <code>REPO_PATH</code>: Path to repository for demo</p> <p>Examples: <pre><code>cf demo /path/to/sample/repository\n</code></pre></p>"},{"location":"usage/cli/#configuration-integration","title":"Configuration Integration","text":""},{"location":"usage/cli/#using-configuration-files","title":"Using Configuration Files","text":"<pre><code># Use custom configuration\ncf --config /path/to/config.yaml index /path/to/repo\n\n# Configuration hierarchy:\n# 1. Command line options (highest priority)\n# 2. Configuration file\n# 3. Environment variables\n# 4. Default values (lowest priority)\n</code></pre>"},{"location":"usage/cli/#environment-variables","title":"Environment Variables","text":"<p>Set environment variables to override configuration:</p> <pre><code>export OPENAI_API_KEY=\"your-api-key\"\nexport NEO4J_PASSWORD=\"your-password\"\ncf index /path/to/repo\n</code></pre>"},{"location":"usage/cli/#advanced-usage","title":"Advanced Usage","text":""},{"location":"usage/cli/#exploration-strategies","title":"Exploration Strategies","text":""},{"location":"usage/cli/#react-strategy-default","title":"ReAct Strategy (Default)","text":"<p>Reasoning + Acting approach for iterative exploration:</p> <pre><code>cf query --strategy react \"Explain the architecture\"\n</code></pre> <p>Best for: - General code understanding - Interactive exploration - Balanced speed and thoroughness</p>"},{"location":"usage/cli/#plan-then-act-strategy","title":"Plan-then-Act Strategy","text":"<p>Create a plan before execution:</p> <pre><code>cf query --strategy plan_act \"How do I set up this project?\"\n</code></pre> <p>Best for: - Systematic analysis - Setup and installation questions - Step-by-step procedures</p>"},{"location":"usage/cli/#sense-then-act-strategy","title":"Sense-then-Act Strategy","text":"<p>Observe before taking action:</p> <pre><code>cf query --strategy sense_act \"What testing frameworks are used?\"\n</code></pre> <p>Best for: - Complex codebases - Discovering patterns - Unknown technology stacks</p>"},{"location":"usage/cli/#knowledge-base-types","title":"Knowledge Base Types","text":""},{"location":"usage/cli/#vector-database-default","title":"Vector Database (Default)","text":"<p>For semantic similarity search:</p> <pre><code># config.yaml\nkb_type: \"vector\"\nembedding_model: \"all-MiniLM-L6-v2\"\n</code></pre> <pre><code>cf --config config.yaml index /path/to/repo\n</code></pre>"},{"location":"usage/cli/#neo4j-graph-database","title":"Neo4j Graph Database","text":"<p>For relationship analysis:</p> <pre><code># config.yaml\nkb_type: \"neo4j\"\nneo4j_uri: \"bolt://localhost:7687\"\nneo4j_user: \"neo4j\"\nneo4j_password: \"password\"\n</code></pre> <pre><code>cf --config config.yaml index /path/to/repo\n</code></pre>"},{"location":"usage/cli/#batch-processing","title":"Batch Processing","text":""},{"location":"usage/cli/#process-multiple-repositories","title":"Process Multiple Repositories","text":"<pre><code># Create a script for batch processing\n#!/bin/bash\nfor repo in /path/to/repos/*; do\n    if [ -d \"$repo\" ]; then\n        echo \"Processing $repo\"\n        cf index \"$repo\"\n    fi\ndone\n</code></pre>"},{"location":"usage/cli/#using-configuration-templates","title":"Using Configuration Templates","text":"<pre><code># Create repo-specific configs\ncp config/default/config.yaml config/repo1.yaml\n# Edit repo1.yaml for specific needs\ncf --config config/repo1.yaml index /path/to/repo1\n</code></pre>"},{"location":"usage/cli/#output-and-logging","title":"Output and Logging","text":""},{"location":"usage/cli/#verbose-mode","title":"Verbose Mode","text":"<p>Get detailed output during processing:</p> <pre><code>cf --verbose index /path/to/repo\n</code></pre>"},{"location":"usage/cli/#artifact-directories","title":"Artifact Directories","text":"<p>CodeFusion creates timestamped artifact directories:</p> <pre><code>artifacts_myproject_20240315_143022/\n\u251c\u2500\u2500 kb/\n\u2502   \u251c\u2500\u2500 entities.json\n\u2502   \u251c\u2500\u2500 relationships.json\n\u2502   \u2514\u2500\u2500 embeddings.pkl\n\u2514\u2500\u2500 myproject_config.yaml\n</code></pre>"},{"location":"usage/cli/#log-files","title":"Log Files","text":"<p>Check logs for troubleshooting:</p> <pre><code># View recent activity\ntail -f ~/.codefusion/logs/codefusion.log\n\n# Search for errors\ngrep ERROR ~/.codefusion/logs/codefusion.log\n</code></pre>"},{"location":"usage/cli/#integration-with-ides","title":"Integration with IDEs","text":""},{"location":"usage/cli/#vs-code-integration","title":"VS Code Integration","text":"<p>Create a VS Code task:</p> <pre><code>// .vscode/tasks.json\n{\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"label\": \"CodeFusion Index\",\n            \"type\": \"shell\",\n            \"command\": \"cf\",\n            \"args\": [\"index\", \"${workspaceFolder}\"],\n            \"group\": \"build\",\n            \"presentation\": {\n                \"echo\": true,\n                \"reveal\": \"always\",\n                \"focus\": false,\n                \"panel\": \"shared\"\n            }\n        }\n    ]\n}\n</code></pre>"},{"location":"usage/cli/#shell-aliases","title":"Shell Aliases","text":"<p>Create convenient aliases:</p> <pre><code># Add to ~/.bashrc or ~/.zshrc\nalias cfi='cf index'\nalias cfq='cf query'\nalias cfe='cf explore'\nalias cfs='cf stats'\n\n# Usage\ncfi /path/to/repo\ncfq \"How does login work?\"\n</code></pre>"},{"location":"usage/cli/#troubleshooting","title":"Troubleshooting","text":""},{"location":"usage/cli/#common-issues","title":"Common Issues","text":"<p>Command not found: <pre><code># Check installation\nwhich cf\npip list | grep codefusion\n\n# Reinstall if needed\npip install --upgrade codefusion\n</code></pre></p> <p>Permission errors: <pre><code># Check file permissions\nls -la /path/to/repo\n\n# Run with appropriate permissions\nsudo cf index /path/to/repo  # Not recommended\n</code></pre></p> <p>Configuration errors: <pre><code># Validate configuration\ncf --config config.yaml stats\n\n# Check configuration syntax\npython3.11 -c \"import yaml; yaml.safe_load(open('config.yaml'))\"\n</code></pre></p> <p>Memory issues: <pre><code># Monitor memory usage\ncf --verbose index /path/to/large/repo\n\n# Adjust configuration for large repos\n# Increase max_file_size or add exclusions\n</code></pre></p>"},{"location":"usage/cli/#debug-mode","title":"Debug Mode","text":"<p>Enable detailed debugging:</p> <pre><code>export CF_DEBUG=1\ncf index /path/to/repo\n</code></pre>"},{"location":"usage/cli/#performance-profiling","title":"Performance Profiling","text":"<p>Profile command execution:</p> <pre><code>time cf index /path/to/repo\n\n# With memory profiling\n/usr/bin/time -v cf index /path/to/repo\n</code></pre>"},{"location":"usage/cli/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Configuration</li> <li>See Usage Examples</li> <li>Check the API Reference</li> </ul>"},{"location":"usage/configuration/","title":"Configuration","text":"<p>CodeFusion provides flexible configuration options to customize its behavior for different use cases and environments.</p>"},{"location":"usage/configuration/#configuration-methods","title":"Configuration Methods","text":""},{"location":"usage/configuration/#1-configuration-files","title":"1. Configuration Files","text":"<p>The primary way to configure CodeFusion is through YAML configuration files:</p> <pre><code>cf --config /path/to/config.yaml index /path/to/repo\n</code></pre>"},{"location":"usage/configuration/#2-environment-variables","title":"2. Environment Variables","text":"<p>Override specific settings using environment variables:</p> <pre><code>export OPENAI_API_KEY=\"your-api-key\"\nexport NEO4J_PASSWORD=\"password\"\ncf index /path/to/repo\n</code></pre>"},{"location":"usage/configuration/#3-command-line-options","title":"3. Command Line Options","text":"<p>Some settings can be overridden via command line:</p> <pre><code>cf --verbose index --strategy plan_act /path/to/repo\n</code></pre>"},{"location":"usage/configuration/#configuration-hierarchy","title":"Configuration Hierarchy","text":"<p>Settings are applied in order of precedence (highest to lowest):</p> <ol> <li>Command line options (highest priority)</li> <li>Configuration file (specified with <code>--config</code>)</li> <li>Environment variables</li> <li>Default values (lowest priority)</li> </ol>"},{"location":"usage/configuration/#basic-configuration","title":"Basic Configuration","text":""},{"location":"usage/configuration/#default-configuration","title":"Default Configuration","text":"<pre><code># config/default/config.yaml\nrepo_path: null\noutput_dir: \"./output\"\n\n# LLM settings\nllm_model: \"gpt-3.5-turbo\"\nllm_api_key: null\nllm_base_url: null\n\n# Knowledge base settings\nkb_type: \"vector\"  # \"text\", \"neo4j\", or \"vector\"\nkb_path: \"./kb\"\nembedding_model: \"all-MiniLM-L6-v2\"\n\n# Neo4j settings (when kb_type: \"neo4j\")\nneo4j_uri: null\nneo4j_user: null\nneo4j_password: null\n\n# File filtering\nmax_file_size: 1048576  # 1MB\nexcluded_dirs:\n  - \".git\"\n  - \"__pycache__\"\n  - \"node_modules\"\n  - \".venv\"\n  - \"venv\"\nexcluded_extensions:\n  - \".pyc\"\n  - \".pyo\"\n  - \".pyd\"\n  - \".so\"\n  - \".dll\"\n  - \".exe\"\n  - \".env\"\n\n# Exploration settings\nexploration_strategy: \"react\"  # \"react\", \"plan_act\", \"sense_act\"\nmax_exploration_depth: 5\n</code></pre>"},{"location":"usage/configuration/#custom-configuration-example","title":"Custom Configuration Example","text":"<pre><code># my-config.yaml\n# Repository settings\nrepo_path: \"/path/to/my/project\"\noutput_dir: \"/tmp/codefusion-output\"\n\n# Use GPT-4 for better analysis\nllm_model: \"gpt-4\"\nllm_api_key: null  # Will use OPENAI_API_KEY env var\n\n# Use Neo4j for complex relationship analysis\nkb_type: \"neo4j\"\nneo4j_uri: \"bolt://localhost:7687\"\nneo4j_user: \"neo4j\"\nneo4j_password: \"password\"\n\n# Custom file filtering for JavaScript project\nexcluded_dirs:\n  - \".git\"\n  - \"node_modules\"\n  - \"dist\"\n  - \"build\"\n  - \".next\"\n  - \"coverage\"\nexcluded_extensions:\n  - \".map\"\n  - \".d.ts\"\n  - \".min.js\"\n  - \".bundle.js\"\n\n# Use plan-act strategy for systematic analysis\nexploration_strategy: \"plan_act\"\nmax_exploration_depth: 8\n</code></pre>"},{"location":"usage/configuration/#llm-configuration","title":"LLM Configuration","text":""},{"location":"usage/configuration/#openai-configuration","title":"OpenAI Configuration","text":"<pre><code>llm_model: \"gpt-4\"\nllm_api_key: null  # Set via OPENAI_API_KEY\nllm_base_url: null  # Use default OpenAI endpoint\n</code></pre> <pre><code>export OPENAI_API_KEY=\"sk-your-api-key-here\"\n</code></pre>"},{"location":"usage/configuration/#anthropic-configuration","title":"Anthropic Configuration","text":"<pre><code>llm_model: \"claude-3-sonnet-20240229\"\nllm_api_key: null  # Set via ANTHROPIC_API_KEY\n</code></pre> <pre><code>export ANTHROPIC_API_KEY=\"your-anthropic-key\"\n</code></pre>"},{"location":"usage/configuration/#azure-openai-configuration","title":"Azure OpenAI Configuration","text":"<pre><code>llm_model: \"gpt-4\"\nllm_base_url: \"https://your-resource.openai.azure.com/\"\nllm_api_key: null  # Set via AZURE_OPENAI_API_KEY\n</code></pre> <pre><code>export AZURE_OPENAI_API_KEY=\"your-azure-key\"\nexport AZURE_OPENAI_ENDPOINT=\"https://your-resource.openai.azure.com/\"\n</code></pre>"},{"location":"usage/configuration/#localself-hosted-models","title":"Local/Self-hosted Models","text":"<pre><code>llm_model: \"local-model\"\nllm_base_url: \"http://localhost:8000/v1\"\nllm_api_key: \"not-required\"\n</code></pre>"},{"location":"usage/configuration/#knowledge-base-configuration","title":"Knowledge Base Configuration","text":""},{"location":"usage/configuration/#vector-database-default","title":"Vector Database (Default)","text":"<pre><code>kb_type: \"vector\"\nkb_path: \"./vector_kb\"\nembedding_model: \"all-MiniLM-L6-v2\"  # Fast, good quality\n\n# Alternative models:\n# embedding_model: \"all-mpnet-base-v2\"      # Higher quality, slower\n# embedding_model: \"BAAI/bge-small-en-v1.5\" # Optimized for code\n</code></pre>"},{"location":"usage/configuration/#neo4j-graph-database","title":"Neo4j Graph Database","text":"<pre><code>kb_type: \"neo4j\"\nkb_path: \"./neo4j_kb\"\nneo4j_uri: \"bolt://localhost:7687\"\nneo4j_user: \"neo4j\"\nneo4j_password: \"password\"\n\n# For Neo4j Cloud/AuraDB\n# neo4j_uri: \"neo4j+s://your-instance.databases.neo4j.io\"\n</code></pre>"},{"location":"usage/configuration/#text-based-simple","title":"Text-based (Simple)","text":"<pre><code>kb_type: \"text\"\nkb_path: \"./text_kb\"\n# Fastest option, limited search capabilities\n</code></pre>"},{"location":"usage/configuration/#file-filtering-configuration","title":"File Filtering Configuration","text":""},{"location":"usage/configuration/#directory-exclusions","title":"Directory Exclusions","text":"<pre><code>excluded_dirs:\n  # Version control\n  - \".git\"\n  - \".svn\"\n  - \".hg\"\n\n  # Build artifacts\n  - \"dist\"\n  - \"build\"\n  - \"out\"\n  - \"target\"\n\n  # Dependencies\n  - \"node_modules\"\n  - \"vendor\"\n  - \"venv\"\n  - \".venv\"\n\n  # IDE files\n  - \".vscode\"\n  - \".idea\"\n  - \".vs\"\n\n  # Temporary files\n  - \"tmp\"\n  - \"temp\"\n  - \"__pycache__\"\n  - \".pytest_cache\"\n</code></pre>"},{"location":"usage/configuration/#file-extension-exclusions","title":"File Extension Exclusions","text":"<pre><code>excluded_extensions:\n  # Compiled files\n  - \".pyc\"\n  - \".pyo\"\n  - \".pyd\"\n  - \".class\"\n  - \".o\"\n  - \".so\"\n  - \".dll\"\n  - \".exe\"\n\n  # Archives\n  - \".zip\"\n  - \".tar.gz\"\n  - \".rar\"\n\n  # Media files\n  - \".jpg\"\n  - \".png\"\n  - \".gif\"\n  - \".mp4\"\n  - \".mp3\"\n\n  # Documentation\n  - \".pdf\"\n  - \".doc\"\n  - \".docx\"\n\n  # Environment files\n  - \".env\"\n  - \".env.local\"\n</code></pre>"},{"location":"usage/configuration/#file-size-limits","title":"File Size Limits","text":"<pre><code>max_file_size: 1048576  # 1MB in bytes\n\n# For large codebases with big files\n# max_file_size: 5242880  # 5MB\n\n# For repositories with many small files\n# max_file_size: 524288   # 512KB\n</code></pre>"},{"location":"usage/configuration/#exploration-strategy-configuration","title":"Exploration Strategy Configuration","text":""},{"location":"usage/configuration/#react-strategy","title":"ReAct Strategy","text":"<pre><code>exploration_strategy: \"react\"\nmax_exploration_depth: 5\n\n# ReAct-specific settings (if available)\nreact_settings:\n  reasoning_steps: 3\n  action_timeout: 30\n  backtrack_on_failure: true\n</code></pre>"},{"location":"usage/configuration/#plan-then-act-strategy","title":"Plan-then-Act Strategy","text":"<pre><code>exploration_strategy: \"plan_act\"\nmax_exploration_depth: 8\n\n# Plan-Act specific settings\nplan_act_settings:\n  planning_depth: 3\n  execution_parallel: false\n  plan_validation: true\n</code></pre>"},{"location":"usage/configuration/#sense-then-act-strategy","title":"Sense-then-Act Strategy","text":"<pre><code>exploration_strategy: \"sense_act\"\nmax_exploration_depth: 10\n\n# Sense-Act specific settings\nsense_act_settings:\n  observation_cycles: 5\n  adaptation_threshold: 0.7\n  exploration_breadth: 5\n</code></pre>"},{"location":"usage/configuration/#environment-specific-configurations","title":"Environment-Specific Configurations","text":""},{"location":"usage/configuration/#development-environment","title":"Development Environment","text":"<pre><code># dev-config.yaml\nllm_model: \"gpt-3.5-turbo\"  # Faster, cheaper\nkb_type: \"vector\"           # Quick setup\nexploration_strategy: \"react\"\nmax_exploration_depth: 3    # Quick exploration\nexcluded_dirs:\n  - \".git\"\n  - \"node_modules\"\n  - \"__pycache__\"\n</code></pre>"},{"location":"usage/configuration/#production-analysis","title":"Production Analysis","text":"<pre><code># prod-config.yaml\nllm_model: \"gpt-4\"          # Best quality\nkb_type: \"neo4j\"           # Advanced analysis\nexploration_strategy: \"plan_act\"\nmax_exploration_depth: 10   # Thorough analysis\nmax_file_size: 5242880      # Handle larger files\n</code></pre>"},{"location":"usage/configuration/#large-codebase-configuration","title":"Large Codebase Configuration","text":"<pre><code># large-repo-config.yaml\nkb_type: \"neo4j\"\nexploration_strategy: \"sense_act\"\nmax_exploration_depth: 15\nmax_file_size: 2097152  # 2MB\n\n# More aggressive filtering\nexcluded_dirs:\n  - \".git\"\n  - \"node_modules\"\n  - \"vendor\"\n  - \"third_party\"\n  - \"external\"\n  - \"deps\"\n  - \"build\"\n  - \"dist\"\n  - \"out\"\n  - \"target\"\n  - \"bin\"\n  - \"obj\"\n  - \"logs\"\n  - \"tmp\"\n  - \"temp\"\n  - \"cache\"\n  - \".cache\"\n  - \"__pycache__\"\n  - \".pytest_cache\"\n  - \".mypy_cache\"\n  - \"coverage\"\n  - \".coverage\"\n  - \"htmlcov\"\n\nexcluded_extensions:\n  - \".pyc\"\n  - \".pyo\"\n  - \".pyd\"\n  - \".so\"\n  - \".dll\"\n  - \".exe\"\n  - \".class\"\n  - \".jar\"\n  - \".war\"\n  - \".zip\"\n  - \".tar.gz\"\n  - \".rar\"\n  - \".7z\"\n  - \".pdf\"\n  - \".doc\"\n  - \".docx\"\n  - \".xls\"\n  - \".xlsx\"\n  - \".ppt\"\n  - \".pptx\"\n  - \".jpg\"\n  - \".jpeg\"\n  - \".png\"\n  - \".gif\"\n  - \".bmp\"\n  - \".ico\"\n  - \".svg\"\n  - \".mp3\"\n  - \".mp4\"\n  - \".avi\"\n  - \".mov\"\n  - \".wmv\"\n  - \".flv\"\n  - \".env\"\n  - \".env.local\"\n  - \".env.production\"\n  - \".log\"\n  - \".lock\"\n</code></pre>"},{"location":"usage/configuration/#configuration-validation","title":"Configuration Validation","text":""},{"location":"usage/configuration/#validate-configuration","title":"Validate Configuration","text":"<pre><code># Test configuration\ncf --config my-config.yaml stats\n\n# Validate YAML syntax\npython3.11 -c \"\nimport yaml\nwith open('my-config.yaml') as f:\n    config = yaml.safe_load(f)\n    print('Configuration is valid')\n\"\n</code></pre>"},{"location":"usage/configuration/#common-configuration-errors","title":"Common Configuration Errors","text":"<p>Invalid YAML syntax: <pre><code># Check for syntax errors\nyamllint my-config.yaml\n</code></pre></p> <p>Missing required fields: <pre><code># This will cause errors:\nkb_type: \"neo4j\"\n# Missing: neo4j_uri, neo4j_user, neo4j_password\n</code></pre></p> <p>Invalid values: <pre><code># These will cause validation errors:\nkb_type: \"invalid_type\"\nexploration_strategy: \"unknown_strategy\"\nmax_exploration_depth: -1\n</code></pre></p>"},{"location":"usage/configuration/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"usage/configuration/#custom-artifact-directories","title":"Custom Artifact Directories","text":"<pre><code># Specify custom artifact location\noutput_dir: \"/custom/path/artifacts\"\nkb_path: \"/custom/path/knowledge_base\"\n</code></pre>"},{"location":"usage/configuration/#performance-tuning","title":"Performance Tuning","text":"<pre><code># For high-performance analysis\nmax_file_size: 10485760     # 10MB\nmax_exploration_depth: 20\nexploration_strategy: \"sense_act\"\n\n# Vector DB optimization\nembedding_model: \"BAAI/bge-small-en-v1.5\"  # Optimized for code\n\n# Neo4j optimization\nneo4j_settings:\n  max_connections: 10\n  connection_timeout: 30\n  query_timeout: 300\n</code></pre>"},{"location":"usage/configuration/#debugging-configuration","title":"Debugging Configuration","text":"<pre><code># Enable detailed logging\ndebug: true\nverbose: true\nlog_level: \"DEBUG\"\nlog_file: \"/tmp/codefusion-debug.log\"\n</code></pre>"},{"location":"usage/configuration/#configuration-templates","title":"Configuration Templates","text":""},{"location":"usage/configuration/#python-project-template","title":"Python Project Template","text":"<pre><code># python-project.yaml\nllm_model: \"gpt-4\"\nkb_type: \"vector\"\nexploration_strategy: \"react\"\n\nexcluded_dirs:\n  - \".git\"\n  - \"__pycache__\"\n  - \".pytest_cache\"\n  - \".mypy_cache\"\n  - \"venv\"\n  - \".venv\"\n  - \"env\"\n  - \".env\"\n  - \"dist\"\n  - \"build\"\n  - \"*.egg-info\"\n\nexcluded_extensions:\n  - \".pyc\"\n  - \".pyo\"\n  - \".pyd\"\n  - \".so\"\n  - \".egg\"\n  - \".whl\"\n</code></pre>"},{"location":"usage/configuration/#javascript-project-template","title":"JavaScript Project Template","text":"<pre><code># javascript-project.yaml\nllm_model: \"gpt-4\"\nkb_type: \"vector\"\nexploration_strategy: \"react\"\n\nexcluded_dirs:\n  - \".git\"\n  - \"node_modules\"\n  - \"dist\"\n  - \"build\"\n  - \".next\"\n  - \"coverage\"\n  - \".nyc_output\"\n\nexcluded_extensions:\n  - \".map\"\n  - \".min.js\"\n  - \".min.css\"\n  - \".bundle.js\"\n  - \".chunk.js\"\n</code></pre>"},{"location":"usage/configuration/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about CLI Commands</li> <li>See Configuration Examples</li> <li>Check the Configuration Reference</li> </ul>"},{"location":"usage/examples/","title":"Usage Examples","text":"<p>This page provides practical examples of using CodeFusion for different scenarios and use cases.</p>"},{"location":"usage/examples/#basic-usage-examples","title":"Basic Usage Examples","text":""},{"location":"usage/examples/#1-quick-repository-analysis","title":"1. Quick Repository Analysis","text":"<pre><code># Index a small repository quickly\ncf index /path/to/my-project\n\n# Ask basic questions\ncf query \"What is the main entry point?\"\ncf query \"How many Python files are there?\"\ncf query \"What external dependencies are used?\"\n</code></pre>"},{"location":"usage/examples/#2-comprehensive-code-exploration","title":"2. Comprehensive Code Exploration","text":"<pre><code># Full exploration with detailed analysis\ncf explore /path/to/large-project\n\n# Ask complex questions\ncf query \"How does the authentication system work?\"\ncf query \"What design patterns are used in this codebase?\"\ncf query \"How would I add a new API endpoint?\"\n</code></pre>"},{"location":"usage/examples/#3-repository-statistics","title":"3. Repository Statistics","text":"<pre><code># Get knowledge base statistics\ncf stats\n\n# Get statistics for specific repository\ncf stats --repo-path /path/to/project\n</code></pre>"},{"location":"usage/examples/#language-specific-examples","title":"Language-Specific Examples","text":""},{"location":"usage/examples/#python-project-analysis","title":"Python Project Analysis","text":"<pre><code># Index a Python project\ncf index /path/to/python-project\n\n# Python-specific questions\ncf query \"What Flask routes are defined?\"\ncf query \"How is database connectivity handled?\"\ncf query \"What testing framework is used?\"\ncf query \"Are there any Django models defined?\"\ncf query \"How does error handling work?\"\n</code></pre> <p>Example Output: <pre><code>\ud83d\udd0d Analysis Results:\n\nFlask routes found in app.py:\n- @app.route('/api/users', methods=['GET', 'POST'])\n- @app.route('/api/auth/login', methods=['POST'])\n- @app.route('/api/data/&lt;int:id&gt;', methods=['GET'])\n\nDatabase connectivity:\n- SQLAlchemy ORM used in models.py\n- Connection string in config.py\n- Database initialization in app/__init__.py\n</code></pre></p>"},{"location":"usage/examples/#javascriptnodejs-project","title":"JavaScript/Node.js Project","text":"<pre><code># Index a JavaScript project\ncf index /path/to/js-project\n\n# JavaScript-specific questions\ncf query \"What Express.js middlewares are used?\"\ncf query \"How is API routing structured?\"\ncf query \"What React components are defined?\"\ncf query \"How is state management handled?\"\ncf query \"What build tools are configured?\"\n</code></pre>"},{"location":"usage/examples/#java-project-analysis","title":"Java Project Analysis","text":"<pre><code># Index a Java project\ncf index /path/to/java-project\n\n# Java-specific questions\ncf query \"What Spring Boot controllers exist?\"\ncf query \"How is dependency injection configured?\"\ncf query \"What JPA entities are defined?\"\ncf query \"How is exception handling implemented?\"\ncf query \"What Maven dependencies are used?\"\n</code></pre>"},{"location":"usage/examples/#strategy-specific-examples","title":"Strategy-Specific Examples","text":""},{"location":"usage/examples/#react-strategy-default","title":"ReAct Strategy (Default)","text":"<p>Best for iterative exploration and general understanding:</p> <pre><code># Use ReAct for balanced analysis\ncf query --strategy react \"Explain the overall architecture\"\ncf query --strategy react \"How do I run tests?\"\ncf query --strategy react \"What's the deployment process?\"\n</code></pre> <p>When to use ReAct: - General code understanding - Interactive exploration - Balanced speed and depth - Unknown codebase exploration</p>"},{"location":"usage/examples/#plan-then-act-strategy","title":"Plan-then-Act Strategy","text":"<p>Best for systematic analysis and step-by-step procedures:</p> <pre><code># Use Plan-Act for systematic analysis\ncf query --strategy plan_act \"How do I set up this project locally?\"\ncf query --strategy plan_act \"What's the complete CI/CD pipeline?\"\ncf query --strategy plan_act \"How do I contribute to this project?\"\n</code></pre> <p>When to use Plan-Act: - Setup and installation guides - Systematic code analysis - Process documentation - Step-by-step procedures</p>"},{"location":"usage/examples/#sense-then-act-strategy","title":"Sense-then-Act Strategy","text":"<p>Best for complex codebases and pattern discovery:</p> <pre><code># Use Sense-Act for complex analysis\ncf query --strategy sense_act \"What architectural patterns are used?\"\ncf query --strategy sense_act \"How is security implemented?\"\ncf query --strategy sense_act \"What performance optimizations exist?\"\n</code></pre> <p>When to use Sense-Act: - Large, complex codebases - Pattern discovery - Security analysis - Performance investigation</p>"},{"location":"usage/examples/#configuration-examples","title":"Configuration Examples","text":""},{"location":"usage/examples/#development-configuration","title":"Development Configuration","text":"<pre><code># dev-config.yaml - Fast analysis for development\nllm_model: \"gpt-3.5-turbo\"\nkb_type: \"vector\"\nexploration_strategy: \"react\"\nmax_exploration_depth: 3\n\nexcluded_dirs:\n  - \".git\"\n  - \"node_modules\"\n  - \"__pycache__\"\n  - \"venv\"\n\nexcluded_extensions:\n  - \".pyc\"\n  - \".log\"\n  - \".tmp\"\n</code></pre> <pre><code>cf --config dev-config.yaml index /path/to/project\n</code></pre>"},{"location":"usage/examples/#production-analysis-configuration","title":"Production Analysis Configuration","text":"<pre><code># prod-config.yaml - Thorough analysis\nllm_model: \"gpt-4\"\nkb_type: \"neo4j\"\nneo4j_uri: \"bolt://localhost:7687\"\nneo4j_user: \"neo4j\"\nneo4j_password: \"password\"\nexploration_strategy: \"plan_act\"\nmax_exploration_depth: 10\n</code></pre> <pre><code>cf --config prod-config.yaml explore /path/to/complex-project\n</code></pre>"},{"location":"usage/examples/#real-world-scenarios","title":"Real-World Scenarios","text":""},{"location":"usage/examples/#scenario-1-onboarding-to-a-new-project","title":"Scenario 1: Onboarding to a New Project","text":"<pre><code># Step 1: Get project overview\ncf explore /path/to/new-project\n\n# Step 2: Understand the technology stack\ncf query \"What technologies and frameworks are used?\"\n\n# Step 3: Find setup instructions\ncf query \"How do I set up the development environment?\"\n\n# Step 4: Understand the project structure\ncf query \"What is the overall project structure?\"\n\n# Step 5: Find the main entry points\ncf query \"What are the main entry points and how do I run the application?\"\n</code></pre>"},{"location":"usage/examples/#scenario-2-code-review-and-analysis","title":"Scenario 2: Code Review and Analysis","text":"<pre><code># Index the repository\ncf index /path/to/review-project\n\n# Check for security issues\ncf query \"Are there any potential security vulnerabilities?\"\n\n# Analyze code quality\ncf query \"What code quality issues should I be aware of?\"\n\n# Check testing coverage\ncf query \"How comprehensive is the test coverage?\"\n\n# Look for architectural concerns\ncf query \"Are there any architectural anti-patterns?\"\n</code></pre>"},{"location":"usage/examples/#scenario-3-refactoring-planning","title":"Scenario 3: Refactoring Planning","text":"<pre><code># Analyze current architecture\ncf query --strategy sense_act \"What is the current architecture?\"\n\n# Identify dependencies\ncf query \"What are the main dependencies between components?\"\n\n# Find coupling issues\ncf query \"Where is the code tightly coupled?\"\n\n# Identify refactoring opportunities\ncf query \"What parts of the code would benefit from refactoring?\"\n</code></pre>"},{"location":"usage/examples/#scenario-4-api-documentation-generation","title":"Scenario 4: API Documentation Generation","text":"<pre><code># Index the API project\ncf index /path/to/api-project\n\n# Find all API endpoints\ncf query \"What API endpoints are available?\"\n\n# Get endpoint details\ncf query \"What are the parameters and responses for each endpoint?\"\n\n# Understand authentication\ncf query \"How does API authentication work?\"\n\n# Find rate limiting\ncf query \"Is there rate limiting implemented?\"\n</code></pre>"},{"location":"usage/examples/#scenario-5-migration-planning","title":"Scenario 5: Migration Planning","text":"<pre><code># Analyze legacy codebase\ncf explore /path/to/legacy-project\n\n# Understand current technology stack\ncf query \"What technologies need to be migrated?\"\n\n# Identify migration challenges\ncf query \"What are the main challenges for migration?\"\n\n# Find external dependencies\ncf query \"What external services and APIs are used?\"\n\n# Plan migration strategy\ncf query \"What would be a good migration strategy?\"\n</code></pre>"},{"location":"usage/examples/#batch-processing-examples","title":"Batch Processing Examples","text":""},{"location":"usage/examples/#process-multiple-repositories","title":"Process Multiple Repositories","text":"<pre><code>#!/bin/bash\n# batch-analyze.sh\n\nrepositories=(\n    \"/path/to/repo1\"\n    \"/path/to/repo2\"\n    \"/path/to/repo3\"\n)\n\nfor repo in \"${repositories[@]}\"; do\n    echo \"Processing $repo...\"\n    cf index \"$repo\"\n\n    # Generate standard analysis\n    cf query --repo-path \"$repo\" \"What is the main technology stack?\" &gt; \"${repo##*/}-analysis.txt\"\n    cf query --repo-path \"$repo\" \"What are the main entry points?\" &gt;&gt; \"${repo##*/}-analysis.txt\"\n    cf query --repo-path \"$repo\" \"How is testing structured?\" &gt;&gt; \"${repo##*/}-analysis.txt\"\n\n    echo \"Completed $repo\"\ndone\n</code></pre>"},{"location":"usage/examples/#configuration-based-batch-processing","title":"Configuration-Based Batch Processing","text":"<pre><code>#!/bin/bash\n# config-batch.sh\n\nconfigs=(\n    \"config/python-analysis.yaml\"\n    \"config/javascript-analysis.yaml\"\n    \"config/java-analysis.yaml\"\n)\n\nrepo_path=\"/path/to/multi-language-project\"\n\nfor config in \"${configs[@]}\"; do\n    echo \"Running analysis with $config...\"\n    cf --config \"$config\" index \"$repo_path\"\n\n    # Run language-specific queries\n    language=$(basename \"$config\" .yaml | cut -d'-' -f1)\n    cf --config \"$config\" query \"What $language specific patterns are used?\" &gt; \"$language-analysis.txt\"\ndone\n</code></pre>"},{"location":"usage/examples/#integration-examples","title":"Integration Examples","text":""},{"location":"usage/examples/#vs-code-integration","title":"VS Code Integration","text":"<p>Create <code>.vscode/tasks.json</code>:</p> <pre><code>{\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"label\": \"CodeFusion: Index Project\",\n            \"type\": \"shell\",\n            \"command\": \"cf\",\n            \"args\": [\"index\", \"${workspaceFolder}\"],\n            \"group\": \"build\",\n            \"presentation\": {\n                \"echo\": true,\n                \"reveal\": \"always\",\n                \"focus\": false,\n                \"panel\": \"shared\"\n            },\n            \"problemMatcher\": []\n        },\n        {\n            \"label\": \"CodeFusion: Project Stats\",\n            \"type\": \"shell\",\n            \"command\": \"cf\",\n            \"args\": [\"stats\"],\n            \"group\": \"build\",\n            \"presentation\": {\n                \"echo\": true,\n                \"reveal\": \"always\",\n                \"focus\": false,\n                \"panel\": \"shared\"\n            },\n            \"problemMatcher\": []\n        }\n    ]\n}\n</code></pre>"},{"location":"usage/examples/#git-hooks-integration","title":"Git Hooks Integration","text":"<p>Create <code>.git/hooks/post-commit</code>:</p> <pre><code>#!/bin/bash\n# Re-index after commits\n\necho \"Re-indexing codebase after commit...\"\ncf index .\necho \"Indexing complete!\"\n</code></pre>"},{"location":"usage/examples/#cicd-integration","title":"CI/CD Integration","text":"<pre><code># .github/workflows/code-analysis.yml\nname: Code Analysis with CodeFusion\n\non:\n  pull_request:\n    branches: [ main ]\n\njobs:\n  analyze:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.11'\n\n    - name: Install CodeFusion\n      run: pip install codefusion\n\n    - name: Analyze codebase\n      env:\n        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n      run: |\n        cf index .\n        cf query \"What are the main changes in this codebase?\" &gt; analysis.txt\n        cf query \"Are there any potential issues?\" &gt;&gt; analysis.txt\n\n    - name: Upload analysis\n      uses: actions/upload-artifact@v3\n      with:\n        name: code-analysis\n        path: analysis.txt\n</code></pre>"},{"location":"usage/examples/#performance-examples","title":"Performance Examples","text":""},{"location":"usage/examples/#large-repository-analysis","title":"Large Repository Analysis","text":"<pre><code># For repositories with 10k+ files\ncf --config large-repo-config.yaml index /path/to/large-repo\n\n# Use sense-act for better handling of complexity\ncf query --strategy sense_act \"What are the main architectural components?\"\n</code></pre> <p>large-repo-config.yaml: <pre><code>kb_type: \"neo4j\"\nexploration_strategy: \"sense_act\"\nmax_exploration_depth: 15\nmax_file_size: 5242880  # 5MB\n\nexcluded_dirs:\n  - \".git\"\n  - \"node_modules\"\n  - \"vendor\"\n  - \"third_party\"\n  - \"build\"\n  - \"dist\"\n  - \"coverage\"\n  - \"logs\"\n  - \"__pycache__\"\n</code></pre></p>"},{"location":"usage/examples/#memory-constrained-environment","title":"Memory-Constrained Environment","text":"<pre><code># memory-efficient-config.yaml\nkb_type: \"text\"  # Minimal memory usage\nexploration_strategy: \"react\"\nmax_exploration_depth: 3\nmax_file_size: 524288  # 512KB\n\nexcluded_dirs:\n  - \".git\"\n  - \"node_modules\"\n  - \"__pycache__\"\n  - \"build\"\n  - \"dist\"\n</code></pre> <pre><code>cf --config memory-efficient-config.yaml index /path/to/repo\n</code></pre>"},{"location":"usage/examples/#troubleshooting-examples","title":"Troubleshooting Examples","text":""},{"location":"usage/examples/#debug-configuration-issues","title":"Debug Configuration Issues","text":"<pre><code># Test configuration\ncf --config my-config.yaml --verbose stats\n\n# Validate YAML\npython3.11 -c \"import yaml; print(yaml.safe_load(open('my-config.yaml')))\"\n\n# Check Neo4j connection\ncf query \"test\" 2&gt;&amp;1 | grep -i neo4j\n</code></pre>"},{"location":"usage/examples/#performance-debugging","title":"Performance Debugging","text":"<pre><code># Monitor memory usage\ntime cf --verbose index /path/to/repo\n\n# Profile with detailed timing\nCF_DEBUG=1 cf index /path/to/repo\n</code></pre>"},{"location":"usage/examples/#common-error-solutions","title":"Common Error Solutions","text":"<p>API Key Issues: <pre><code># Check if API key is set\necho $OPENAI_API_KEY\n\n# Test with simple query\ncf query \"hello world\"\n</code></pre></p> <p>Memory Issues: <pre><code># Use text-based KB for large repos\ncf --config text-kb-config.yaml index /path/to/large/repo\n</code></pre></p> <p>Neo4j Connection Issues: <pre><code># Test Neo4j connectivity\ncurl http://localhost:7474\nneo4j status\n</code></pre></p>"},{"location":"usage/examples/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Configuration</li> <li>Read the CLI Reference</li> <li>Check Advanced Configuration</li> </ul>"}]}